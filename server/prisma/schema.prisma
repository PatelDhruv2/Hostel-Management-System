generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"  // Change if needed
  url      = env("DATABASE_URL")
}

model Admin {
  id         Int     @id @default(autoincrement())
  name       String
  password   String
  email      String  @unique
  room_count Int
}

model Role {
  role_id Int     @id @default(autoincrement())
  role    RoleEnum
  staff   Staff[]
}

enum RoleEnum {
  MANAGER
  CLEANER
  SECURITY
}

model Staff {
  id            Int       @id @default(autoincrement())
  name          String
  contact_number String
  date_of_join  DateTime
  salary        Decimal
  gender        GenderEnum
  age           Int
  roll_id       Int
  role          Role      @relation(fields: [roll_id], references: [role_id])
}


enum GenderEnum {
  MALE
  FEMALE
  OTHER
}

model Student1 {
  id       Int        @id @default(autoincrement())
  name     String?
  email    String     @unique
  password String
  gender   GenderEnum   @default(MALE)
  age      Int          @default(0)
  role     String       @default("student")

  student2    Student2?
  feedbacks   Feedback[]
  gatePasses  GatePass[]
  feePayments FeePayment[]
  room        Room?
}

model Student2 {
  student1_id      Int     @id
  mobile_number    String
  address         String
  emergency_number String
  parent_contact  String
  roll_number     Int

  student1 Student1 @relation(fields: [student1_id], references: [id])
  college  College  @relation(fields: [roll_number], references: [roll_number])
}

model College {
  roll_number  Int        @id
  college_name String
  students     Student2[]
}

model Room {
  id         Int    @id @default(autoincrement())
  student_id Int    @unique
  room_id    String

  student Student1 @relation(fields: [student_id], references: [id])
}
model HostelCommittee {
  id             Int         @id @default(autoincrement())
  name           String
  position       String
  contact_number String
  date_of_join   DateTime
  email          String?     @unique
  gender         GenderEnum
}


model Feedback {
  id           Int    @id @default(autoincrement())
  student1_id  Int
  issue        String
  room_number  String
  createdAt    DateTime @default(now())

  student Student1 @relation(fields: [student1_id], references: [id])
}

model GatePass {
  id           Int    @id @default(autoincrement())
  reason       String
  leave_date   DateTime
  arrival_date DateTime
  approval     ApprovalEnum
  student1_id  Int
  createdAt    DateTime @default(now())

  student Student1 @relation(fields: [student1_id], references: [id])
}

enum ApprovalEnum {
  PENDING
  APPROVED
  REJECTED
}

model FeePayment {
  id            Int    @id @default(autoincrement())
  semester      Int
  date_of_payment DateTime
  mode_of_payment String
  student_id    Int

  student Student1 @relation(fields: [student_id], references: [id])
}

model Annoncements {
  id          Int    @id @default(autoincrement())
  title       String
  description String
  date        DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
