
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Admin
 * 
 */
export type Admin = $Result.DefaultSelection<Prisma.$AdminPayload>
/**
 * Model Role
 * 
 */
export type Role = $Result.DefaultSelection<Prisma.$RolePayload>
/**
 * Model Staff
 * 
 */
export type Staff = $Result.DefaultSelection<Prisma.$StaffPayload>
/**
 * Model Student1
 * 
 */
export type Student1 = $Result.DefaultSelection<Prisma.$Student1Payload>
/**
 * Model Student2
 * 
 */
export type Student2 = $Result.DefaultSelection<Prisma.$Student2Payload>
/**
 * Model College
 * 
 */
export type College = $Result.DefaultSelection<Prisma.$CollegePayload>
/**
 * Model Room
 * 
 */
export type Room = $Result.DefaultSelection<Prisma.$RoomPayload>
/**
 * Model Feedback
 * 
 */
export type Feedback = $Result.DefaultSelection<Prisma.$FeedbackPayload>
/**
 * Model GatePass
 * 
 */
export type GatePass = $Result.DefaultSelection<Prisma.$GatePassPayload>
/**
 * Model FeePayment
 * 
 */
export type FeePayment = $Result.DefaultSelection<Prisma.$FeePaymentPayload>
/**
 * Model MessMenu
 * 
 */
export type MessMenu = $Result.DefaultSelection<Prisma.$MessMenuPayload>
/**
 * Model HostelCommittee
 * 
 */
export type HostelCommittee = $Result.DefaultSelection<Prisma.$HostelCommitteePayload>

/**
 * Enums
 */
export namespace $Enums {
  export const RoleEnum: {
  MANAGER: 'MANAGER',
  CLEANER: 'CLEANER',
  SECURITY: 'SECURITY'
};

export type RoleEnum = (typeof RoleEnum)[keyof typeof RoleEnum]


export const GenderEnum: {
  MALE: 'MALE',
  FEMALE: 'FEMALE',
  OTHER: 'OTHER'
};

export type GenderEnum = (typeof GenderEnum)[keyof typeof GenderEnum]


export const ApprovalEnum: {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED'
};

export type ApprovalEnum = (typeof ApprovalEnum)[keyof typeof ApprovalEnum]

}

export type RoleEnum = $Enums.RoleEnum

export const RoleEnum: typeof $Enums.RoleEnum

export type GenderEnum = $Enums.GenderEnum

export const GenderEnum: typeof $Enums.GenderEnum

export type ApprovalEnum = $Enums.ApprovalEnum

export const ApprovalEnum: typeof $Enums.ApprovalEnum

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Admins
 * const admins = await prisma.admin.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Admins
   * const admins = await prisma.admin.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.admin`: Exposes CRUD operations for the **Admin** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Admins
    * const admins = await prisma.admin.findMany()
    * ```
    */
  get admin(): Prisma.AdminDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.role`: Exposes CRUD operations for the **Role** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Roles
    * const roles = await prisma.role.findMany()
    * ```
    */
  get role(): Prisma.RoleDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.staff`: Exposes CRUD operations for the **Staff** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Staff
    * const staff = await prisma.staff.findMany()
    * ```
    */
  get staff(): Prisma.StaffDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.student1`: Exposes CRUD operations for the **Student1** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Student1s
    * const student1s = await prisma.student1.findMany()
    * ```
    */
  get student1(): Prisma.Student1Delegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.student2`: Exposes CRUD operations for the **Student2** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Student2s
    * const student2s = await prisma.student2.findMany()
    * ```
    */
  get student2(): Prisma.Student2Delegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.college`: Exposes CRUD operations for the **College** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Colleges
    * const colleges = await prisma.college.findMany()
    * ```
    */
  get college(): Prisma.CollegeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.room`: Exposes CRUD operations for the **Room** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Rooms
    * const rooms = await prisma.room.findMany()
    * ```
    */
  get room(): Prisma.RoomDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.feedback`: Exposes CRUD operations for the **Feedback** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Feedbacks
    * const feedbacks = await prisma.feedback.findMany()
    * ```
    */
  get feedback(): Prisma.FeedbackDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.gatePass`: Exposes CRUD operations for the **GatePass** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GatePasses
    * const gatePasses = await prisma.gatePass.findMany()
    * ```
    */
  get gatePass(): Prisma.GatePassDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.feePayment`: Exposes CRUD operations for the **FeePayment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FeePayments
    * const feePayments = await prisma.feePayment.findMany()
    * ```
    */
  get feePayment(): Prisma.FeePaymentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.messMenu`: Exposes CRUD operations for the **MessMenu** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MessMenus
    * const messMenus = await prisma.messMenu.findMany()
    * ```
    */
  get messMenu(): Prisma.MessMenuDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.hostelCommittee`: Exposes CRUD operations for the **HostelCommittee** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more HostelCommittees
    * const hostelCommittees = await prisma.hostelCommittee.findMany()
    * ```
    */
  get hostelCommittee(): Prisma.HostelCommitteeDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.5.0
   * Query Engine version: 173f8d54f8d52e692c7e27e72a88314ec7aeff60
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Admin: 'Admin',
    Role: 'Role',
    Staff: 'Staff',
    Student1: 'Student1',
    Student2: 'Student2',
    College: 'College',
    Room: 'Room',
    Feedback: 'Feedback',
    GatePass: 'GatePass',
    FeePayment: 'FeePayment',
    MessMenu: 'MessMenu',
    HostelCommittee: 'HostelCommittee'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "admin" | "role" | "staff" | "student1" | "student2" | "college" | "room" | "feedback" | "gatePass" | "feePayment" | "messMenu" | "hostelCommittee"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Admin: {
        payload: Prisma.$AdminPayload<ExtArgs>
        fields: Prisma.AdminFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AdminFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AdminFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          findFirst: {
            args: Prisma.AdminFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AdminFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          findMany: {
            args: Prisma.AdminFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>[]
          }
          create: {
            args: Prisma.AdminCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          createMany: {
            args: Prisma.AdminCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AdminCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>[]
          }
          delete: {
            args: Prisma.AdminDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          update: {
            args: Prisma.AdminUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          deleteMany: {
            args: Prisma.AdminDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AdminUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AdminUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>[]
          }
          upsert: {
            args: Prisma.AdminUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          aggregate: {
            args: Prisma.AdminAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAdmin>
          }
          groupBy: {
            args: Prisma.AdminGroupByArgs<ExtArgs>
            result: $Utils.Optional<AdminGroupByOutputType>[]
          }
          count: {
            args: Prisma.AdminCountArgs<ExtArgs>
            result: $Utils.Optional<AdminCountAggregateOutputType> | number
          }
        }
      }
      Role: {
        payload: Prisma.$RolePayload<ExtArgs>
        fields: Prisma.RoleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RoleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RoleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          findFirst: {
            args: Prisma.RoleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RoleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          findMany: {
            args: Prisma.RoleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>[]
          }
          create: {
            args: Prisma.RoleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          createMany: {
            args: Prisma.RoleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RoleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>[]
          }
          delete: {
            args: Prisma.RoleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          update: {
            args: Prisma.RoleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          deleteMany: {
            args: Prisma.RoleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RoleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RoleUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>[]
          }
          upsert: {
            args: Prisma.RoleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          aggregate: {
            args: Prisma.RoleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRole>
          }
          groupBy: {
            args: Prisma.RoleGroupByArgs<ExtArgs>
            result: $Utils.Optional<RoleGroupByOutputType>[]
          }
          count: {
            args: Prisma.RoleCountArgs<ExtArgs>
            result: $Utils.Optional<RoleCountAggregateOutputType> | number
          }
        }
      }
      Staff: {
        payload: Prisma.$StaffPayload<ExtArgs>
        fields: Prisma.StaffFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StaffFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StaffFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffPayload>
          }
          findFirst: {
            args: Prisma.StaffFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StaffFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffPayload>
          }
          findMany: {
            args: Prisma.StaffFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffPayload>[]
          }
          create: {
            args: Prisma.StaffCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffPayload>
          }
          createMany: {
            args: Prisma.StaffCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StaffCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffPayload>[]
          }
          delete: {
            args: Prisma.StaffDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffPayload>
          }
          update: {
            args: Prisma.StaffUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffPayload>
          }
          deleteMany: {
            args: Prisma.StaffDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StaffUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.StaffUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffPayload>[]
          }
          upsert: {
            args: Prisma.StaffUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffPayload>
          }
          aggregate: {
            args: Prisma.StaffAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStaff>
          }
          groupBy: {
            args: Prisma.StaffGroupByArgs<ExtArgs>
            result: $Utils.Optional<StaffGroupByOutputType>[]
          }
          count: {
            args: Prisma.StaffCountArgs<ExtArgs>
            result: $Utils.Optional<StaffCountAggregateOutputType> | number
          }
        }
      }
      Student1: {
        payload: Prisma.$Student1Payload<ExtArgs>
        fields: Prisma.Student1FieldRefs
        operations: {
          findUnique: {
            args: Prisma.Student1FindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Student1Payload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.Student1FindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Student1Payload>
          }
          findFirst: {
            args: Prisma.Student1FindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Student1Payload> | null
          }
          findFirstOrThrow: {
            args: Prisma.Student1FindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Student1Payload>
          }
          findMany: {
            args: Prisma.Student1FindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Student1Payload>[]
          }
          create: {
            args: Prisma.Student1CreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Student1Payload>
          }
          createMany: {
            args: Prisma.Student1CreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.Student1CreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Student1Payload>[]
          }
          delete: {
            args: Prisma.Student1DeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Student1Payload>
          }
          update: {
            args: Prisma.Student1UpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Student1Payload>
          }
          deleteMany: {
            args: Prisma.Student1DeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.Student1UpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.Student1UpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Student1Payload>[]
          }
          upsert: {
            args: Prisma.Student1UpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Student1Payload>
          }
          aggregate: {
            args: Prisma.Student1AggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStudent1>
          }
          groupBy: {
            args: Prisma.Student1GroupByArgs<ExtArgs>
            result: $Utils.Optional<Student1GroupByOutputType>[]
          }
          count: {
            args: Prisma.Student1CountArgs<ExtArgs>
            result: $Utils.Optional<Student1CountAggregateOutputType> | number
          }
        }
      }
      Student2: {
        payload: Prisma.$Student2Payload<ExtArgs>
        fields: Prisma.Student2FieldRefs
        operations: {
          findUnique: {
            args: Prisma.Student2FindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Student2Payload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.Student2FindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Student2Payload>
          }
          findFirst: {
            args: Prisma.Student2FindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Student2Payload> | null
          }
          findFirstOrThrow: {
            args: Prisma.Student2FindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Student2Payload>
          }
          findMany: {
            args: Prisma.Student2FindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Student2Payload>[]
          }
          create: {
            args: Prisma.Student2CreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Student2Payload>
          }
          createMany: {
            args: Prisma.Student2CreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.Student2CreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Student2Payload>[]
          }
          delete: {
            args: Prisma.Student2DeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Student2Payload>
          }
          update: {
            args: Prisma.Student2UpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Student2Payload>
          }
          deleteMany: {
            args: Prisma.Student2DeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.Student2UpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.Student2UpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Student2Payload>[]
          }
          upsert: {
            args: Prisma.Student2UpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Student2Payload>
          }
          aggregate: {
            args: Prisma.Student2AggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStudent2>
          }
          groupBy: {
            args: Prisma.Student2GroupByArgs<ExtArgs>
            result: $Utils.Optional<Student2GroupByOutputType>[]
          }
          count: {
            args: Prisma.Student2CountArgs<ExtArgs>
            result: $Utils.Optional<Student2CountAggregateOutputType> | number
          }
        }
      }
      College: {
        payload: Prisma.$CollegePayload<ExtArgs>
        fields: Prisma.CollegeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CollegeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollegePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CollegeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollegePayload>
          }
          findFirst: {
            args: Prisma.CollegeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollegePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CollegeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollegePayload>
          }
          findMany: {
            args: Prisma.CollegeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollegePayload>[]
          }
          create: {
            args: Prisma.CollegeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollegePayload>
          }
          createMany: {
            args: Prisma.CollegeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CollegeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollegePayload>[]
          }
          delete: {
            args: Prisma.CollegeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollegePayload>
          }
          update: {
            args: Prisma.CollegeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollegePayload>
          }
          deleteMany: {
            args: Prisma.CollegeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CollegeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CollegeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollegePayload>[]
          }
          upsert: {
            args: Prisma.CollegeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollegePayload>
          }
          aggregate: {
            args: Prisma.CollegeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCollege>
          }
          groupBy: {
            args: Prisma.CollegeGroupByArgs<ExtArgs>
            result: $Utils.Optional<CollegeGroupByOutputType>[]
          }
          count: {
            args: Prisma.CollegeCountArgs<ExtArgs>
            result: $Utils.Optional<CollegeCountAggregateOutputType> | number
          }
        }
      }
      Room: {
        payload: Prisma.$RoomPayload<ExtArgs>
        fields: Prisma.RoomFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RoomFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RoomFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomPayload>
          }
          findFirst: {
            args: Prisma.RoomFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RoomFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomPayload>
          }
          findMany: {
            args: Prisma.RoomFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomPayload>[]
          }
          create: {
            args: Prisma.RoomCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomPayload>
          }
          createMany: {
            args: Prisma.RoomCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RoomCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomPayload>[]
          }
          delete: {
            args: Prisma.RoomDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomPayload>
          }
          update: {
            args: Prisma.RoomUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomPayload>
          }
          deleteMany: {
            args: Prisma.RoomDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RoomUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RoomUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomPayload>[]
          }
          upsert: {
            args: Prisma.RoomUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomPayload>
          }
          aggregate: {
            args: Prisma.RoomAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRoom>
          }
          groupBy: {
            args: Prisma.RoomGroupByArgs<ExtArgs>
            result: $Utils.Optional<RoomGroupByOutputType>[]
          }
          count: {
            args: Prisma.RoomCountArgs<ExtArgs>
            result: $Utils.Optional<RoomCountAggregateOutputType> | number
          }
        }
      }
      Feedback: {
        payload: Prisma.$FeedbackPayload<ExtArgs>
        fields: Prisma.FeedbackFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FeedbackFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FeedbackFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          findFirst: {
            args: Prisma.FeedbackFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FeedbackFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          findMany: {
            args: Prisma.FeedbackFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>[]
          }
          create: {
            args: Prisma.FeedbackCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          createMany: {
            args: Prisma.FeedbackCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FeedbackCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>[]
          }
          delete: {
            args: Prisma.FeedbackDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          update: {
            args: Prisma.FeedbackUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          deleteMany: {
            args: Prisma.FeedbackDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FeedbackUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FeedbackUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>[]
          }
          upsert: {
            args: Prisma.FeedbackUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          aggregate: {
            args: Prisma.FeedbackAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFeedback>
          }
          groupBy: {
            args: Prisma.FeedbackGroupByArgs<ExtArgs>
            result: $Utils.Optional<FeedbackGroupByOutputType>[]
          }
          count: {
            args: Prisma.FeedbackCountArgs<ExtArgs>
            result: $Utils.Optional<FeedbackCountAggregateOutputType> | number
          }
        }
      }
      GatePass: {
        payload: Prisma.$GatePassPayload<ExtArgs>
        fields: Prisma.GatePassFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GatePassFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GatePassPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GatePassFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GatePassPayload>
          }
          findFirst: {
            args: Prisma.GatePassFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GatePassPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GatePassFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GatePassPayload>
          }
          findMany: {
            args: Prisma.GatePassFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GatePassPayload>[]
          }
          create: {
            args: Prisma.GatePassCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GatePassPayload>
          }
          createMany: {
            args: Prisma.GatePassCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GatePassCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GatePassPayload>[]
          }
          delete: {
            args: Prisma.GatePassDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GatePassPayload>
          }
          update: {
            args: Prisma.GatePassUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GatePassPayload>
          }
          deleteMany: {
            args: Prisma.GatePassDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GatePassUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.GatePassUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GatePassPayload>[]
          }
          upsert: {
            args: Prisma.GatePassUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GatePassPayload>
          }
          aggregate: {
            args: Prisma.GatePassAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGatePass>
          }
          groupBy: {
            args: Prisma.GatePassGroupByArgs<ExtArgs>
            result: $Utils.Optional<GatePassGroupByOutputType>[]
          }
          count: {
            args: Prisma.GatePassCountArgs<ExtArgs>
            result: $Utils.Optional<GatePassCountAggregateOutputType> | number
          }
        }
      }
      FeePayment: {
        payload: Prisma.$FeePaymentPayload<ExtArgs>
        fields: Prisma.FeePaymentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FeePaymentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeePaymentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FeePaymentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeePaymentPayload>
          }
          findFirst: {
            args: Prisma.FeePaymentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeePaymentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FeePaymentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeePaymentPayload>
          }
          findMany: {
            args: Prisma.FeePaymentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeePaymentPayload>[]
          }
          create: {
            args: Prisma.FeePaymentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeePaymentPayload>
          }
          createMany: {
            args: Prisma.FeePaymentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FeePaymentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeePaymentPayload>[]
          }
          delete: {
            args: Prisma.FeePaymentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeePaymentPayload>
          }
          update: {
            args: Prisma.FeePaymentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeePaymentPayload>
          }
          deleteMany: {
            args: Prisma.FeePaymentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FeePaymentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FeePaymentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeePaymentPayload>[]
          }
          upsert: {
            args: Prisma.FeePaymentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeePaymentPayload>
          }
          aggregate: {
            args: Prisma.FeePaymentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFeePayment>
          }
          groupBy: {
            args: Prisma.FeePaymentGroupByArgs<ExtArgs>
            result: $Utils.Optional<FeePaymentGroupByOutputType>[]
          }
          count: {
            args: Prisma.FeePaymentCountArgs<ExtArgs>
            result: $Utils.Optional<FeePaymentCountAggregateOutputType> | number
          }
        }
      }
      MessMenu: {
        payload: Prisma.$MessMenuPayload<ExtArgs>
        fields: Prisma.MessMenuFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MessMenuFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessMenuPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MessMenuFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessMenuPayload>
          }
          findFirst: {
            args: Prisma.MessMenuFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessMenuPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MessMenuFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessMenuPayload>
          }
          findMany: {
            args: Prisma.MessMenuFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessMenuPayload>[]
          }
          create: {
            args: Prisma.MessMenuCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessMenuPayload>
          }
          createMany: {
            args: Prisma.MessMenuCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MessMenuCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessMenuPayload>[]
          }
          delete: {
            args: Prisma.MessMenuDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessMenuPayload>
          }
          update: {
            args: Prisma.MessMenuUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessMenuPayload>
          }
          deleteMany: {
            args: Prisma.MessMenuDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MessMenuUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MessMenuUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessMenuPayload>[]
          }
          upsert: {
            args: Prisma.MessMenuUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessMenuPayload>
          }
          aggregate: {
            args: Prisma.MessMenuAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMessMenu>
          }
          groupBy: {
            args: Prisma.MessMenuGroupByArgs<ExtArgs>
            result: $Utils.Optional<MessMenuGroupByOutputType>[]
          }
          count: {
            args: Prisma.MessMenuCountArgs<ExtArgs>
            result: $Utils.Optional<MessMenuCountAggregateOutputType> | number
          }
        }
      }
      HostelCommittee: {
        payload: Prisma.$HostelCommitteePayload<ExtArgs>
        fields: Prisma.HostelCommitteeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.HostelCommitteeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HostelCommitteePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.HostelCommitteeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HostelCommitteePayload>
          }
          findFirst: {
            args: Prisma.HostelCommitteeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HostelCommitteePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.HostelCommitteeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HostelCommitteePayload>
          }
          findMany: {
            args: Prisma.HostelCommitteeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HostelCommitteePayload>[]
          }
          create: {
            args: Prisma.HostelCommitteeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HostelCommitteePayload>
          }
          createMany: {
            args: Prisma.HostelCommitteeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.HostelCommitteeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HostelCommitteePayload>[]
          }
          delete: {
            args: Prisma.HostelCommitteeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HostelCommitteePayload>
          }
          update: {
            args: Prisma.HostelCommitteeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HostelCommitteePayload>
          }
          deleteMany: {
            args: Prisma.HostelCommitteeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.HostelCommitteeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.HostelCommitteeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HostelCommitteePayload>[]
          }
          upsert: {
            args: Prisma.HostelCommitteeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HostelCommitteePayload>
          }
          aggregate: {
            args: Prisma.HostelCommitteeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateHostelCommittee>
          }
          groupBy: {
            args: Prisma.HostelCommitteeGroupByArgs<ExtArgs>
            result: $Utils.Optional<HostelCommitteeGroupByOutputType>[]
          }
          count: {
            args: Prisma.HostelCommitteeCountArgs<ExtArgs>
            result: $Utils.Optional<HostelCommitteeCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    admin?: AdminOmit
    role?: RoleOmit
    staff?: StaffOmit
    student1?: Student1Omit
    student2?: Student2Omit
    college?: CollegeOmit
    room?: RoomOmit
    feedback?: FeedbackOmit
    gatePass?: GatePassOmit
    feePayment?: FeePaymentOmit
    messMenu?: MessMenuOmit
    hostelCommittee?: HostelCommitteeOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type RoleCountOutputType
   */

  export type RoleCountOutputType = {
    staff: number
  }

  export type RoleCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    staff?: boolean | RoleCountOutputTypeCountStaffArgs
  }

  // Custom InputTypes
  /**
   * RoleCountOutputType without action
   */
  export type RoleCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoleCountOutputType
     */
    select?: RoleCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RoleCountOutputType without action
   */
  export type RoleCountOutputTypeCountStaffArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StaffWhereInput
  }


  /**
   * Count Type Student1CountOutputType
   */

  export type Student1CountOutputType = {
    feedbacks: number
    gatePasses: number
    feePayments: number
  }

  export type Student1CountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    feedbacks?: boolean | Student1CountOutputTypeCountFeedbacksArgs
    gatePasses?: boolean | Student1CountOutputTypeCountGatePassesArgs
    feePayments?: boolean | Student1CountOutputTypeCountFeePaymentsArgs
  }

  // Custom InputTypes
  /**
   * Student1CountOutputType without action
   */
  export type Student1CountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student1CountOutputType
     */
    select?: Student1CountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * Student1CountOutputType without action
   */
  export type Student1CountOutputTypeCountFeedbacksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeedbackWhereInput
  }

  /**
   * Student1CountOutputType without action
   */
  export type Student1CountOutputTypeCountGatePassesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GatePassWhereInput
  }

  /**
   * Student1CountOutputType without action
   */
  export type Student1CountOutputTypeCountFeePaymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeePaymentWhereInput
  }


  /**
   * Count Type CollegeCountOutputType
   */

  export type CollegeCountOutputType = {
    students: number
  }

  export type CollegeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    students?: boolean | CollegeCountOutputTypeCountStudentsArgs
  }

  // Custom InputTypes
  /**
   * CollegeCountOutputType without action
   */
  export type CollegeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollegeCountOutputType
     */
    select?: CollegeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CollegeCountOutputType without action
   */
  export type CollegeCountOutputTypeCountStudentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Student2WhereInput
  }


  /**
   * Models
   */

  /**
   * Model Admin
   */

  export type AggregateAdmin = {
    _count: AdminCountAggregateOutputType | null
    _avg: AdminAvgAggregateOutputType | null
    _sum: AdminSumAggregateOutputType | null
    _min: AdminMinAggregateOutputType | null
    _max: AdminMaxAggregateOutputType | null
  }

  export type AdminAvgAggregateOutputType = {
    id: number | null
    room_count: number | null
  }

  export type AdminSumAggregateOutputType = {
    id: number | null
    room_count: number | null
  }

  export type AdminMinAggregateOutputType = {
    id: number | null
    name: string | null
    password: string | null
    email: string | null
    room_count: number | null
  }

  export type AdminMaxAggregateOutputType = {
    id: number | null
    name: string | null
    password: string | null
    email: string | null
    room_count: number | null
  }

  export type AdminCountAggregateOutputType = {
    id: number
    name: number
    password: number
    email: number
    room_count: number
    _all: number
  }


  export type AdminAvgAggregateInputType = {
    id?: true
    room_count?: true
  }

  export type AdminSumAggregateInputType = {
    id?: true
    room_count?: true
  }

  export type AdminMinAggregateInputType = {
    id?: true
    name?: true
    password?: true
    email?: true
    room_count?: true
  }

  export type AdminMaxAggregateInputType = {
    id?: true
    name?: true
    password?: true
    email?: true
    room_count?: true
  }

  export type AdminCountAggregateInputType = {
    id?: true
    name?: true
    password?: true
    email?: true
    room_count?: true
    _all?: true
  }

  export type AdminAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Admin to aggregate.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Admins
    **/
    _count?: true | AdminCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AdminAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AdminSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AdminMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AdminMaxAggregateInputType
  }

  export type GetAdminAggregateType<T extends AdminAggregateArgs> = {
        [P in keyof T & keyof AggregateAdmin]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAdmin[P]>
      : GetScalarType<T[P], AggregateAdmin[P]>
  }




  export type AdminGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AdminWhereInput
    orderBy?: AdminOrderByWithAggregationInput | AdminOrderByWithAggregationInput[]
    by: AdminScalarFieldEnum[] | AdminScalarFieldEnum
    having?: AdminScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AdminCountAggregateInputType | true
    _avg?: AdminAvgAggregateInputType
    _sum?: AdminSumAggregateInputType
    _min?: AdminMinAggregateInputType
    _max?: AdminMaxAggregateInputType
  }

  export type AdminGroupByOutputType = {
    id: number
    name: string
    password: string
    email: string
    room_count: number
    _count: AdminCountAggregateOutputType | null
    _avg: AdminAvgAggregateOutputType | null
    _sum: AdminSumAggregateOutputType | null
    _min: AdminMinAggregateOutputType | null
    _max: AdminMaxAggregateOutputType | null
  }

  type GetAdminGroupByPayload<T extends AdminGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AdminGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AdminGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AdminGroupByOutputType[P]>
            : GetScalarType<T[P], AdminGroupByOutputType[P]>
        }
      >
    >


  export type AdminSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    password?: boolean
    email?: boolean
    room_count?: boolean
  }, ExtArgs["result"]["admin"]>

  export type AdminSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    password?: boolean
    email?: boolean
    room_count?: boolean
  }, ExtArgs["result"]["admin"]>

  export type AdminSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    password?: boolean
    email?: boolean
    room_count?: boolean
  }, ExtArgs["result"]["admin"]>

  export type AdminSelectScalar = {
    id?: boolean
    name?: boolean
    password?: boolean
    email?: boolean
    room_count?: boolean
  }

  export type AdminOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "password" | "email" | "room_count", ExtArgs["result"]["admin"]>

  export type $AdminPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Admin"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      password: string
      email: string
      room_count: number
    }, ExtArgs["result"]["admin"]>
    composites: {}
  }

  type AdminGetPayload<S extends boolean | null | undefined | AdminDefaultArgs> = $Result.GetResult<Prisma.$AdminPayload, S>

  type AdminCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AdminFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AdminCountAggregateInputType | true
    }

  export interface AdminDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Admin'], meta: { name: 'Admin' } }
    /**
     * Find zero or one Admin that matches the filter.
     * @param {AdminFindUniqueArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AdminFindUniqueArgs>(args: SelectSubset<T, AdminFindUniqueArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Admin that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AdminFindUniqueOrThrowArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AdminFindUniqueOrThrowArgs>(args: SelectSubset<T, AdminFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Admin that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindFirstArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AdminFindFirstArgs>(args?: SelectSubset<T, AdminFindFirstArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Admin that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindFirstOrThrowArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AdminFindFirstOrThrowArgs>(args?: SelectSubset<T, AdminFindFirstOrThrowArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Admins that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Admins
     * const admins = await prisma.admin.findMany()
     * 
     * // Get first 10 Admins
     * const admins = await prisma.admin.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const adminWithIdOnly = await prisma.admin.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AdminFindManyArgs>(args?: SelectSubset<T, AdminFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Admin.
     * @param {AdminCreateArgs} args - Arguments to create a Admin.
     * @example
     * // Create one Admin
     * const Admin = await prisma.admin.create({
     *   data: {
     *     // ... data to create a Admin
     *   }
     * })
     * 
     */
    create<T extends AdminCreateArgs>(args: SelectSubset<T, AdminCreateArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Admins.
     * @param {AdminCreateManyArgs} args - Arguments to create many Admins.
     * @example
     * // Create many Admins
     * const admin = await prisma.admin.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AdminCreateManyArgs>(args?: SelectSubset<T, AdminCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Admins and returns the data saved in the database.
     * @param {AdminCreateManyAndReturnArgs} args - Arguments to create many Admins.
     * @example
     * // Create many Admins
     * const admin = await prisma.admin.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Admins and only return the `id`
     * const adminWithIdOnly = await prisma.admin.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AdminCreateManyAndReturnArgs>(args?: SelectSubset<T, AdminCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Admin.
     * @param {AdminDeleteArgs} args - Arguments to delete one Admin.
     * @example
     * // Delete one Admin
     * const Admin = await prisma.admin.delete({
     *   where: {
     *     // ... filter to delete one Admin
     *   }
     * })
     * 
     */
    delete<T extends AdminDeleteArgs>(args: SelectSubset<T, AdminDeleteArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Admin.
     * @param {AdminUpdateArgs} args - Arguments to update one Admin.
     * @example
     * // Update one Admin
     * const admin = await prisma.admin.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AdminUpdateArgs>(args: SelectSubset<T, AdminUpdateArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Admins.
     * @param {AdminDeleteManyArgs} args - Arguments to filter Admins to delete.
     * @example
     * // Delete a few Admins
     * const { count } = await prisma.admin.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AdminDeleteManyArgs>(args?: SelectSubset<T, AdminDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Admins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Admins
     * const admin = await prisma.admin.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AdminUpdateManyArgs>(args: SelectSubset<T, AdminUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Admins and returns the data updated in the database.
     * @param {AdminUpdateManyAndReturnArgs} args - Arguments to update many Admins.
     * @example
     * // Update many Admins
     * const admin = await prisma.admin.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Admins and only return the `id`
     * const adminWithIdOnly = await prisma.admin.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AdminUpdateManyAndReturnArgs>(args: SelectSubset<T, AdminUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Admin.
     * @param {AdminUpsertArgs} args - Arguments to update or create a Admin.
     * @example
     * // Update or create a Admin
     * const admin = await prisma.admin.upsert({
     *   create: {
     *     // ... data to create a Admin
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Admin we want to update
     *   }
     * })
     */
    upsert<T extends AdminUpsertArgs>(args: SelectSubset<T, AdminUpsertArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Admins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminCountArgs} args - Arguments to filter Admins to count.
     * @example
     * // Count the number of Admins
     * const count = await prisma.admin.count({
     *   where: {
     *     // ... the filter for the Admins we want to count
     *   }
     * })
    **/
    count<T extends AdminCountArgs>(
      args?: Subset<T, AdminCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AdminCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Admin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AdminAggregateArgs>(args: Subset<T, AdminAggregateArgs>): Prisma.PrismaPromise<GetAdminAggregateType<T>>

    /**
     * Group by Admin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AdminGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AdminGroupByArgs['orderBy'] }
        : { orderBy?: AdminGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AdminGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAdminGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Admin model
   */
  readonly fields: AdminFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Admin.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AdminClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Admin model
   */ 
  interface AdminFieldRefs {
    readonly id: FieldRef<"Admin", 'Int'>
    readonly name: FieldRef<"Admin", 'String'>
    readonly password: FieldRef<"Admin", 'String'>
    readonly email: FieldRef<"Admin", 'String'>
    readonly room_count: FieldRef<"Admin", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Admin findUnique
   */
  export type AdminFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin findUniqueOrThrow
   */
  export type AdminFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin findFirst
   */
  export type AdminFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Admins.
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Admins.
     */
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }

  /**
   * Admin findFirstOrThrow
   */
  export type AdminFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Admins.
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Admins.
     */
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }

  /**
   * Admin findMany
   */
  export type AdminFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Filter, which Admins to fetch.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Admins.
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }

  /**
   * Admin create
   */
  export type AdminCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * The data needed to create a Admin.
     */
    data: XOR<AdminCreateInput, AdminUncheckedCreateInput>
  }

  /**
   * Admin createMany
   */
  export type AdminCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Admins.
     */
    data: AdminCreateManyInput | AdminCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Admin createManyAndReturn
   */
  export type AdminCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * The data used to create many Admins.
     */
    data: AdminCreateManyInput | AdminCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Admin update
   */
  export type AdminUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * The data needed to update a Admin.
     */
    data: XOR<AdminUpdateInput, AdminUncheckedUpdateInput>
    /**
     * Choose, which Admin to update.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin updateMany
   */
  export type AdminUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Admins.
     */
    data: XOR<AdminUpdateManyMutationInput, AdminUncheckedUpdateManyInput>
    /**
     * Filter which Admins to update
     */
    where?: AdminWhereInput
    /**
     * Limit how many Admins to update.
     */
    limit?: number
  }

  /**
   * Admin updateManyAndReturn
   */
  export type AdminUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * The data used to update Admins.
     */
    data: XOR<AdminUpdateManyMutationInput, AdminUncheckedUpdateManyInput>
    /**
     * Filter which Admins to update
     */
    where?: AdminWhereInput
    /**
     * Limit how many Admins to update.
     */
    limit?: number
  }

  /**
   * Admin upsert
   */
  export type AdminUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * The filter to search for the Admin to update in case it exists.
     */
    where: AdminWhereUniqueInput
    /**
     * In case the Admin found by the `where` argument doesn't exist, create a new Admin with this data.
     */
    create: XOR<AdminCreateInput, AdminUncheckedCreateInput>
    /**
     * In case the Admin was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AdminUpdateInput, AdminUncheckedUpdateInput>
  }

  /**
   * Admin delete
   */
  export type AdminDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Filter which Admin to delete.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin deleteMany
   */
  export type AdminDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Admins to delete
     */
    where?: AdminWhereInput
    /**
     * Limit how many Admins to delete.
     */
    limit?: number
  }

  /**
   * Admin without action
   */
  export type AdminDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
  }


  /**
   * Model Role
   */

  export type AggregateRole = {
    _count: RoleCountAggregateOutputType | null
    _avg: RoleAvgAggregateOutputType | null
    _sum: RoleSumAggregateOutputType | null
    _min: RoleMinAggregateOutputType | null
    _max: RoleMaxAggregateOutputType | null
  }

  export type RoleAvgAggregateOutputType = {
    role_id: number | null
  }

  export type RoleSumAggregateOutputType = {
    role_id: number | null
  }

  export type RoleMinAggregateOutputType = {
    role_id: number | null
    role: $Enums.RoleEnum | null
  }

  export type RoleMaxAggregateOutputType = {
    role_id: number | null
    role: $Enums.RoleEnum | null
  }

  export type RoleCountAggregateOutputType = {
    role_id: number
    role: number
    _all: number
  }


  export type RoleAvgAggregateInputType = {
    role_id?: true
  }

  export type RoleSumAggregateInputType = {
    role_id?: true
  }

  export type RoleMinAggregateInputType = {
    role_id?: true
    role?: true
  }

  export type RoleMaxAggregateInputType = {
    role_id?: true
    role?: true
  }

  export type RoleCountAggregateInputType = {
    role_id?: true
    role?: true
    _all?: true
  }

  export type RoleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Role to aggregate.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Roles
    **/
    _count?: true | RoleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RoleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RoleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RoleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RoleMaxAggregateInputType
  }

  export type GetRoleAggregateType<T extends RoleAggregateArgs> = {
        [P in keyof T & keyof AggregateRole]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRole[P]>
      : GetScalarType<T[P], AggregateRole[P]>
  }




  export type RoleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoleWhereInput
    orderBy?: RoleOrderByWithAggregationInput | RoleOrderByWithAggregationInput[]
    by: RoleScalarFieldEnum[] | RoleScalarFieldEnum
    having?: RoleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RoleCountAggregateInputType | true
    _avg?: RoleAvgAggregateInputType
    _sum?: RoleSumAggregateInputType
    _min?: RoleMinAggregateInputType
    _max?: RoleMaxAggregateInputType
  }

  export type RoleGroupByOutputType = {
    role_id: number
    role: $Enums.RoleEnum
    _count: RoleCountAggregateOutputType | null
    _avg: RoleAvgAggregateOutputType | null
    _sum: RoleSumAggregateOutputType | null
    _min: RoleMinAggregateOutputType | null
    _max: RoleMaxAggregateOutputType | null
  }

  type GetRoleGroupByPayload<T extends RoleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RoleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RoleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RoleGroupByOutputType[P]>
            : GetScalarType<T[P], RoleGroupByOutputType[P]>
        }
      >
    >


  export type RoleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    role_id?: boolean
    role?: boolean
    staff?: boolean | Role$staffArgs<ExtArgs>
    _count?: boolean | RoleCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["role"]>

  export type RoleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    role_id?: boolean
    role?: boolean
  }, ExtArgs["result"]["role"]>

  export type RoleSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    role_id?: boolean
    role?: boolean
  }, ExtArgs["result"]["role"]>

  export type RoleSelectScalar = {
    role_id?: boolean
    role?: boolean
  }

  export type RoleOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"role_id" | "role", ExtArgs["result"]["role"]>
  export type RoleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    staff?: boolean | Role$staffArgs<ExtArgs>
    _count?: boolean | RoleCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type RoleIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type RoleIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $RolePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Role"
    objects: {
      staff: Prisma.$StaffPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      role_id: number
      role: $Enums.RoleEnum
    }, ExtArgs["result"]["role"]>
    composites: {}
  }

  type RoleGetPayload<S extends boolean | null | undefined | RoleDefaultArgs> = $Result.GetResult<Prisma.$RolePayload, S>

  type RoleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RoleFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RoleCountAggregateInputType | true
    }

  export interface RoleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Role'], meta: { name: 'Role' } }
    /**
     * Find zero or one Role that matches the filter.
     * @param {RoleFindUniqueArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RoleFindUniqueArgs>(args: SelectSubset<T, RoleFindUniqueArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Role that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RoleFindUniqueOrThrowArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RoleFindUniqueOrThrowArgs>(args: SelectSubset<T, RoleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Role that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleFindFirstArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RoleFindFirstArgs>(args?: SelectSubset<T, RoleFindFirstArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Role that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleFindFirstOrThrowArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RoleFindFirstOrThrowArgs>(args?: SelectSubset<T, RoleFindFirstOrThrowArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Roles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Roles
     * const roles = await prisma.role.findMany()
     * 
     * // Get first 10 Roles
     * const roles = await prisma.role.findMany({ take: 10 })
     * 
     * // Only select the `role_id`
     * const roleWithRole_idOnly = await prisma.role.findMany({ select: { role_id: true } })
     * 
     */
    findMany<T extends RoleFindManyArgs>(args?: SelectSubset<T, RoleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Role.
     * @param {RoleCreateArgs} args - Arguments to create a Role.
     * @example
     * // Create one Role
     * const Role = await prisma.role.create({
     *   data: {
     *     // ... data to create a Role
     *   }
     * })
     * 
     */
    create<T extends RoleCreateArgs>(args: SelectSubset<T, RoleCreateArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Roles.
     * @param {RoleCreateManyArgs} args - Arguments to create many Roles.
     * @example
     * // Create many Roles
     * const role = await prisma.role.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RoleCreateManyArgs>(args?: SelectSubset<T, RoleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Roles and returns the data saved in the database.
     * @param {RoleCreateManyAndReturnArgs} args - Arguments to create many Roles.
     * @example
     * // Create many Roles
     * const role = await prisma.role.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Roles and only return the `role_id`
     * const roleWithRole_idOnly = await prisma.role.createManyAndReturn({
     *   select: { role_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RoleCreateManyAndReturnArgs>(args?: SelectSubset<T, RoleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Role.
     * @param {RoleDeleteArgs} args - Arguments to delete one Role.
     * @example
     * // Delete one Role
     * const Role = await prisma.role.delete({
     *   where: {
     *     // ... filter to delete one Role
     *   }
     * })
     * 
     */
    delete<T extends RoleDeleteArgs>(args: SelectSubset<T, RoleDeleteArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Role.
     * @param {RoleUpdateArgs} args - Arguments to update one Role.
     * @example
     * // Update one Role
     * const role = await prisma.role.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RoleUpdateArgs>(args: SelectSubset<T, RoleUpdateArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Roles.
     * @param {RoleDeleteManyArgs} args - Arguments to filter Roles to delete.
     * @example
     * // Delete a few Roles
     * const { count } = await prisma.role.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RoleDeleteManyArgs>(args?: SelectSubset<T, RoleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Roles
     * const role = await prisma.role.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RoleUpdateManyArgs>(args: SelectSubset<T, RoleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Roles and returns the data updated in the database.
     * @param {RoleUpdateManyAndReturnArgs} args - Arguments to update many Roles.
     * @example
     * // Update many Roles
     * const role = await prisma.role.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Roles and only return the `role_id`
     * const roleWithRole_idOnly = await prisma.role.updateManyAndReturn({
     *   select: { role_id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RoleUpdateManyAndReturnArgs>(args: SelectSubset<T, RoleUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Role.
     * @param {RoleUpsertArgs} args - Arguments to update or create a Role.
     * @example
     * // Update or create a Role
     * const role = await prisma.role.upsert({
     *   create: {
     *     // ... data to create a Role
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Role we want to update
     *   }
     * })
     */
    upsert<T extends RoleUpsertArgs>(args: SelectSubset<T, RoleUpsertArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleCountArgs} args - Arguments to filter Roles to count.
     * @example
     * // Count the number of Roles
     * const count = await prisma.role.count({
     *   where: {
     *     // ... the filter for the Roles we want to count
     *   }
     * })
    **/
    count<T extends RoleCountArgs>(
      args?: Subset<T, RoleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RoleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Role.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RoleAggregateArgs>(args: Subset<T, RoleAggregateArgs>): Prisma.PrismaPromise<GetRoleAggregateType<T>>

    /**
     * Group by Role.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RoleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RoleGroupByArgs['orderBy'] }
        : { orderBy?: RoleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RoleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRoleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Role model
   */
  readonly fields: RoleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Role.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RoleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    staff<T extends Role$staffArgs<ExtArgs> = {}>(args?: Subset<T, Role$staffArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Role model
   */ 
  interface RoleFieldRefs {
    readonly role_id: FieldRef<"Role", 'Int'>
    readonly role: FieldRef<"Role", 'RoleEnum'>
  }
    

  // Custom InputTypes
  /**
   * Role findUnique
   */
  export type RoleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role findUniqueOrThrow
   */
  export type RoleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role findFirst
   */
  export type RoleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Roles.
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Roles.
     */
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }

  /**
   * Role findFirstOrThrow
   */
  export type RoleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Roles.
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Roles.
     */
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }

  /**
   * Role findMany
   */
  export type RoleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Roles to fetch.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Roles.
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }

  /**
   * Role create
   */
  export type RoleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * The data needed to create a Role.
     */
    data: XOR<RoleCreateInput, RoleUncheckedCreateInput>
  }

  /**
   * Role createMany
   */
  export type RoleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Roles.
     */
    data: RoleCreateManyInput | RoleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Role createManyAndReturn
   */
  export type RoleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * The data used to create many Roles.
     */
    data: RoleCreateManyInput | RoleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Role update
   */
  export type RoleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * The data needed to update a Role.
     */
    data: XOR<RoleUpdateInput, RoleUncheckedUpdateInput>
    /**
     * Choose, which Role to update.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role updateMany
   */
  export type RoleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Roles.
     */
    data: XOR<RoleUpdateManyMutationInput, RoleUncheckedUpdateManyInput>
    /**
     * Filter which Roles to update
     */
    where?: RoleWhereInput
    /**
     * Limit how many Roles to update.
     */
    limit?: number
  }

  /**
   * Role updateManyAndReturn
   */
  export type RoleUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * The data used to update Roles.
     */
    data: XOR<RoleUpdateManyMutationInput, RoleUncheckedUpdateManyInput>
    /**
     * Filter which Roles to update
     */
    where?: RoleWhereInput
    /**
     * Limit how many Roles to update.
     */
    limit?: number
  }

  /**
   * Role upsert
   */
  export type RoleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * The filter to search for the Role to update in case it exists.
     */
    where: RoleWhereUniqueInput
    /**
     * In case the Role found by the `where` argument doesn't exist, create a new Role with this data.
     */
    create: XOR<RoleCreateInput, RoleUncheckedCreateInput>
    /**
     * In case the Role was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RoleUpdateInput, RoleUncheckedUpdateInput>
  }

  /**
   * Role delete
   */
  export type RoleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter which Role to delete.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role deleteMany
   */
  export type RoleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Roles to delete
     */
    where?: RoleWhereInput
    /**
     * Limit how many Roles to delete.
     */
    limit?: number
  }

  /**
   * Role.staff
   */
  export type Role$staffArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Staff
     */
    select?: StaffSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Staff
     */
    omit?: StaffOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffInclude<ExtArgs> | null
    where?: StaffWhereInput
    orderBy?: StaffOrderByWithRelationInput | StaffOrderByWithRelationInput[]
    cursor?: StaffWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StaffScalarFieldEnum | StaffScalarFieldEnum[]
  }

  /**
   * Role without action
   */
  export type RoleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
  }


  /**
   * Model Staff
   */

  export type AggregateStaff = {
    _count: StaffCountAggregateOutputType | null
    _avg: StaffAvgAggregateOutputType | null
    _sum: StaffSumAggregateOutputType | null
    _min: StaffMinAggregateOutputType | null
    _max: StaffMaxAggregateOutputType | null
  }

  export type StaffAvgAggregateOutputType = {
    id: number | null
    salary: Decimal | null
    age: number | null
    roll_id: number | null
  }

  export type StaffSumAggregateOutputType = {
    id: number | null
    salary: Decimal | null
    age: number | null
    roll_id: number | null
  }

  export type StaffMinAggregateOutputType = {
    id: number | null
    name: string | null
    contact_number: string | null
    date_of_join: Date | null
    salary: Decimal | null
    gender: $Enums.GenderEnum | null
    age: number | null
    roll_id: number | null
  }

  export type StaffMaxAggregateOutputType = {
    id: number | null
    name: string | null
    contact_number: string | null
    date_of_join: Date | null
    salary: Decimal | null
    gender: $Enums.GenderEnum | null
    age: number | null
    roll_id: number | null
  }

  export type StaffCountAggregateOutputType = {
    id: number
    name: number
    contact_number: number
    date_of_join: number
    salary: number
    gender: number
    age: number
    roll_id: number
    _all: number
  }


  export type StaffAvgAggregateInputType = {
    id?: true
    salary?: true
    age?: true
    roll_id?: true
  }

  export type StaffSumAggregateInputType = {
    id?: true
    salary?: true
    age?: true
    roll_id?: true
  }

  export type StaffMinAggregateInputType = {
    id?: true
    name?: true
    contact_number?: true
    date_of_join?: true
    salary?: true
    gender?: true
    age?: true
    roll_id?: true
  }

  export type StaffMaxAggregateInputType = {
    id?: true
    name?: true
    contact_number?: true
    date_of_join?: true
    salary?: true
    gender?: true
    age?: true
    roll_id?: true
  }

  export type StaffCountAggregateInputType = {
    id?: true
    name?: true
    contact_number?: true
    date_of_join?: true
    salary?: true
    gender?: true
    age?: true
    roll_id?: true
    _all?: true
  }

  export type StaffAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Staff to aggregate.
     */
    where?: StaffWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Staff to fetch.
     */
    orderBy?: StaffOrderByWithRelationInput | StaffOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StaffWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Staff from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Staff.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Staff
    **/
    _count?: true | StaffCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StaffAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StaffSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StaffMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StaffMaxAggregateInputType
  }

  export type GetStaffAggregateType<T extends StaffAggregateArgs> = {
        [P in keyof T & keyof AggregateStaff]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStaff[P]>
      : GetScalarType<T[P], AggregateStaff[P]>
  }




  export type StaffGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StaffWhereInput
    orderBy?: StaffOrderByWithAggregationInput | StaffOrderByWithAggregationInput[]
    by: StaffScalarFieldEnum[] | StaffScalarFieldEnum
    having?: StaffScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StaffCountAggregateInputType | true
    _avg?: StaffAvgAggregateInputType
    _sum?: StaffSumAggregateInputType
    _min?: StaffMinAggregateInputType
    _max?: StaffMaxAggregateInputType
  }

  export type StaffGroupByOutputType = {
    id: number
    name: string
    contact_number: string
    date_of_join: Date
    salary: Decimal
    gender: $Enums.GenderEnum
    age: number
    roll_id: number
    _count: StaffCountAggregateOutputType | null
    _avg: StaffAvgAggregateOutputType | null
    _sum: StaffSumAggregateOutputType | null
    _min: StaffMinAggregateOutputType | null
    _max: StaffMaxAggregateOutputType | null
  }

  type GetStaffGroupByPayload<T extends StaffGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StaffGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StaffGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StaffGroupByOutputType[P]>
            : GetScalarType<T[P], StaffGroupByOutputType[P]>
        }
      >
    >


  export type StaffSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    contact_number?: boolean
    date_of_join?: boolean
    salary?: boolean
    gender?: boolean
    age?: boolean
    roll_id?: boolean
    role?: boolean | RoleDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["staff"]>

  export type StaffSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    contact_number?: boolean
    date_of_join?: boolean
    salary?: boolean
    gender?: boolean
    age?: boolean
    roll_id?: boolean
    role?: boolean | RoleDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["staff"]>

  export type StaffSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    contact_number?: boolean
    date_of_join?: boolean
    salary?: boolean
    gender?: boolean
    age?: boolean
    roll_id?: boolean
    role?: boolean | RoleDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["staff"]>

  export type StaffSelectScalar = {
    id?: boolean
    name?: boolean
    contact_number?: boolean
    date_of_join?: boolean
    salary?: boolean
    gender?: boolean
    age?: boolean
    roll_id?: boolean
  }

  export type StaffOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "contact_number" | "date_of_join" | "salary" | "gender" | "age" | "roll_id", ExtArgs["result"]["staff"]>
  export type StaffInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    role?: boolean | RoleDefaultArgs<ExtArgs>
  }
  export type StaffIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    role?: boolean | RoleDefaultArgs<ExtArgs>
  }
  export type StaffIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    role?: boolean | RoleDefaultArgs<ExtArgs>
  }

  export type $StaffPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Staff"
    objects: {
      role: Prisma.$RolePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      contact_number: string
      date_of_join: Date
      salary: Prisma.Decimal
      gender: $Enums.GenderEnum
      age: number
      roll_id: number
    }, ExtArgs["result"]["staff"]>
    composites: {}
  }

  type StaffGetPayload<S extends boolean | null | undefined | StaffDefaultArgs> = $Result.GetResult<Prisma.$StaffPayload, S>

  type StaffCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StaffFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StaffCountAggregateInputType | true
    }

  export interface StaffDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Staff'], meta: { name: 'Staff' } }
    /**
     * Find zero or one Staff that matches the filter.
     * @param {StaffFindUniqueArgs} args - Arguments to find a Staff
     * @example
     * // Get one Staff
     * const staff = await prisma.staff.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StaffFindUniqueArgs>(args: SelectSubset<T, StaffFindUniqueArgs<ExtArgs>>): Prisma__StaffClient<$Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Staff that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StaffFindUniqueOrThrowArgs} args - Arguments to find a Staff
     * @example
     * // Get one Staff
     * const staff = await prisma.staff.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StaffFindUniqueOrThrowArgs>(args: SelectSubset<T, StaffFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StaffClient<$Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Staff that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffFindFirstArgs} args - Arguments to find a Staff
     * @example
     * // Get one Staff
     * const staff = await prisma.staff.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StaffFindFirstArgs>(args?: SelectSubset<T, StaffFindFirstArgs<ExtArgs>>): Prisma__StaffClient<$Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Staff that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffFindFirstOrThrowArgs} args - Arguments to find a Staff
     * @example
     * // Get one Staff
     * const staff = await prisma.staff.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StaffFindFirstOrThrowArgs>(args?: SelectSubset<T, StaffFindFirstOrThrowArgs<ExtArgs>>): Prisma__StaffClient<$Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Staff that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Staff
     * const staff = await prisma.staff.findMany()
     * 
     * // Get first 10 Staff
     * const staff = await prisma.staff.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const staffWithIdOnly = await prisma.staff.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StaffFindManyArgs>(args?: SelectSubset<T, StaffFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Staff.
     * @param {StaffCreateArgs} args - Arguments to create a Staff.
     * @example
     * // Create one Staff
     * const Staff = await prisma.staff.create({
     *   data: {
     *     // ... data to create a Staff
     *   }
     * })
     * 
     */
    create<T extends StaffCreateArgs>(args: SelectSubset<T, StaffCreateArgs<ExtArgs>>): Prisma__StaffClient<$Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Staff.
     * @param {StaffCreateManyArgs} args - Arguments to create many Staff.
     * @example
     * // Create many Staff
     * const staff = await prisma.staff.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StaffCreateManyArgs>(args?: SelectSubset<T, StaffCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Staff and returns the data saved in the database.
     * @param {StaffCreateManyAndReturnArgs} args - Arguments to create many Staff.
     * @example
     * // Create many Staff
     * const staff = await prisma.staff.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Staff and only return the `id`
     * const staffWithIdOnly = await prisma.staff.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StaffCreateManyAndReturnArgs>(args?: SelectSubset<T, StaffCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Staff.
     * @param {StaffDeleteArgs} args - Arguments to delete one Staff.
     * @example
     * // Delete one Staff
     * const Staff = await prisma.staff.delete({
     *   where: {
     *     // ... filter to delete one Staff
     *   }
     * })
     * 
     */
    delete<T extends StaffDeleteArgs>(args: SelectSubset<T, StaffDeleteArgs<ExtArgs>>): Prisma__StaffClient<$Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Staff.
     * @param {StaffUpdateArgs} args - Arguments to update one Staff.
     * @example
     * // Update one Staff
     * const staff = await prisma.staff.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StaffUpdateArgs>(args: SelectSubset<T, StaffUpdateArgs<ExtArgs>>): Prisma__StaffClient<$Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Staff.
     * @param {StaffDeleteManyArgs} args - Arguments to filter Staff to delete.
     * @example
     * // Delete a few Staff
     * const { count } = await prisma.staff.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StaffDeleteManyArgs>(args?: SelectSubset<T, StaffDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Staff.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Staff
     * const staff = await prisma.staff.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StaffUpdateManyArgs>(args: SelectSubset<T, StaffUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Staff and returns the data updated in the database.
     * @param {StaffUpdateManyAndReturnArgs} args - Arguments to update many Staff.
     * @example
     * // Update many Staff
     * const staff = await prisma.staff.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Staff and only return the `id`
     * const staffWithIdOnly = await prisma.staff.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends StaffUpdateManyAndReturnArgs>(args: SelectSubset<T, StaffUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Staff.
     * @param {StaffUpsertArgs} args - Arguments to update or create a Staff.
     * @example
     * // Update or create a Staff
     * const staff = await prisma.staff.upsert({
     *   create: {
     *     // ... data to create a Staff
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Staff we want to update
     *   }
     * })
     */
    upsert<T extends StaffUpsertArgs>(args: SelectSubset<T, StaffUpsertArgs<ExtArgs>>): Prisma__StaffClient<$Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Staff.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffCountArgs} args - Arguments to filter Staff to count.
     * @example
     * // Count the number of Staff
     * const count = await prisma.staff.count({
     *   where: {
     *     // ... the filter for the Staff we want to count
     *   }
     * })
    **/
    count<T extends StaffCountArgs>(
      args?: Subset<T, StaffCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StaffCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Staff.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StaffAggregateArgs>(args: Subset<T, StaffAggregateArgs>): Prisma.PrismaPromise<GetStaffAggregateType<T>>

    /**
     * Group by Staff.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StaffGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StaffGroupByArgs['orderBy'] }
        : { orderBy?: StaffGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StaffGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStaffGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Staff model
   */
  readonly fields: StaffFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Staff.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StaffClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    role<T extends RoleDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RoleDefaultArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Staff model
   */ 
  interface StaffFieldRefs {
    readonly id: FieldRef<"Staff", 'Int'>
    readonly name: FieldRef<"Staff", 'String'>
    readonly contact_number: FieldRef<"Staff", 'String'>
    readonly date_of_join: FieldRef<"Staff", 'DateTime'>
    readonly salary: FieldRef<"Staff", 'Decimal'>
    readonly gender: FieldRef<"Staff", 'GenderEnum'>
    readonly age: FieldRef<"Staff", 'Int'>
    readonly roll_id: FieldRef<"Staff", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Staff findUnique
   */
  export type StaffFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Staff
     */
    select?: StaffSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Staff
     */
    omit?: StaffOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffInclude<ExtArgs> | null
    /**
     * Filter, which Staff to fetch.
     */
    where: StaffWhereUniqueInput
  }

  /**
   * Staff findUniqueOrThrow
   */
  export type StaffFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Staff
     */
    select?: StaffSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Staff
     */
    omit?: StaffOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffInclude<ExtArgs> | null
    /**
     * Filter, which Staff to fetch.
     */
    where: StaffWhereUniqueInput
  }

  /**
   * Staff findFirst
   */
  export type StaffFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Staff
     */
    select?: StaffSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Staff
     */
    omit?: StaffOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffInclude<ExtArgs> | null
    /**
     * Filter, which Staff to fetch.
     */
    where?: StaffWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Staff to fetch.
     */
    orderBy?: StaffOrderByWithRelationInput | StaffOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Staff.
     */
    cursor?: StaffWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Staff from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Staff.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Staff.
     */
    distinct?: StaffScalarFieldEnum | StaffScalarFieldEnum[]
  }

  /**
   * Staff findFirstOrThrow
   */
  export type StaffFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Staff
     */
    select?: StaffSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Staff
     */
    omit?: StaffOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffInclude<ExtArgs> | null
    /**
     * Filter, which Staff to fetch.
     */
    where?: StaffWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Staff to fetch.
     */
    orderBy?: StaffOrderByWithRelationInput | StaffOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Staff.
     */
    cursor?: StaffWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Staff from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Staff.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Staff.
     */
    distinct?: StaffScalarFieldEnum | StaffScalarFieldEnum[]
  }

  /**
   * Staff findMany
   */
  export type StaffFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Staff
     */
    select?: StaffSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Staff
     */
    omit?: StaffOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffInclude<ExtArgs> | null
    /**
     * Filter, which Staff to fetch.
     */
    where?: StaffWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Staff to fetch.
     */
    orderBy?: StaffOrderByWithRelationInput | StaffOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Staff.
     */
    cursor?: StaffWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Staff from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Staff.
     */
    skip?: number
    distinct?: StaffScalarFieldEnum | StaffScalarFieldEnum[]
  }

  /**
   * Staff create
   */
  export type StaffCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Staff
     */
    select?: StaffSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Staff
     */
    omit?: StaffOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffInclude<ExtArgs> | null
    /**
     * The data needed to create a Staff.
     */
    data: XOR<StaffCreateInput, StaffUncheckedCreateInput>
  }

  /**
   * Staff createMany
   */
  export type StaffCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Staff.
     */
    data: StaffCreateManyInput | StaffCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Staff createManyAndReturn
   */
  export type StaffCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Staff
     */
    select?: StaffSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Staff
     */
    omit?: StaffOmit<ExtArgs> | null
    /**
     * The data used to create many Staff.
     */
    data: StaffCreateManyInput | StaffCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Staff update
   */
  export type StaffUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Staff
     */
    select?: StaffSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Staff
     */
    omit?: StaffOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffInclude<ExtArgs> | null
    /**
     * The data needed to update a Staff.
     */
    data: XOR<StaffUpdateInput, StaffUncheckedUpdateInput>
    /**
     * Choose, which Staff to update.
     */
    where: StaffWhereUniqueInput
  }

  /**
   * Staff updateMany
   */
  export type StaffUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Staff.
     */
    data: XOR<StaffUpdateManyMutationInput, StaffUncheckedUpdateManyInput>
    /**
     * Filter which Staff to update
     */
    where?: StaffWhereInput
    /**
     * Limit how many Staff to update.
     */
    limit?: number
  }

  /**
   * Staff updateManyAndReturn
   */
  export type StaffUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Staff
     */
    select?: StaffSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Staff
     */
    omit?: StaffOmit<ExtArgs> | null
    /**
     * The data used to update Staff.
     */
    data: XOR<StaffUpdateManyMutationInput, StaffUncheckedUpdateManyInput>
    /**
     * Filter which Staff to update
     */
    where?: StaffWhereInput
    /**
     * Limit how many Staff to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Staff upsert
   */
  export type StaffUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Staff
     */
    select?: StaffSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Staff
     */
    omit?: StaffOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffInclude<ExtArgs> | null
    /**
     * The filter to search for the Staff to update in case it exists.
     */
    where: StaffWhereUniqueInput
    /**
     * In case the Staff found by the `where` argument doesn't exist, create a new Staff with this data.
     */
    create: XOR<StaffCreateInput, StaffUncheckedCreateInput>
    /**
     * In case the Staff was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StaffUpdateInput, StaffUncheckedUpdateInput>
  }

  /**
   * Staff delete
   */
  export type StaffDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Staff
     */
    select?: StaffSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Staff
     */
    omit?: StaffOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffInclude<ExtArgs> | null
    /**
     * Filter which Staff to delete.
     */
    where: StaffWhereUniqueInput
  }

  /**
   * Staff deleteMany
   */
  export type StaffDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Staff to delete
     */
    where?: StaffWhereInput
    /**
     * Limit how many Staff to delete.
     */
    limit?: number
  }

  /**
   * Staff without action
   */
  export type StaffDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Staff
     */
    select?: StaffSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Staff
     */
    omit?: StaffOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffInclude<ExtArgs> | null
  }


  /**
   * Model Student1
   */

  export type AggregateStudent1 = {
    _count: Student1CountAggregateOutputType | null
    _avg: Student1AvgAggregateOutputType | null
    _sum: Student1SumAggregateOutputType | null
    _min: Student1MinAggregateOutputType | null
    _max: Student1MaxAggregateOutputType | null
  }

  export type Student1AvgAggregateOutputType = {
    id: number | null
    age: number | null
  }

  export type Student1SumAggregateOutputType = {
    id: number | null
    age: number | null
  }

  export type Student1MinAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    password: string | null
    gender: $Enums.GenderEnum | null
    age: number | null
    role: string | null
  }

  export type Student1MaxAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    password: string | null
    gender: $Enums.GenderEnum | null
    age: number | null
    role: string | null
  }

  export type Student1CountAggregateOutputType = {
    id: number
    name: number
    email: number
    password: number
    gender: number
    age: number
    role: number
    _all: number
  }


  export type Student1AvgAggregateInputType = {
    id?: true
    age?: true
  }

  export type Student1SumAggregateInputType = {
    id?: true
    age?: true
  }

  export type Student1MinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    gender?: true
    age?: true
    role?: true
  }

  export type Student1MaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    gender?: true
    age?: true
    role?: true
  }

  export type Student1CountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    gender?: true
    age?: true
    role?: true
    _all?: true
  }

  export type Student1AggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Student1 to aggregate.
     */
    where?: Student1WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Student1s to fetch.
     */
    orderBy?: Student1OrderByWithRelationInput | Student1OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: Student1WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Student1s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Student1s.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Student1s
    **/
    _count?: true | Student1CountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Student1AvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Student1SumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Student1MinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Student1MaxAggregateInputType
  }

  export type GetStudent1AggregateType<T extends Student1AggregateArgs> = {
        [P in keyof T & keyof AggregateStudent1]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStudent1[P]>
      : GetScalarType<T[P], AggregateStudent1[P]>
  }




  export type Student1GroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Student1WhereInput
    orderBy?: Student1OrderByWithAggregationInput | Student1OrderByWithAggregationInput[]
    by: Student1ScalarFieldEnum[] | Student1ScalarFieldEnum
    having?: Student1ScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Student1CountAggregateInputType | true
    _avg?: Student1AvgAggregateInputType
    _sum?: Student1SumAggregateInputType
    _min?: Student1MinAggregateInputType
    _max?: Student1MaxAggregateInputType
  }

  export type Student1GroupByOutputType = {
    id: number
    name: string | null
    email: string
    password: string
    gender: $Enums.GenderEnum
    age: number
    role: string
    _count: Student1CountAggregateOutputType | null
    _avg: Student1AvgAggregateOutputType | null
    _sum: Student1SumAggregateOutputType | null
    _min: Student1MinAggregateOutputType | null
    _max: Student1MaxAggregateOutputType | null
  }

  type GetStudent1GroupByPayload<T extends Student1GroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Student1GroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Student1GroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Student1GroupByOutputType[P]>
            : GetScalarType<T[P], Student1GroupByOutputType[P]>
        }
      >
    >


  export type Student1Select<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    gender?: boolean
    age?: boolean
    role?: boolean
    student2?: boolean | Student1$student2Args<ExtArgs>
    feedbacks?: boolean | Student1$feedbacksArgs<ExtArgs>
    gatePasses?: boolean | Student1$gatePassesArgs<ExtArgs>
    feePayments?: boolean | Student1$feePaymentsArgs<ExtArgs>
    room?: boolean | Student1$roomArgs<ExtArgs>
    _count?: boolean | Student1CountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["student1"]>

  export type Student1SelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    gender?: boolean
    age?: boolean
    role?: boolean
  }, ExtArgs["result"]["student1"]>

  export type Student1SelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    gender?: boolean
    age?: boolean
    role?: boolean
  }, ExtArgs["result"]["student1"]>

  export type Student1SelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    gender?: boolean
    age?: boolean
    role?: boolean
  }

  export type Student1Omit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "email" | "password" | "gender" | "age" | "role", ExtArgs["result"]["student1"]>
  export type Student1Include<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student2?: boolean | Student1$student2Args<ExtArgs>
    feedbacks?: boolean | Student1$feedbacksArgs<ExtArgs>
    gatePasses?: boolean | Student1$gatePassesArgs<ExtArgs>
    feePayments?: boolean | Student1$feePaymentsArgs<ExtArgs>
    room?: boolean | Student1$roomArgs<ExtArgs>
    _count?: boolean | Student1CountOutputTypeDefaultArgs<ExtArgs>
  }
  export type Student1IncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type Student1IncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $Student1Payload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Student1"
    objects: {
      student2: Prisma.$Student2Payload<ExtArgs> | null
      feedbacks: Prisma.$FeedbackPayload<ExtArgs>[]
      gatePasses: Prisma.$GatePassPayload<ExtArgs>[]
      feePayments: Prisma.$FeePaymentPayload<ExtArgs>[]
      room: Prisma.$RoomPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string | null
      email: string
      password: string
      gender: $Enums.GenderEnum
      age: number
      role: string
    }, ExtArgs["result"]["student1"]>
    composites: {}
  }

  type Student1GetPayload<S extends boolean | null | undefined | Student1DefaultArgs> = $Result.GetResult<Prisma.$Student1Payload, S>

  type Student1CountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<Student1FindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Student1CountAggregateInputType | true
    }

  export interface Student1Delegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Student1'], meta: { name: 'Student1' } }
    /**
     * Find zero or one Student1 that matches the filter.
     * @param {Student1FindUniqueArgs} args - Arguments to find a Student1
     * @example
     * // Get one Student1
     * const student1 = await prisma.student1.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends Student1FindUniqueArgs>(args: SelectSubset<T, Student1FindUniqueArgs<ExtArgs>>): Prisma__Student1Client<$Result.GetResult<Prisma.$Student1Payload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Student1 that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {Student1FindUniqueOrThrowArgs} args - Arguments to find a Student1
     * @example
     * // Get one Student1
     * const student1 = await prisma.student1.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends Student1FindUniqueOrThrowArgs>(args: SelectSubset<T, Student1FindUniqueOrThrowArgs<ExtArgs>>): Prisma__Student1Client<$Result.GetResult<Prisma.$Student1Payload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Student1 that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Student1FindFirstArgs} args - Arguments to find a Student1
     * @example
     * // Get one Student1
     * const student1 = await prisma.student1.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends Student1FindFirstArgs>(args?: SelectSubset<T, Student1FindFirstArgs<ExtArgs>>): Prisma__Student1Client<$Result.GetResult<Prisma.$Student1Payload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Student1 that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Student1FindFirstOrThrowArgs} args - Arguments to find a Student1
     * @example
     * // Get one Student1
     * const student1 = await prisma.student1.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends Student1FindFirstOrThrowArgs>(args?: SelectSubset<T, Student1FindFirstOrThrowArgs<ExtArgs>>): Prisma__Student1Client<$Result.GetResult<Prisma.$Student1Payload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Student1s that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Student1FindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Student1s
     * const student1s = await prisma.student1.findMany()
     * 
     * // Get first 10 Student1s
     * const student1s = await prisma.student1.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const student1WithIdOnly = await prisma.student1.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends Student1FindManyArgs>(args?: SelectSubset<T, Student1FindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Student1Payload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Student1.
     * @param {Student1CreateArgs} args - Arguments to create a Student1.
     * @example
     * // Create one Student1
     * const Student1 = await prisma.student1.create({
     *   data: {
     *     // ... data to create a Student1
     *   }
     * })
     * 
     */
    create<T extends Student1CreateArgs>(args: SelectSubset<T, Student1CreateArgs<ExtArgs>>): Prisma__Student1Client<$Result.GetResult<Prisma.$Student1Payload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Student1s.
     * @param {Student1CreateManyArgs} args - Arguments to create many Student1s.
     * @example
     * // Create many Student1s
     * const student1 = await prisma.student1.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends Student1CreateManyArgs>(args?: SelectSubset<T, Student1CreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Student1s and returns the data saved in the database.
     * @param {Student1CreateManyAndReturnArgs} args - Arguments to create many Student1s.
     * @example
     * // Create many Student1s
     * const student1 = await prisma.student1.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Student1s and only return the `id`
     * const student1WithIdOnly = await prisma.student1.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends Student1CreateManyAndReturnArgs>(args?: SelectSubset<T, Student1CreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Student1Payload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Student1.
     * @param {Student1DeleteArgs} args - Arguments to delete one Student1.
     * @example
     * // Delete one Student1
     * const Student1 = await prisma.student1.delete({
     *   where: {
     *     // ... filter to delete one Student1
     *   }
     * })
     * 
     */
    delete<T extends Student1DeleteArgs>(args: SelectSubset<T, Student1DeleteArgs<ExtArgs>>): Prisma__Student1Client<$Result.GetResult<Prisma.$Student1Payload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Student1.
     * @param {Student1UpdateArgs} args - Arguments to update one Student1.
     * @example
     * // Update one Student1
     * const student1 = await prisma.student1.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends Student1UpdateArgs>(args: SelectSubset<T, Student1UpdateArgs<ExtArgs>>): Prisma__Student1Client<$Result.GetResult<Prisma.$Student1Payload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Student1s.
     * @param {Student1DeleteManyArgs} args - Arguments to filter Student1s to delete.
     * @example
     * // Delete a few Student1s
     * const { count } = await prisma.student1.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends Student1DeleteManyArgs>(args?: SelectSubset<T, Student1DeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Student1s.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Student1UpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Student1s
     * const student1 = await prisma.student1.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends Student1UpdateManyArgs>(args: SelectSubset<T, Student1UpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Student1s and returns the data updated in the database.
     * @param {Student1UpdateManyAndReturnArgs} args - Arguments to update many Student1s.
     * @example
     * // Update many Student1s
     * const student1 = await prisma.student1.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Student1s and only return the `id`
     * const student1WithIdOnly = await prisma.student1.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends Student1UpdateManyAndReturnArgs>(args: SelectSubset<T, Student1UpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Student1Payload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Student1.
     * @param {Student1UpsertArgs} args - Arguments to update or create a Student1.
     * @example
     * // Update or create a Student1
     * const student1 = await prisma.student1.upsert({
     *   create: {
     *     // ... data to create a Student1
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Student1 we want to update
     *   }
     * })
     */
    upsert<T extends Student1UpsertArgs>(args: SelectSubset<T, Student1UpsertArgs<ExtArgs>>): Prisma__Student1Client<$Result.GetResult<Prisma.$Student1Payload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Student1s.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Student1CountArgs} args - Arguments to filter Student1s to count.
     * @example
     * // Count the number of Student1s
     * const count = await prisma.student1.count({
     *   where: {
     *     // ... the filter for the Student1s we want to count
     *   }
     * })
    **/
    count<T extends Student1CountArgs>(
      args?: Subset<T, Student1CountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Student1CountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Student1.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Student1AggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Student1AggregateArgs>(args: Subset<T, Student1AggregateArgs>): Prisma.PrismaPromise<GetStudent1AggregateType<T>>

    /**
     * Group by Student1.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Student1GroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Student1GroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Student1GroupByArgs['orderBy'] }
        : { orderBy?: Student1GroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Student1GroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStudent1GroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Student1 model
   */
  readonly fields: Student1FieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Student1.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__Student1Client<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    student2<T extends Student1$student2Args<ExtArgs> = {}>(args?: Subset<T, Student1$student2Args<ExtArgs>>): Prisma__Student2Client<$Result.GetResult<Prisma.$Student2Payload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    feedbacks<T extends Student1$feedbacksArgs<ExtArgs> = {}>(args?: Subset<T, Student1$feedbacksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    gatePasses<T extends Student1$gatePassesArgs<ExtArgs> = {}>(args?: Subset<T, Student1$gatePassesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GatePassPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    feePayments<T extends Student1$feePaymentsArgs<ExtArgs> = {}>(args?: Subset<T, Student1$feePaymentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeePaymentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    room<T extends Student1$roomArgs<ExtArgs> = {}>(args?: Subset<T, Student1$roomArgs<ExtArgs>>): Prisma__RoomClient<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Student1 model
   */ 
  interface Student1FieldRefs {
    readonly id: FieldRef<"Student1", 'Int'>
    readonly name: FieldRef<"Student1", 'String'>
    readonly email: FieldRef<"Student1", 'String'>
    readonly password: FieldRef<"Student1", 'String'>
    readonly gender: FieldRef<"Student1", 'GenderEnum'>
    readonly age: FieldRef<"Student1", 'Int'>
    readonly role: FieldRef<"Student1", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Student1 findUnique
   */
  export type Student1FindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student1
     */
    select?: Student1Select<ExtArgs> | null
    /**
     * Omit specific fields from the Student1
     */
    omit?: Student1Omit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Student1Include<ExtArgs> | null
    /**
     * Filter, which Student1 to fetch.
     */
    where: Student1WhereUniqueInput
  }

  /**
   * Student1 findUniqueOrThrow
   */
  export type Student1FindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student1
     */
    select?: Student1Select<ExtArgs> | null
    /**
     * Omit specific fields from the Student1
     */
    omit?: Student1Omit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Student1Include<ExtArgs> | null
    /**
     * Filter, which Student1 to fetch.
     */
    where: Student1WhereUniqueInput
  }

  /**
   * Student1 findFirst
   */
  export type Student1FindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student1
     */
    select?: Student1Select<ExtArgs> | null
    /**
     * Omit specific fields from the Student1
     */
    omit?: Student1Omit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Student1Include<ExtArgs> | null
    /**
     * Filter, which Student1 to fetch.
     */
    where?: Student1WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Student1s to fetch.
     */
    orderBy?: Student1OrderByWithRelationInput | Student1OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Student1s.
     */
    cursor?: Student1WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Student1s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Student1s.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Student1s.
     */
    distinct?: Student1ScalarFieldEnum | Student1ScalarFieldEnum[]
  }

  /**
   * Student1 findFirstOrThrow
   */
  export type Student1FindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student1
     */
    select?: Student1Select<ExtArgs> | null
    /**
     * Omit specific fields from the Student1
     */
    omit?: Student1Omit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Student1Include<ExtArgs> | null
    /**
     * Filter, which Student1 to fetch.
     */
    where?: Student1WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Student1s to fetch.
     */
    orderBy?: Student1OrderByWithRelationInput | Student1OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Student1s.
     */
    cursor?: Student1WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Student1s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Student1s.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Student1s.
     */
    distinct?: Student1ScalarFieldEnum | Student1ScalarFieldEnum[]
  }

  /**
   * Student1 findMany
   */
  export type Student1FindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student1
     */
    select?: Student1Select<ExtArgs> | null
    /**
     * Omit specific fields from the Student1
     */
    omit?: Student1Omit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Student1Include<ExtArgs> | null
    /**
     * Filter, which Student1s to fetch.
     */
    where?: Student1WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Student1s to fetch.
     */
    orderBy?: Student1OrderByWithRelationInput | Student1OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Student1s.
     */
    cursor?: Student1WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Student1s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Student1s.
     */
    skip?: number
    distinct?: Student1ScalarFieldEnum | Student1ScalarFieldEnum[]
  }

  /**
   * Student1 create
   */
  export type Student1CreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student1
     */
    select?: Student1Select<ExtArgs> | null
    /**
     * Omit specific fields from the Student1
     */
    omit?: Student1Omit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Student1Include<ExtArgs> | null
    /**
     * The data needed to create a Student1.
     */
    data: XOR<Student1CreateInput, Student1UncheckedCreateInput>
  }

  /**
   * Student1 createMany
   */
  export type Student1CreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Student1s.
     */
    data: Student1CreateManyInput | Student1CreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Student1 createManyAndReturn
   */
  export type Student1CreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student1
     */
    select?: Student1SelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Student1
     */
    omit?: Student1Omit<ExtArgs> | null
    /**
     * The data used to create many Student1s.
     */
    data: Student1CreateManyInput | Student1CreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Student1 update
   */
  export type Student1UpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student1
     */
    select?: Student1Select<ExtArgs> | null
    /**
     * Omit specific fields from the Student1
     */
    omit?: Student1Omit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Student1Include<ExtArgs> | null
    /**
     * The data needed to update a Student1.
     */
    data: XOR<Student1UpdateInput, Student1UncheckedUpdateInput>
    /**
     * Choose, which Student1 to update.
     */
    where: Student1WhereUniqueInput
  }

  /**
   * Student1 updateMany
   */
  export type Student1UpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Student1s.
     */
    data: XOR<Student1UpdateManyMutationInput, Student1UncheckedUpdateManyInput>
    /**
     * Filter which Student1s to update
     */
    where?: Student1WhereInput
    /**
     * Limit how many Student1s to update.
     */
    limit?: number
  }

  /**
   * Student1 updateManyAndReturn
   */
  export type Student1UpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student1
     */
    select?: Student1SelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Student1
     */
    omit?: Student1Omit<ExtArgs> | null
    /**
     * The data used to update Student1s.
     */
    data: XOR<Student1UpdateManyMutationInput, Student1UncheckedUpdateManyInput>
    /**
     * Filter which Student1s to update
     */
    where?: Student1WhereInput
    /**
     * Limit how many Student1s to update.
     */
    limit?: number
  }

  /**
   * Student1 upsert
   */
  export type Student1UpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student1
     */
    select?: Student1Select<ExtArgs> | null
    /**
     * Omit specific fields from the Student1
     */
    omit?: Student1Omit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Student1Include<ExtArgs> | null
    /**
     * The filter to search for the Student1 to update in case it exists.
     */
    where: Student1WhereUniqueInput
    /**
     * In case the Student1 found by the `where` argument doesn't exist, create a new Student1 with this data.
     */
    create: XOR<Student1CreateInput, Student1UncheckedCreateInput>
    /**
     * In case the Student1 was found with the provided `where` argument, update it with this data.
     */
    update: XOR<Student1UpdateInput, Student1UncheckedUpdateInput>
  }

  /**
   * Student1 delete
   */
  export type Student1DeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student1
     */
    select?: Student1Select<ExtArgs> | null
    /**
     * Omit specific fields from the Student1
     */
    omit?: Student1Omit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Student1Include<ExtArgs> | null
    /**
     * Filter which Student1 to delete.
     */
    where: Student1WhereUniqueInput
  }

  /**
   * Student1 deleteMany
   */
  export type Student1DeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Student1s to delete
     */
    where?: Student1WhereInput
    /**
     * Limit how many Student1s to delete.
     */
    limit?: number
  }

  /**
   * Student1.student2
   */
  export type Student1$student2Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student2
     */
    select?: Student2Select<ExtArgs> | null
    /**
     * Omit specific fields from the Student2
     */
    omit?: Student2Omit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Student2Include<ExtArgs> | null
    where?: Student2WhereInput
  }

  /**
   * Student1.feedbacks
   */
  export type Student1$feedbacksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    where?: FeedbackWhereInput
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    cursor?: FeedbackWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FeedbackScalarFieldEnum | FeedbackScalarFieldEnum[]
  }

  /**
   * Student1.gatePasses
   */
  export type Student1$gatePassesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GatePass
     */
    select?: GatePassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GatePass
     */
    omit?: GatePassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GatePassInclude<ExtArgs> | null
    where?: GatePassWhereInput
    orderBy?: GatePassOrderByWithRelationInput | GatePassOrderByWithRelationInput[]
    cursor?: GatePassWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GatePassScalarFieldEnum | GatePassScalarFieldEnum[]
  }

  /**
   * Student1.feePayments
   */
  export type Student1$feePaymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeePayment
     */
    select?: FeePaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeePayment
     */
    omit?: FeePaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeePaymentInclude<ExtArgs> | null
    where?: FeePaymentWhereInput
    orderBy?: FeePaymentOrderByWithRelationInput | FeePaymentOrderByWithRelationInput[]
    cursor?: FeePaymentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FeePaymentScalarFieldEnum | FeePaymentScalarFieldEnum[]
  }

  /**
   * Student1.room
   */
  export type Student1$roomArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Room
     */
    omit?: RoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomInclude<ExtArgs> | null
    where?: RoomWhereInput
  }

  /**
   * Student1 without action
   */
  export type Student1DefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student1
     */
    select?: Student1Select<ExtArgs> | null
    /**
     * Omit specific fields from the Student1
     */
    omit?: Student1Omit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Student1Include<ExtArgs> | null
  }


  /**
   * Model Student2
   */

  export type AggregateStudent2 = {
    _count: Student2CountAggregateOutputType | null
    _avg: Student2AvgAggregateOutputType | null
    _sum: Student2SumAggregateOutputType | null
    _min: Student2MinAggregateOutputType | null
    _max: Student2MaxAggregateOutputType | null
  }

  export type Student2AvgAggregateOutputType = {
    student1_id: number | null
    roll_number: number | null
  }

  export type Student2SumAggregateOutputType = {
    student1_id: number | null
    roll_number: number | null
  }

  export type Student2MinAggregateOutputType = {
    student1_id: number | null
    mobile_number: string | null
    address: string | null
    emergency_number: string | null
    parent_contact: string | null
    roll_number: number | null
  }

  export type Student2MaxAggregateOutputType = {
    student1_id: number | null
    mobile_number: string | null
    address: string | null
    emergency_number: string | null
    parent_contact: string | null
    roll_number: number | null
  }

  export type Student2CountAggregateOutputType = {
    student1_id: number
    mobile_number: number
    address: number
    emergency_number: number
    parent_contact: number
    roll_number: number
    _all: number
  }


  export type Student2AvgAggregateInputType = {
    student1_id?: true
    roll_number?: true
  }

  export type Student2SumAggregateInputType = {
    student1_id?: true
    roll_number?: true
  }

  export type Student2MinAggregateInputType = {
    student1_id?: true
    mobile_number?: true
    address?: true
    emergency_number?: true
    parent_contact?: true
    roll_number?: true
  }

  export type Student2MaxAggregateInputType = {
    student1_id?: true
    mobile_number?: true
    address?: true
    emergency_number?: true
    parent_contact?: true
    roll_number?: true
  }

  export type Student2CountAggregateInputType = {
    student1_id?: true
    mobile_number?: true
    address?: true
    emergency_number?: true
    parent_contact?: true
    roll_number?: true
    _all?: true
  }

  export type Student2AggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Student2 to aggregate.
     */
    where?: Student2WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Student2s to fetch.
     */
    orderBy?: Student2OrderByWithRelationInput | Student2OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: Student2WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Student2s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Student2s.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Student2s
    **/
    _count?: true | Student2CountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Student2AvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Student2SumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Student2MinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Student2MaxAggregateInputType
  }

  export type GetStudent2AggregateType<T extends Student2AggregateArgs> = {
        [P in keyof T & keyof AggregateStudent2]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStudent2[P]>
      : GetScalarType<T[P], AggregateStudent2[P]>
  }




  export type Student2GroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Student2WhereInput
    orderBy?: Student2OrderByWithAggregationInput | Student2OrderByWithAggregationInput[]
    by: Student2ScalarFieldEnum[] | Student2ScalarFieldEnum
    having?: Student2ScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Student2CountAggregateInputType | true
    _avg?: Student2AvgAggregateInputType
    _sum?: Student2SumAggregateInputType
    _min?: Student2MinAggregateInputType
    _max?: Student2MaxAggregateInputType
  }

  export type Student2GroupByOutputType = {
    student1_id: number
    mobile_number: string
    address: string
    emergency_number: string
    parent_contact: string
    roll_number: number
    _count: Student2CountAggregateOutputType | null
    _avg: Student2AvgAggregateOutputType | null
    _sum: Student2SumAggregateOutputType | null
    _min: Student2MinAggregateOutputType | null
    _max: Student2MaxAggregateOutputType | null
  }

  type GetStudent2GroupByPayload<T extends Student2GroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Student2GroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Student2GroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Student2GroupByOutputType[P]>
            : GetScalarType<T[P], Student2GroupByOutputType[P]>
        }
      >
    >


  export type Student2Select<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    student1_id?: boolean
    mobile_number?: boolean
    address?: boolean
    emergency_number?: boolean
    parent_contact?: boolean
    roll_number?: boolean
    student1?: boolean | Student1DefaultArgs<ExtArgs>
    college?: boolean | CollegeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["student2"]>

  export type Student2SelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    student1_id?: boolean
    mobile_number?: boolean
    address?: boolean
    emergency_number?: boolean
    parent_contact?: boolean
    roll_number?: boolean
    student1?: boolean | Student1DefaultArgs<ExtArgs>
    college?: boolean | CollegeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["student2"]>

  export type Student2SelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    student1_id?: boolean
    mobile_number?: boolean
    address?: boolean
    emergency_number?: boolean
    parent_contact?: boolean
    roll_number?: boolean
    student1?: boolean | Student1DefaultArgs<ExtArgs>
    college?: boolean | CollegeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["student2"]>

  export type Student2SelectScalar = {
    student1_id?: boolean
    mobile_number?: boolean
    address?: boolean
    emergency_number?: boolean
    parent_contact?: boolean
    roll_number?: boolean
  }

  export type Student2Omit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"student1_id" | "mobile_number" | "address" | "emergency_number" | "parent_contact" | "roll_number", ExtArgs["result"]["student2"]>
  export type Student2Include<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student1?: boolean | Student1DefaultArgs<ExtArgs>
    college?: boolean | CollegeDefaultArgs<ExtArgs>
  }
  export type Student2IncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student1?: boolean | Student1DefaultArgs<ExtArgs>
    college?: boolean | CollegeDefaultArgs<ExtArgs>
  }
  export type Student2IncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student1?: boolean | Student1DefaultArgs<ExtArgs>
    college?: boolean | CollegeDefaultArgs<ExtArgs>
  }

  export type $Student2Payload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Student2"
    objects: {
      student1: Prisma.$Student1Payload<ExtArgs>
      college: Prisma.$CollegePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      student1_id: number
      mobile_number: string
      address: string
      emergency_number: string
      parent_contact: string
      roll_number: number
    }, ExtArgs["result"]["student2"]>
    composites: {}
  }

  type Student2GetPayload<S extends boolean | null | undefined | Student2DefaultArgs> = $Result.GetResult<Prisma.$Student2Payload, S>

  type Student2CountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<Student2FindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Student2CountAggregateInputType | true
    }

  export interface Student2Delegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Student2'], meta: { name: 'Student2' } }
    /**
     * Find zero or one Student2 that matches the filter.
     * @param {Student2FindUniqueArgs} args - Arguments to find a Student2
     * @example
     * // Get one Student2
     * const student2 = await prisma.student2.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends Student2FindUniqueArgs>(args: SelectSubset<T, Student2FindUniqueArgs<ExtArgs>>): Prisma__Student2Client<$Result.GetResult<Prisma.$Student2Payload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Student2 that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {Student2FindUniqueOrThrowArgs} args - Arguments to find a Student2
     * @example
     * // Get one Student2
     * const student2 = await prisma.student2.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends Student2FindUniqueOrThrowArgs>(args: SelectSubset<T, Student2FindUniqueOrThrowArgs<ExtArgs>>): Prisma__Student2Client<$Result.GetResult<Prisma.$Student2Payload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Student2 that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Student2FindFirstArgs} args - Arguments to find a Student2
     * @example
     * // Get one Student2
     * const student2 = await prisma.student2.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends Student2FindFirstArgs>(args?: SelectSubset<T, Student2FindFirstArgs<ExtArgs>>): Prisma__Student2Client<$Result.GetResult<Prisma.$Student2Payload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Student2 that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Student2FindFirstOrThrowArgs} args - Arguments to find a Student2
     * @example
     * // Get one Student2
     * const student2 = await prisma.student2.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends Student2FindFirstOrThrowArgs>(args?: SelectSubset<T, Student2FindFirstOrThrowArgs<ExtArgs>>): Prisma__Student2Client<$Result.GetResult<Prisma.$Student2Payload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Student2s that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Student2FindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Student2s
     * const student2s = await prisma.student2.findMany()
     * 
     * // Get first 10 Student2s
     * const student2s = await prisma.student2.findMany({ take: 10 })
     * 
     * // Only select the `student1_id`
     * const student2WithStudent1_idOnly = await prisma.student2.findMany({ select: { student1_id: true } })
     * 
     */
    findMany<T extends Student2FindManyArgs>(args?: SelectSubset<T, Student2FindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Student2Payload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Student2.
     * @param {Student2CreateArgs} args - Arguments to create a Student2.
     * @example
     * // Create one Student2
     * const Student2 = await prisma.student2.create({
     *   data: {
     *     // ... data to create a Student2
     *   }
     * })
     * 
     */
    create<T extends Student2CreateArgs>(args: SelectSubset<T, Student2CreateArgs<ExtArgs>>): Prisma__Student2Client<$Result.GetResult<Prisma.$Student2Payload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Student2s.
     * @param {Student2CreateManyArgs} args - Arguments to create many Student2s.
     * @example
     * // Create many Student2s
     * const student2 = await prisma.student2.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends Student2CreateManyArgs>(args?: SelectSubset<T, Student2CreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Student2s and returns the data saved in the database.
     * @param {Student2CreateManyAndReturnArgs} args - Arguments to create many Student2s.
     * @example
     * // Create many Student2s
     * const student2 = await prisma.student2.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Student2s and only return the `student1_id`
     * const student2WithStudent1_idOnly = await prisma.student2.createManyAndReturn({
     *   select: { student1_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends Student2CreateManyAndReturnArgs>(args?: SelectSubset<T, Student2CreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Student2Payload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Student2.
     * @param {Student2DeleteArgs} args - Arguments to delete one Student2.
     * @example
     * // Delete one Student2
     * const Student2 = await prisma.student2.delete({
     *   where: {
     *     // ... filter to delete one Student2
     *   }
     * })
     * 
     */
    delete<T extends Student2DeleteArgs>(args: SelectSubset<T, Student2DeleteArgs<ExtArgs>>): Prisma__Student2Client<$Result.GetResult<Prisma.$Student2Payload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Student2.
     * @param {Student2UpdateArgs} args - Arguments to update one Student2.
     * @example
     * // Update one Student2
     * const student2 = await prisma.student2.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends Student2UpdateArgs>(args: SelectSubset<T, Student2UpdateArgs<ExtArgs>>): Prisma__Student2Client<$Result.GetResult<Prisma.$Student2Payload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Student2s.
     * @param {Student2DeleteManyArgs} args - Arguments to filter Student2s to delete.
     * @example
     * // Delete a few Student2s
     * const { count } = await prisma.student2.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends Student2DeleteManyArgs>(args?: SelectSubset<T, Student2DeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Student2s.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Student2UpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Student2s
     * const student2 = await prisma.student2.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends Student2UpdateManyArgs>(args: SelectSubset<T, Student2UpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Student2s and returns the data updated in the database.
     * @param {Student2UpdateManyAndReturnArgs} args - Arguments to update many Student2s.
     * @example
     * // Update many Student2s
     * const student2 = await prisma.student2.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Student2s and only return the `student1_id`
     * const student2WithStudent1_idOnly = await prisma.student2.updateManyAndReturn({
     *   select: { student1_id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends Student2UpdateManyAndReturnArgs>(args: SelectSubset<T, Student2UpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Student2Payload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Student2.
     * @param {Student2UpsertArgs} args - Arguments to update or create a Student2.
     * @example
     * // Update or create a Student2
     * const student2 = await prisma.student2.upsert({
     *   create: {
     *     // ... data to create a Student2
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Student2 we want to update
     *   }
     * })
     */
    upsert<T extends Student2UpsertArgs>(args: SelectSubset<T, Student2UpsertArgs<ExtArgs>>): Prisma__Student2Client<$Result.GetResult<Prisma.$Student2Payload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Student2s.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Student2CountArgs} args - Arguments to filter Student2s to count.
     * @example
     * // Count the number of Student2s
     * const count = await prisma.student2.count({
     *   where: {
     *     // ... the filter for the Student2s we want to count
     *   }
     * })
    **/
    count<T extends Student2CountArgs>(
      args?: Subset<T, Student2CountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Student2CountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Student2.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Student2AggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Student2AggregateArgs>(args: Subset<T, Student2AggregateArgs>): Prisma.PrismaPromise<GetStudent2AggregateType<T>>

    /**
     * Group by Student2.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Student2GroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Student2GroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Student2GroupByArgs['orderBy'] }
        : { orderBy?: Student2GroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Student2GroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStudent2GroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Student2 model
   */
  readonly fields: Student2FieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Student2.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__Student2Client<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    student1<T extends Student1DefaultArgs<ExtArgs> = {}>(args?: Subset<T, Student1DefaultArgs<ExtArgs>>): Prisma__Student1Client<$Result.GetResult<Prisma.$Student1Payload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    college<T extends CollegeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CollegeDefaultArgs<ExtArgs>>): Prisma__CollegeClient<$Result.GetResult<Prisma.$CollegePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Student2 model
   */ 
  interface Student2FieldRefs {
    readonly student1_id: FieldRef<"Student2", 'Int'>
    readonly mobile_number: FieldRef<"Student2", 'String'>
    readonly address: FieldRef<"Student2", 'String'>
    readonly emergency_number: FieldRef<"Student2", 'String'>
    readonly parent_contact: FieldRef<"Student2", 'String'>
    readonly roll_number: FieldRef<"Student2", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Student2 findUnique
   */
  export type Student2FindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student2
     */
    select?: Student2Select<ExtArgs> | null
    /**
     * Omit specific fields from the Student2
     */
    omit?: Student2Omit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Student2Include<ExtArgs> | null
    /**
     * Filter, which Student2 to fetch.
     */
    where: Student2WhereUniqueInput
  }

  /**
   * Student2 findUniqueOrThrow
   */
  export type Student2FindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student2
     */
    select?: Student2Select<ExtArgs> | null
    /**
     * Omit specific fields from the Student2
     */
    omit?: Student2Omit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Student2Include<ExtArgs> | null
    /**
     * Filter, which Student2 to fetch.
     */
    where: Student2WhereUniqueInput
  }

  /**
   * Student2 findFirst
   */
  export type Student2FindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student2
     */
    select?: Student2Select<ExtArgs> | null
    /**
     * Omit specific fields from the Student2
     */
    omit?: Student2Omit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Student2Include<ExtArgs> | null
    /**
     * Filter, which Student2 to fetch.
     */
    where?: Student2WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Student2s to fetch.
     */
    orderBy?: Student2OrderByWithRelationInput | Student2OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Student2s.
     */
    cursor?: Student2WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Student2s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Student2s.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Student2s.
     */
    distinct?: Student2ScalarFieldEnum | Student2ScalarFieldEnum[]
  }

  /**
   * Student2 findFirstOrThrow
   */
  export type Student2FindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student2
     */
    select?: Student2Select<ExtArgs> | null
    /**
     * Omit specific fields from the Student2
     */
    omit?: Student2Omit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Student2Include<ExtArgs> | null
    /**
     * Filter, which Student2 to fetch.
     */
    where?: Student2WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Student2s to fetch.
     */
    orderBy?: Student2OrderByWithRelationInput | Student2OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Student2s.
     */
    cursor?: Student2WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Student2s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Student2s.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Student2s.
     */
    distinct?: Student2ScalarFieldEnum | Student2ScalarFieldEnum[]
  }

  /**
   * Student2 findMany
   */
  export type Student2FindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student2
     */
    select?: Student2Select<ExtArgs> | null
    /**
     * Omit specific fields from the Student2
     */
    omit?: Student2Omit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Student2Include<ExtArgs> | null
    /**
     * Filter, which Student2s to fetch.
     */
    where?: Student2WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Student2s to fetch.
     */
    orderBy?: Student2OrderByWithRelationInput | Student2OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Student2s.
     */
    cursor?: Student2WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Student2s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Student2s.
     */
    skip?: number
    distinct?: Student2ScalarFieldEnum | Student2ScalarFieldEnum[]
  }

  /**
   * Student2 create
   */
  export type Student2CreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student2
     */
    select?: Student2Select<ExtArgs> | null
    /**
     * Omit specific fields from the Student2
     */
    omit?: Student2Omit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Student2Include<ExtArgs> | null
    /**
     * The data needed to create a Student2.
     */
    data: XOR<Student2CreateInput, Student2UncheckedCreateInput>
  }

  /**
   * Student2 createMany
   */
  export type Student2CreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Student2s.
     */
    data: Student2CreateManyInput | Student2CreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Student2 createManyAndReturn
   */
  export type Student2CreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student2
     */
    select?: Student2SelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Student2
     */
    omit?: Student2Omit<ExtArgs> | null
    /**
     * The data used to create many Student2s.
     */
    data: Student2CreateManyInput | Student2CreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Student2IncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Student2 update
   */
  export type Student2UpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student2
     */
    select?: Student2Select<ExtArgs> | null
    /**
     * Omit specific fields from the Student2
     */
    omit?: Student2Omit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Student2Include<ExtArgs> | null
    /**
     * The data needed to update a Student2.
     */
    data: XOR<Student2UpdateInput, Student2UncheckedUpdateInput>
    /**
     * Choose, which Student2 to update.
     */
    where: Student2WhereUniqueInput
  }

  /**
   * Student2 updateMany
   */
  export type Student2UpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Student2s.
     */
    data: XOR<Student2UpdateManyMutationInput, Student2UncheckedUpdateManyInput>
    /**
     * Filter which Student2s to update
     */
    where?: Student2WhereInput
    /**
     * Limit how many Student2s to update.
     */
    limit?: number
  }

  /**
   * Student2 updateManyAndReturn
   */
  export type Student2UpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student2
     */
    select?: Student2SelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Student2
     */
    omit?: Student2Omit<ExtArgs> | null
    /**
     * The data used to update Student2s.
     */
    data: XOR<Student2UpdateManyMutationInput, Student2UncheckedUpdateManyInput>
    /**
     * Filter which Student2s to update
     */
    where?: Student2WhereInput
    /**
     * Limit how many Student2s to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Student2IncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Student2 upsert
   */
  export type Student2UpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student2
     */
    select?: Student2Select<ExtArgs> | null
    /**
     * Omit specific fields from the Student2
     */
    omit?: Student2Omit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Student2Include<ExtArgs> | null
    /**
     * The filter to search for the Student2 to update in case it exists.
     */
    where: Student2WhereUniqueInput
    /**
     * In case the Student2 found by the `where` argument doesn't exist, create a new Student2 with this data.
     */
    create: XOR<Student2CreateInput, Student2UncheckedCreateInput>
    /**
     * In case the Student2 was found with the provided `where` argument, update it with this data.
     */
    update: XOR<Student2UpdateInput, Student2UncheckedUpdateInput>
  }

  /**
   * Student2 delete
   */
  export type Student2DeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student2
     */
    select?: Student2Select<ExtArgs> | null
    /**
     * Omit specific fields from the Student2
     */
    omit?: Student2Omit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Student2Include<ExtArgs> | null
    /**
     * Filter which Student2 to delete.
     */
    where: Student2WhereUniqueInput
  }

  /**
   * Student2 deleteMany
   */
  export type Student2DeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Student2s to delete
     */
    where?: Student2WhereInput
    /**
     * Limit how many Student2s to delete.
     */
    limit?: number
  }

  /**
   * Student2 without action
   */
  export type Student2DefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student2
     */
    select?: Student2Select<ExtArgs> | null
    /**
     * Omit specific fields from the Student2
     */
    omit?: Student2Omit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Student2Include<ExtArgs> | null
  }


  /**
   * Model College
   */

  export type AggregateCollege = {
    _count: CollegeCountAggregateOutputType | null
    _avg: CollegeAvgAggregateOutputType | null
    _sum: CollegeSumAggregateOutputType | null
    _min: CollegeMinAggregateOutputType | null
    _max: CollegeMaxAggregateOutputType | null
  }

  export type CollegeAvgAggregateOutputType = {
    roll_number: number | null
  }

  export type CollegeSumAggregateOutputType = {
    roll_number: number | null
  }

  export type CollegeMinAggregateOutputType = {
    roll_number: number | null
    college_name: string | null
  }

  export type CollegeMaxAggregateOutputType = {
    roll_number: number | null
    college_name: string | null
  }

  export type CollegeCountAggregateOutputType = {
    roll_number: number
    college_name: number
    _all: number
  }


  export type CollegeAvgAggregateInputType = {
    roll_number?: true
  }

  export type CollegeSumAggregateInputType = {
    roll_number?: true
  }

  export type CollegeMinAggregateInputType = {
    roll_number?: true
    college_name?: true
  }

  export type CollegeMaxAggregateInputType = {
    roll_number?: true
    college_name?: true
  }

  export type CollegeCountAggregateInputType = {
    roll_number?: true
    college_name?: true
    _all?: true
  }

  export type CollegeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which College to aggregate.
     */
    where?: CollegeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Colleges to fetch.
     */
    orderBy?: CollegeOrderByWithRelationInput | CollegeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CollegeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Colleges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Colleges.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Colleges
    **/
    _count?: true | CollegeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CollegeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CollegeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CollegeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CollegeMaxAggregateInputType
  }

  export type GetCollegeAggregateType<T extends CollegeAggregateArgs> = {
        [P in keyof T & keyof AggregateCollege]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCollege[P]>
      : GetScalarType<T[P], AggregateCollege[P]>
  }




  export type CollegeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CollegeWhereInput
    orderBy?: CollegeOrderByWithAggregationInput | CollegeOrderByWithAggregationInput[]
    by: CollegeScalarFieldEnum[] | CollegeScalarFieldEnum
    having?: CollegeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CollegeCountAggregateInputType | true
    _avg?: CollegeAvgAggregateInputType
    _sum?: CollegeSumAggregateInputType
    _min?: CollegeMinAggregateInputType
    _max?: CollegeMaxAggregateInputType
  }

  export type CollegeGroupByOutputType = {
    roll_number: number
    college_name: string
    _count: CollegeCountAggregateOutputType | null
    _avg: CollegeAvgAggregateOutputType | null
    _sum: CollegeSumAggregateOutputType | null
    _min: CollegeMinAggregateOutputType | null
    _max: CollegeMaxAggregateOutputType | null
  }

  type GetCollegeGroupByPayload<T extends CollegeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CollegeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CollegeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CollegeGroupByOutputType[P]>
            : GetScalarType<T[P], CollegeGroupByOutputType[P]>
        }
      >
    >


  export type CollegeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    roll_number?: boolean
    college_name?: boolean
    students?: boolean | College$studentsArgs<ExtArgs>
    _count?: boolean | CollegeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["college"]>

  export type CollegeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    roll_number?: boolean
    college_name?: boolean
  }, ExtArgs["result"]["college"]>

  export type CollegeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    roll_number?: boolean
    college_name?: boolean
  }, ExtArgs["result"]["college"]>

  export type CollegeSelectScalar = {
    roll_number?: boolean
    college_name?: boolean
  }

  export type CollegeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"roll_number" | "college_name", ExtArgs["result"]["college"]>
  export type CollegeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    students?: boolean | College$studentsArgs<ExtArgs>
    _count?: boolean | CollegeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CollegeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type CollegeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $CollegePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "College"
    objects: {
      students: Prisma.$Student2Payload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      roll_number: number
      college_name: string
    }, ExtArgs["result"]["college"]>
    composites: {}
  }

  type CollegeGetPayload<S extends boolean | null | undefined | CollegeDefaultArgs> = $Result.GetResult<Prisma.$CollegePayload, S>

  type CollegeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CollegeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CollegeCountAggregateInputType | true
    }

  export interface CollegeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['College'], meta: { name: 'College' } }
    /**
     * Find zero or one College that matches the filter.
     * @param {CollegeFindUniqueArgs} args - Arguments to find a College
     * @example
     * // Get one College
     * const college = await prisma.college.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CollegeFindUniqueArgs>(args: SelectSubset<T, CollegeFindUniqueArgs<ExtArgs>>): Prisma__CollegeClient<$Result.GetResult<Prisma.$CollegePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one College that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CollegeFindUniqueOrThrowArgs} args - Arguments to find a College
     * @example
     * // Get one College
     * const college = await prisma.college.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CollegeFindUniqueOrThrowArgs>(args: SelectSubset<T, CollegeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CollegeClient<$Result.GetResult<Prisma.$CollegePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first College that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollegeFindFirstArgs} args - Arguments to find a College
     * @example
     * // Get one College
     * const college = await prisma.college.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CollegeFindFirstArgs>(args?: SelectSubset<T, CollegeFindFirstArgs<ExtArgs>>): Prisma__CollegeClient<$Result.GetResult<Prisma.$CollegePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first College that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollegeFindFirstOrThrowArgs} args - Arguments to find a College
     * @example
     * // Get one College
     * const college = await prisma.college.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CollegeFindFirstOrThrowArgs>(args?: SelectSubset<T, CollegeFindFirstOrThrowArgs<ExtArgs>>): Prisma__CollegeClient<$Result.GetResult<Prisma.$CollegePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Colleges that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollegeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Colleges
     * const colleges = await prisma.college.findMany()
     * 
     * // Get first 10 Colleges
     * const colleges = await prisma.college.findMany({ take: 10 })
     * 
     * // Only select the `roll_number`
     * const collegeWithRoll_numberOnly = await prisma.college.findMany({ select: { roll_number: true } })
     * 
     */
    findMany<T extends CollegeFindManyArgs>(args?: SelectSubset<T, CollegeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CollegePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a College.
     * @param {CollegeCreateArgs} args - Arguments to create a College.
     * @example
     * // Create one College
     * const College = await prisma.college.create({
     *   data: {
     *     // ... data to create a College
     *   }
     * })
     * 
     */
    create<T extends CollegeCreateArgs>(args: SelectSubset<T, CollegeCreateArgs<ExtArgs>>): Prisma__CollegeClient<$Result.GetResult<Prisma.$CollegePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Colleges.
     * @param {CollegeCreateManyArgs} args - Arguments to create many Colleges.
     * @example
     * // Create many Colleges
     * const college = await prisma.college.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CollegeCreateManyArgs>(args?: SelectSubset<T, CollegeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Colleges and returns the data saved in the database.
     * @param {CollegeCreateManyAndReturnArgs} args - Arguments to create many Colleges.
     * @example
     * // Create many Colleges
     * const college = await prisma.college.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Colleges and only return the `roll_number`
     * const collegeWithRoll_numberOnly = await prisma.college.createManyAndReturn({
     *   select: { roll_number: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CollegeCreateManyAndReturnArgs>(args?: SelectSubset<T, CollegeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CollegePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a College.
     * @param {CollegeDeleteArgs} args - Arguments to delete one College.
     * @example
     * // Delete one College
     * const College = await prisma.college.delete({
     *   where: {
     *     // ... filter to delete one College
     *   }
     * })
     * 
     */
    delete<T extends CollegeDeleteArgs>(args: SelectSubset<T, CollegeDeleteArgs<ExtArgs>>): Prisma__CollegeClient<$Result.GetResult<Prisma.$CollegePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one College.
     * @param {CollegeUpdateArgs} args - Arguments to update one College.
     * @example
     * // Update one College
     * const college = await prisma.college.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CollegeUpdateArgs>(args: SelectSubset<T, CollegeUpdateArgs<ExtArgs>>): Prisma__CollegeClient<$Result.GetResult<Prisma.$CollegePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Colleges.
     * @param {CollegeDeleteManyArgs} args - Arguments to filter Colleges to delete.
     * @example
     * // Delete a few Colleges
     * const { count } = await prisma.college.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CollegeDeleteManyArgs>(args?: SelectSubset<T, CollegeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Colleges.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollegeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Colleges
     * const college = await prisma.college.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CollegeUpdateManyArgs>(args: SelectSubset<T, CollegeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Colleges and returns the data updated in the database.
     * @param {CollegeUpdateManyAndReturnArgs} args - Arguments to update many Colleges.
     * @example
     * // Update many Colleges
     * const college = await prisma.college.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Colleges and only return the `roll_number`
     * const collegeWithRoll_numberOnly = await prisma.college.updateManyAndReturn({
     *   select: { roll_number: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CollegeUpdateManyAndReturnArgs>(args: SelectSubset<T, CollegeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CollegePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one College.
     * @param {CollegeUpsertArgs} args - Arguments to update or create a College.
     * @example
     * // Update or create a College
     * const college = await prisma.college.upsert({
     *   create: {
     *     // ... data to create a College
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the College we want to update
     *   }
     * })
     */
    upsert<T extends CollegeUpsertArgs>(args: SelectSubset<T, CollegeUpsertArgs<ExtArgs>>): Prisma__CollegeClient<$Result.GetResult<Prisma.$CollegePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Colleges.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollegeCountArgs} args - Arguments to filter Colleges to count.
     * @example
     * // Count the number of Colleges
     * const count = await prisma.college.count({
     *   where: {
     *     // ... the filter for the Colleges we want to count
     *   }
     * })
    **/
    count<T extends CollegeCountArgs>(
      args?: Subset<T, CollegeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CollegeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a College.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollegeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CollegeAggregateArgs>(args: Subset<T, CollegeAggregateArgs>): Prisma.PrismaPromise<GetCollegeAggregateType<T>>

    /**
     * Group by College.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollegeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CollegeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CollegeGroupByArgs['orderBy'] }
        : { orderBy?: CollegeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CollegeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCollegeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the College model
   */
  readonly fields: CollegeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for College.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CollegeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    students<T extends College$studentsArgs<ExtArgs> = {}>(args?: Subset<T, College$studentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Student2Payload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the College model
   */ 
  interface CollegeFieldRefs {
    readonly roll_number: FieldRef<"College", 'Int'>
    readonly college_name: FieldRef<"College", 'String'>
  }
    

  // Custom InputTypes
  /**
   * College findUnique
   */
  export type CollegeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the College
     */
    select?: CollegeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the College
     */
    omit?: CollegeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollegeInclude<ExtArgs> | null
    /**
     * Filter, which College to fetch.
     */
    where: CollegeWhereUniqueInput
  }

  /**
   * College findUniqueOrThrow
   */
  export type CollegeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the College
     */
    select?: CollegeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the College
     */
    omit?: CollegeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollegeInclude<ExtArgs> | null
    /**
     * Filter, which College to fetch.
     */
    where: CollegeWhereUniqueInput
  }

  /**
   * College findFirst
   */
  export type CollegeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the College
     */
    select?: CollegeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the College
     */
    omit?: CollegeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollegeInclude<ExtArgs> | null
    /**
     * Filter, which College to fetch.
     */
    where?: CollegeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Colleges to fetch.
     */
    orderBy?: CollegeOrderByWithRelationInput | CollegeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Colleges.
     */
    cursor?: CollegeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Colleges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Colleges.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Colleges.
     */
    distinct?: CollegeScalarFieldEnum | CollegeScalarFieldEnum[]
  }

  /**
   * College findFirstOrThrow
   */
  export type CollegeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the College
     */
    select?: CollegeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the College
     */
    omit?: CollegeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollegeInclude<ExtArgs> | null
    /**
     * Filter, which College to fetch.
     */
    where?: CollegeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Colleges to fetch.
     */
    orderBy?: CollegeOrderByWithRelationInput | CollegeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Colleges.
     */
    cursor?: CollegeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Colleges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Colleges.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Colleges.
     */
    distinct?: CollegeScalarFieldEnum | CollegeScalarFieldEnum[]
  }

  /**
   * College findMany
   */
  export type CollegeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the College
     */
    select?: CollegeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the College
     */
    omit?: CollegeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollegeInclude<ExtArgs> | null
    /**
     * Filter, which Colleges to fetch.
     */
    where?: CollegeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Colleges to fetch.
     */
    orderBy?: CollegeOrderByWithRelationInput | CollegeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Colleges.
     */
    cursor?: CollegeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Colleges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Colleges.
     */
    skip?: number
    distinct?: CollegeScalarFieldEnum | CollegeScalarFieldEnum[]
  }

  /**
   * College create
   */
  export type CollegeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the College
     */
    select?: CollegeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the College
     */
    omit?: CollegeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollegeInclude<ExtArgs> | null
    /**
     * The data needed to create a College.
     */
    data: XOR<CollegeCreateInput, CollegeUncheckedCreateInput>
  }

  /**
   * College createMany
   */
  export type CollegeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Colleges.
     */
    data: CollegeCreateManyInput | CollegeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * College createManyAndReturn
   */
  export type CollegeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the College
     */
    select?: CollegeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the College
     */
    omit?: CollegeOmit<ExtArgs> | null
    /**
     * The data used to create many Colleges.
     */
    data: CollegeCreateManyInput | CollegeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * College update
   */
  export type CollegeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the College
     */
    select?: CollegeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the College
     */
    omit?: CollegeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollegeInclude<ExtArgs> | null
    /**
     * The data needed to update a College.
     */
    data: XOR<CollegeUpdateInput, CollegeUncheckedUpdateInput>
    /**
     * Choose, which College to update.
     */
    where: CollegeWhereUniqueInput
  }

  /**
   * College updateMany
   */
  export type CollegeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Colleges.
     */
    data: XOR<CollegeUpdateManyMutationInput, CollegeUncheckedUpdateManyInput>
    /**
     * Filter which Colleges to update
     */
    where?: CollegeWhereInput
    /**
     * Limit how many Colleges to update.
     */
    limit?: number
  }

  /**
   * College updateManyAndReturn
   */
  export type CollegeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the College
     */
    select?: CollegeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the College
     */
    omit?: CollegeOmit<ExtArgs> | null
    /**
     * The data used to update Colleges.
     */
    data: XOR<CollegeUpdateManyMutationInput, CollegeUncheckedUpdateManyInput>
    /**
     * Filter which Colleges to update
     */
    where?: CollegeWhereInput
    /**
     * Limit how many Colleges to update.
     */
    limit?: number
  }

  /**
   * College upsert
   */
  export type CollegeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the College
     */
    select?: CollegeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the College
     */
    omit?: CollegeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollegeInclude<ExtArgs> | null
    /**
     * The filter to search for the College to update in case it exists.
     */
    where: CollegeWhereUniqueInput
    /**
     * In case the College found by the `where` argument doesn't exist, create a new College with this data.
     */
    create: XOR<CollegeCreateInput, CollegeUncheckedCreateInput>
    /**
     * In case the College was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CollegeUpdateInput, CollegeUncheckedUpdateInput>
  }

  /**
   * College delete
   */
  export type CollegeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the College
     */
    select?: CollegeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the College
     */
    omit?: CollegeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollegeInclude<ExtArgs> | null
    /**
     * Filter which College to delete.
     */
    where: CollegeWhereUniqueInput
  }

  /**
   * College deleteMany
   */
  export type CollegeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Colleges to delete
     */
    where?: CollegeWhereInput
    /**
     * Limit how many Colleges to delete.
     */
    limit?: number
  }

  /**
   * College.students
   */
  export type College$studentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student2
     */
    select?: Student2Select<ExtArgs> | null
    /**
     * Omit specific fields from the Student2
     */
    omit?: Student2Omit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Student2Include<ExtArgs> | null
    where?: Student2WhereInput
    orderBy?: Student2OrderByWithRelationInput | Student2OrderByWithRelationInput[]
    cursor?: Student2WhereUniqueInput
    take?: number
    skip?: number
    distinct?: Student2ScalarFieldEnum | Student2ScalarFieldEnum[]
  }

  /**
   * College without action
   */
  export type CollegeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the College
     */
    select?: CollegeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the College
     */
    omit?: CollegeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollegeInclude<ExtArgs> | null
  }


  /**
   * Model Room
   */

  export type AggregateRoom = {
    _count: RoomCountAggregateOutputType | null
    _avg: RoomAvgAggregateOutputType | null
    _sum: RoomSumAggregateOutputType | null
    _min: RoomMinAggregateOutputType | null
    _max: RoomMaxAggregateOutputType | null
  }

  export type RoomAvgAggregateOutputType = {
    id: number | null
    student_id: number | null
  }

  export type RoomSumAggregateOutputType = {
    id: number | null
    student_id: number | null
  }

  export type RoomMinAggregateOutputType = {
    id: number | null
    student_id: number | null
    room_id: string | null
  }

  export type RoomMaxAggregateOutputType = {
    id: number | null
    student_id: number | null
    room_id: string | null
  }

  export type RoomCountAggregateOutputType = {
    id: number
    student_id: number
    room_id: number
    _all: number
  }


  export type RoomAvgAggregateInputType = {
    id?: true
    student_id?: true
  }

  export type RoomSumAggregateInputType = {
    id?: true
    student_id?: true
  }

  export type RoomMinAggregateInputType = {
    id?: true
    student_id?: true
    room_id?: true
  }

  export type RoomMaxAggregateInputType = {
    id?: true
    student_id?: true
    room_id?: true
  }

  export type RoomCountAggregateInputType = {
    id?: true
    student_id?: true
    room_id?: true
    _all?: true
  }

  export type RoomAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Room to aggregate.
     */
    where?: RoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rooms to fetch.
     */
    orderBy?: RoomOrderByWithRelationInput | RoomOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rooms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Rooms
    **/
    _count?: true | RoomCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RoomAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RoomSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RoomMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RoomMaxAggregateInputType
  }

  export type GetRoomAggregateType<T extends RoomAggregateArgs> = {
        [P in keyof T & keyof AggregateRoom]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRoom[P]>
      : GetScalarType<T[P], AggregateRoom[P]>
  }




  export type RoomGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoomWhereInput
    orderBy?: RoomOrderByWithAggregationInput | RoomOrderByWithAggregationInput[]
    by: RoomScalarFieldEnum[] | RoomScalarFieldEnum
    having?: RoomScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RoomCountAggregateInputType | true
    _avg?: RoomAvgAggregateInputType
    _sum?: RoomSumAggregateInputType
    _min?: RoomMinAggregateInputType
    _max?: RoomMaxAggregateInputType
  }

  export type RoomGroupByOutputType = {
    id: number
    student_id: number
    room_id: string
    _count: RoomCountAggregateOutputType | null
    _avg: RoomAvgAggregateOutputType | null
    _sum: RoomSumAggregateOutputType | null
    _min: RoomMinAggregateOutputType | null
    _max: RoomMaxAggregateOutputType | null
  }

  type GetRoomGroupByPayload<T extends RoomGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RoomGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RoomGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RoomGroupByOutputType[P]>
            : GetScalarType<T[P], RoomGroupByOutputType[P]>
        }
      >
    >


  export type RoomSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    student_id?: boolean
    room_id?: boolean
    student?: boolean | Student1DefaultArgs<ExtArgs>
  }, ExtArgs["result"]["room"]>

  export type RoomSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    student_id?: boolean
    room_id?: boolean
    student?: boolean | Student1DefaultArgs<ExtArgs>
  }, ExtArgs["result"]["room"]>

  export type RoomSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    student_id?: boolean
    room_id?: boolean
    student?: boolean | Student1DefaultArgs<ExtArgs>
  }, ExtArgs["result"]["room"]>

  export type RoomSelectScalar = {
    id?: boolean
    student_id?: boolean
    room_id?: boolean
  }

  export type RoomOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "student_id" | "room_id", ExtArgs["result"]["room"]>
  export type RoomInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | Student1DefaultArgs<ExtArgs>
  }
  export type RoomIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | Student1DefaultArgs<ExtArgs>
  }
  export type RoomIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | Student1DefaultArgs<ExtArgs>
  }

  export type $RoomPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Room"
    objects: {
      student: Prisma.$Student1Payload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      student_id: number
      room_id: string
    }, ExtArgs["result"]["room"]>
    composites: {}
  }

  type RoomGetPayload<S extends boolean | null | undefined | RoomDefaultArgs> = $Result.GetResult<Prisma.$RoomPayload, S>

  type RoomCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RoomFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RoomCountAggregateInputType | true
    }

  export interface RoomDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Room'], meta: { name: 'Room' } }
    /**
     * Find zero or one Room that matches the filter.
     * @param {RoomFindUniqueArgs} args - Arguments to find a Room
     * @example
     * // Get one Room
     * const room = await prisma.room.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RoomFindUniqueArgs>(args: SelectSubset<T, RoomFindUniqueArgs<ExtArgs>>): Prisma__RoomClient<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Room that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RoomFindUniqueOrThrowArgs} args - Arguments to find a Room
     * @example
     * // Get one Room
     * const room = await prisma.room.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RoomFindUniqueOrThrowArgs>(args: SelectSubset<T, RoomFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RoomClient<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Room that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomFindFirstArgs} args - Arguments to find a Room
     * @example
     * // Get one Room
     * const room = await prisma.room.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RoomFindFirstArgs>(args?: SelectSubset<T, RoomFindFirstArgs<ExtArgs>>): Prisma__RoomClient<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Room that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomFindFirstOrThrowArgs} args - Arguments to find a Room
     * @example
     * // Get one Room
     * const room = await prisma.room.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RoomFindFirstOrThrowArgs>(args?: SelectSubset<T, RoomFindFirstOrThrowArgs<ExtArgs>>): Prisma__RoomClient<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Rooms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Rooms
     * const rooms = await prisma.room.findMany()
     * 
     * // Get first 10 Rooms
     * const rooms = await prisma.room.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const roomWithIdOnly = await prisma.room.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RoomFindManyArgs>(args?: SelectSubset<T, RoomFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Room.
     * @param {RoomCreateArgs} args - Arguments to create a Room.
     * @example
     * // Create one Room
     * const Room = await prisma.room.create({
     *   data: {
     *     // ... data to create a Room
     *   }
     * })
     * 
     */
    create<T extends RoomCreateArgs>(args: SelectSubset<T, RoomCreateArgs<ExtArgs>>): Prisma__RoomClient<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Rooms.
     * @param {RoomCreateManyArgs} args - Arguments to create many Rooms.
     * @example
     * // Create many Rooms
     * const room = await prisma.room.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RoomCreateManyArgs>(args?: SelectSubset<T, RoomCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Rooms and returns the data saved in the database.
     * @param {RoomCreateManyAndReturnArgs} args - Arguments to create many Rooms.
     * @example
     * // Create many Rooms
     * const room = await prisma.room.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Rooms and only return the `id`
     * const roomWithIdOnly = await prisma.room.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RoomCreateManyAndReturnArgs>(args?: SelectSubset<T, RoomCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Room.
     * @param {RoomDeleteArgs} args - Arguments to delete one Room.
     * @example
     * // Delete one Room
     * const Room = await prisma.room.delete({
     *   where: {
     *     // ... filter to delete one Room
     *   }
     * })
     * 
     */
    delete<T extends RoomDeleteArgs>(args: SelectSubset<T, RoomDeleteArgs<ExtArgs>>): Prisma__RoomClient<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Room.
     * @param {RoomUpdateArgs} args - Arguments to update one Room.
     * @example
     * // Update one Room
     * const room = await prisma.room.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RoomUpdateArgs>(args: SelectSubset<T, RoomUpdateArgs<ExtArgs>>): Prisma__RoomClient<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Rooms.
     * @param {RoomDeleteManyArgs} args - Arguments to filter Rooms to delete.
     * @example
     * // Delete a few Rooms
     * const { count } = await prisma.room.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RoomDeleteManyArgs>(args?: SelectSubset<T, RoomDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Rooms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Rooms
     * const room = await prisma.room.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RoomUpdateManyArgs>(args: SelectSubset<T, RoomUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Rooms and returns the data updated in the database.
     * @param {RoomUpdateManyAndReturnArgs} args - Arguments to update many Rooms.
     * @example
     * // Update many Rooms
     * const room = await prisma.room.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Rooms and only return the `id`
     * const roomWithIdOnly = await prisma.room.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RoomUpdateManyAndReturnArgs>(args: SelectSubset<T, RoomUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Room.
     * @param {RoomUpsertArgs} args - Arguments to update or create a Room.
     * @example
     * // Update or create a Room
     * const room = await prisma.room.upsert({
     *   create: {
     *     // ... data to create a Room
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Room we want to update
     *   }
     * })
     */
    upsert<T extends RoomUpsertArgs>(args: SelectSubset<T, RoomUpsertArgs<ExtArgs>>): Prisma__RoomClient<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Rooms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomCountArgs} args - Arguments to filter Rooms to count.
     * @example
     * // Count the number of Rooms
     * const count = await prisma.room.count({
     *   where: {
     *     // ... the filter for the Rooms we want to count
     *   }
     * })
    **/
    count<T extends RoomCountArgs>(
      args?: Subset<T, RoomCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RoomCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Room.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RoomAggregateArgs>(args: Subset<T, RoomAggregateArgs>): Prisma.PrismaPromise<GetRoomAggregateType<T>>

    /**
     * Group by Room.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RoomGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RoomGroupByArgs['orderBy'] }
        : { orderBy?: RoomGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RoomGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRoomGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Room model
   */
  readonly fields: RoomFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Room.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RoomClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    student<T extends Student1DefaultArgs<ExtArgs> = {}>(args?: Subset<T, Student1DefaultArgs<ExtArgs>>): Prisma__Student1Client<$Result.GetResult<Prisma.$Student1Payload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Room model
   */ 
  interface RoomFieldRefs {
    readonly id: FieldRef<"Room", 'Int'>
    readonly student_id: FieldRef<"Room", 'Int'>
    readonly room_id: FieldRef<"Room", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Room findUnique
   */
  export type RoomFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Room
     */
    omit?: RoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomInclude<ExtArgs> | null
    /**
     * Filter, which Room to fetch.
     */
    where: RoomWhereUniqueInput
  }

  /**
   * Room findUniqueOrThrow
   */
  export type RoomFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Room
     */
    omit?: RoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomInclude<ExtArgs> | null
    /**
     * Filter, which Room to fetch.
     */
    where: RoomWhereUniqueInput
  }

  /**
   * Room findFirst
   */
  export type RoomFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Room
     */
    omit?: RoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomInclude<ExtArgs> | null
    /**
     * Filter, which Room to fetch.
     */
    where?: RoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rooms to fetch.
     */
    orderBy?: RoomOrderByWithRelationInput | RoomOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Rooms.
     */
    cursor?: RoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rooms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Rooms.
     */
    distinct?: RoomScalarFieldEnum | RoomScalarFieldEnum[]
  }

  /**
   * Room findFirstOrThrow
   */
  export type RoomFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Room
     */
    omit?: RoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomInclude<ExtArgs> | null
    /**
     * Filter, which Room to fetch.
     */
    where?: RoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rooms to fetch.
     */
    orderBy?: RoomOrderByWithRelationInput | RoomOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Rooms.
     */
    cursor?: RoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rooms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Rooms.
     */
    distinct?: RoomScalarFieldEnum | RoomScalarFieldEnum[]
  }

  /**
   * Room findMany
   */
  export type RoomFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Room
     */
    omit?: RoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomInclude<ExtArgs> | null
    /**
     * Filter, which Rooms to fetch.
     */
    where?: RoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rooms to fetch.
     */
    orderBy?: RoomOrderByWithRelationInput | RoomOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Rooms.
     */
    cursor?: RoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rooms.
     */
    skip?: number
    distinct?: RoomScalarFieldEnum | RoomScalarFieldEnum[]
  }

  /**
   * Room create
   */
  export type RoomCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Room
     */
    omit?: RoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomInclude<ExtArgs> | null
    /**
     * The data needed to create a Room.
     */
    data: XOR<RoomCreateInput, RoomUncheckedCreateInput>
  }

  /**
   * Room createMany
   */
  export type RoomCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Rooms.
     */
    data: RoomCreateManyInput | RoomCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Room createManyAndReturn
   */
  export type RoomCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Room
     */
    omit?: RoomOmit<ExtArgs> | null
    /**
     * The data used to create many Rooms.
     */
    data: RoomCreateManyInput | RoomCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Room update
   */
  export type RoomUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Room
     */
    omit?: RoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomInclude<ExtArgs> | null
    /**
     * The data needed to update a Room.
     */
    data: XOR<RoomUpdateInput, RoomUncheckedUpdateInput>
    /**
     * Choose, which Room to update.
     */
    where: RoomWhereUniqueInput
  }

  /**
   * Room updateMany
   */
  export type RoomUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Rooms.
     */
    data: XOR<RoomUpdateManyMutationInput, RoomUncheckedUpdateManyInput>
    /**
     * Filter which Rooms to update
     */
    where?: RoomWhereInput
    /**
     * Limit how many Rooms to update.
     */
    limit?: number
  }

  /**
   * Room updateManyAndReturn
   */
  export type RoomUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Room
     */
    omit?: RoomOmit<ExtArgs> | null
    /**
     * The data used to update Rooms.
     */
    data: XOR<RoomUpdateManyMutationInput, RoomUncheckedUpdateManyInput>
    /**
     * Filter which Rooms to update
     */
    where?: RoomWhereInput
    /**
     * Limit how many Rooms to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Room upsert
   */
  export type RoomUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Room
     */
    omit?: RoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomInclude<ExtArgs> | null
    /**
     * The filter to search for the Room to update in case it exists.
     */
    where: RoomWhereUniqueInput
    /**
     * In case the Room found by the `where` argument doesn't exist, create a new Room with this data.
     */
    create: XOR<RoomCreateInput, RoomUncheckedCreateInput>
    /**
     * In case the Room was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RoomUpdateInput, RoomUncheckedUpdateInput>
  }

  /**
   * Room delete
   */
  export type RoomDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Room
     */
    omit?: RoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomInclude<ExtArgs> | null
    /**
     * Filter which Room to delete.
     */
    where: RoomWhereUniqueInput
  }

  /**
   * Room deleteMany
   */
  export type RoomDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Rooms to delete
     */
    where?: RoomWhereInput
    /**
     * Limit how many Rooms to delete.
     */
    limit?: number
  }

  /**
   * Room without action
   */
  export type RoomDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Room
     */
    omit?: RoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomInclude<ExtArgs> | null
  }


  /**
   * Model Feedback
   */

  export type AggregateFeedback = {
    _count: FeedbackCountAggregateOutputType | null
    _avg: FeedbackAvgAggregateOutputType | null
    _sum: FeedbackSumAggregateOutputType | null
    _min: FeedbackMinAggregateOutputType | null
    _max: FeedbackMaxAggregateOutputType | null
  }

  export type FeedbackAvgAggregateOutputType = {
    id: number | null
    student1_id: number | null
  }

  export type FeedbackSumAggregateOutputType = {
    id: number | null
    student1_id: number | null
  }

  export type FeedbackMinAggregateOutputType = {
    id: number | null
    student1_id: number | null
    issue: string | null
    room_number: string | null
    createdAt: Date | null
  }

  export type FeedbackMaxAggregateOutputType = {
    id: number | null
    student1_id: number | null
    issue: string | null
    room_number: string | null
    createdAt: Date | null
  }

  export type FeedbackCountAggregateOutputType = {
    id: number
    student1_id: number
    issue: number
    room_number: number
    createdAt: number
    _all: number
  }


  export type FeedbackAvgAggregateInputType = {
    id?: true
    student1_id?: true
  }

  export type FeedbackSumAggregateInputType = {
    id?: true
    student1_id?: true
  }

  export type FeedbackMinAggregateInputType = {
    id?: true
    student1_id?: true
    issue?: true
    room_number?: true
    createdAt?: true
  }

  export type FeedbackMaxAggregateInputType = {
    id?: true
    student1_id?: true
    issue?: true
    room_number?: true
    createdAt?: true
  }

  export type FeedbackCountAggregateInputType = {
    id?: true
    student1_id?: true
    issue?: true
    room_number?: true
    createdAt?: true
    _all?: true
  }

  export type FeedbackAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Feedback to aggregate.
     */
    where?: FeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Feedbacks to fetch.
     */
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Feedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Feedbacks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Feedbacks
    **/
    _count?: true | FeedbackCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FeedbackAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FeedbackSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FeedbackMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FeedbackMaxAggregateInputType
  }

  export type GetFeedbackAggregateType<T extends FeedbackAggregateArgs> = {
        [P in keyof T & keyof AggregateFeedback]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFeedback[P]>
      : GetScalarType<T[P], AggregateFeedback[P]>
  }




  export type FeedbackGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeedbackWhereInput
    orderBy?: FeedbackOrderByWithAggregationInput | FeedbackOrderByWithAggregationInput[]
    by: FeedbackScalarFieldEnum[] | FeedbackScalarFieldEnum
    having?: FeedbackScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FeedbackCountAggregateInputType | true
    _avg?: FeedbackAvgAggregateInputType
    _sum?: FeedbackSumAggregateInputType
    _min?: FeedbackMinAggregateInputType
    _max?: FeedbackMaxAggregateInputType
  }

  export type FeedbackGroupByOutputType = {
    id: number
    student1_id: number
    issue: string
    room_number: string
    createdAt: Date
    _count: FeedbackCountAggregateOutputType | null
    _avg: FeedbackAvgAggregateOutputType | null
    _sum: FeedbackSumAggregateOutputType | null
    _min: FeedbackMinAggregateOutputType | null
    _max: FeedbackMaxAggregateOutputType | null
  }

  type GetFeedbackGroupByPayload<T extends FeedbackGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FeedbackGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FeedbackGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FeedbackGroupByOutputType[P]>
            : GetScalarType<T[P], FeedbackGroupByOutputType[P]>
        }
      >
    >


  export type FeedbackSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    student1_id?: boolean
    issue?: boolean
    room_number?: boolean
    createdAt?: boolean
    student?: boolean | Student1DefaultArgs<ExtArgs>
  }, ExtArgs["result"]["feedback"]>

  export type FeedbackSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    student1_id?: boolean
    issue?: boolean
    room_number?: boolean
    createdAt?: boolean
    student?: boolean | Student1DefaultArgs<ExtArgs>
  }, ExtArgs["result"]["feedback"]>

  export type FeedbackSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    student1_id?: boolean
    issue?: boolean
    room_number?: boolean
    createdAt?: boolean
    student?: boolean | Student1DefaultArgs<ExtArgs>
  }, ExtArgs["result"]["feedback"]>

  export type FeedbackSelectScalar = {
    id?: boolean
    student1_id?: boolean
    issue?: boolean
    room_number?: boolean
    createdAt?: boolean
  }

  export type FeedbackOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "student1_id" | "issue" | "room_number" | "createdAt", ExtArgs["result"]["feedback"]>
  export type FeedbackInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | Student1DefaultArgs<ExtArgs>
  }
  export type FeedbackIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | Student1DefaultArgs<ExtArgs>
  }
  export type FeedbackIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | Student1DefaultArgs<ExtArgs>
  }

  export type $FeedbackPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Feedback"
    objects: {
      student: Prisma.$Student1Payload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      student1_id: number
      issue: string
      room_number: string
      createdAt: Date
    }, ExtArgs["result"]["feedback"]>
    composites: {}
  }

  type FeedbackGetPayload<S extends boolean | null | undefined | FeedbackDefaultArgs> = $Result.GetResult<Prisma.$FeedbackPayload, S>

  type FeedbackCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FeedbackFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FeedbackCountAggregateInputType | true
    }

  export interface FeedbackDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Feedback'], meta: { name: 'Feedback' } }
    /**
     * Find zero or one Feedback that matches the filter.
     * @param {FeedbackFindUniqueArgs} args - Arguments to find a Feedback
     * @example
     * // Get one Feedback
     * const feedback = await prisma.feedback.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FeedbackFindUniqueArgs>(args: SelectSubset<T, FeedbackFindUniqueArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Feedback that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FeedbackFindUniqueOrThrowArgs} args - Arguments to find a Feedback
     * @example
     * // Get one Feedback
     * const feedback = await prisma.feedback.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FeedbackFindUniqueOrThrowArgs>(args: SelectSubset<T, FeedbackFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Feedback that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackFindFirstArgs} args - Arguments to find a Feedback
     * @example
     * // Get one Feedback
     * const feedback = await prisma.feedback.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FeedbackFindFirstArgs>(args?: SelectSubset<T, FeedbackFindFirstArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Feedback that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackFindFirstOrThrowArgs} args - Arguments to find a Feedback
     * @example
     * // Get one Feedback
     * const feedback = await prisma.feedback.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FeedbackFindFirstOrThrowArgs>(args?: SelectSubset<T, FeedbackFindFirstOrThrowArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Feedbacks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Feedbacks
     * const feedbacks = await prisma.feedback.findMany()
     * 
     * // Get first 10 Feedbacks
     * const feedbacks = await prisma.feedback.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const feedbackWithIdOnly = await prisma.feedback.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FeedbackFindManyArgs>(args?: SelectSubset<T, FeedbackFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Feedback.
     * @param {FeedbackCreateArgs} args - Arguments to create a Feedback.
     * @example
     * // Create one Feedback
     * const Feedback = await prisma.feedback.create({
     *   data: {
     *     // ... data to create a Feedback
     *   }
     * })
     * 
     */
    create<T extends FeedbackCreateArgs>(args: SelectSubset<T, FeedbackCreateArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Feedbacks.
     * @param {FeedbackCreateManyArgs} args - Arguments to create many Feedbacks.
     * @example
     * // Create many Feedbacks
     * const feedback = await prisma.feedback.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FeedbackCreateManyArgs>(args?: SelectSubset<T, FeedbackCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Feedbacks and returns the data saved in the database.
     * @param {FeedbackCreateManyAndReturnArgs} args - Arguments to create many Feedbacks.
     * @example
     * // Create many Feedbacks
     * const feedback = await prisma.feedback.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Feedbacks and only return the `id`
     * const feedbackWithIdOnly = await prisma.feedback.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FeedbackCreateManyAndReturnArgs>(args?: SelectSubset<T, FeedbackCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Feedback.
     * @param {FeedbackDeleteArgs} args - Arguments to delete one Feedback.
     * @example
     * // Delete one Feedback
     * const Feedback = await prisma.feedback.delete({
     *   where: {
     *     // ... filter to delete one Feedback
     *   }
     * })
     * 
     */
    delete<T extends FeedbackDeleteArgs>(args: SelectSubset<T, FeedbackDeleteArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Feedback.
     * @param {FeedbackUpdateArgs} args - Arguments to update one Feedback.
     * @example
     * // Update one Feedback
     * const feedback = await prisma.feedback.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FeedbackUpdateArgs>(args: SelectSubset<T, FeedbackUpdateArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Feedbacks.
     * @param {FeedbackDeleteManyArgs} args - Arguments to filter Feedbacks to delete.
     * @example
     * // Delete a few Feedbacks
     * const { count } = await prisma.feedback.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FeedbackDeleteManyArgs>(args?: SelectSubset<T, FeedbackDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Feedbacks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Feedbacks
     * const feedback = await prisma.feedback.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FeedbackUpdateManyArgs>(args: SelectSubset<T, FeedbackUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Feedbacks and returns the data updated in the database.
     * @param {FeedbackUpdateManyAndReturnArgs} args - Arguments to update many Feedbacks.
     * @example
     * // Update many Feedbacks
     * const feedback = await prisma.feedback.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Feedbacks and only return the `id`
     * const feedbackWithIdOnly = await prisma.feedback.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FeedbackUpdateManyAndReturnArgs>(args: SelectSubset<T, FeedbackUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Feedback.
     * @param {FeedbackUpsertArgs} args - Arguments to update or create a Feedback.
     * @example
     * // Update or create a Feedback
     * const feedback = await prisma.feedback.upsert({
     *   create: {
     *     // ... data to create a Feedback
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Feedback we want to update
     *   }
     * })
     */
    upsert<T extends FeedbackUpsertArgs>(args: SelectSubset<T, FeedbackUpsertArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Feedbacks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackCountArgs} args - Arguments to filter Feedbacks to count.
     * @example
     * // Count the number of Feedbacks
     * const count = await prisma.feedback.count({
     *   where: {
     *     // ... the filter for the Feedbacks we want to count
     *   }
     * })
    **/
    count<T extends FeedbackCountArgs>(
      args?: Subset<T, FeedbackCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FeedbackCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Feedback.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FeedbackAggregateArgs>(args: Subset<T, FeedbackAggregateArgs>): Prisma.PrismaPromise<GetFeedbackAggregateType<T>>

    /**
     * Group by Feedback.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FeedbackGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FeedbackGroupByArgs['orderBy'] }
        : { orderBy?: FeedbackGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FeedbackGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFeedbackGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Feedback model
   */
  readonly fields: FeedbackFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Feedback.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FeedbackClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    student<T extends Student1DefaultArgs<ExtArgs> = {}>(args?: Subset<T, Student1DefaultArgs<ExtArgs>>): Prisma__Student1Client<$Result.GetResult<Prisma.$Student1Payload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Feedback model
   */ 
  interface FeedbackFieldRefs {
    readonly id: FieldRef<"Feedback", 'Int'>
    readonly student1_id: FieldRef<"Feedback", 'Int'>
    readonly issue: FieldRef<"Feedback", 'String'>
    readonly room_number: FieldRef<"Feedback", 'String'>
    readonly createdAt: FieldRef<"Feedback", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Feedback findUnique
   */
  export type FeedbackFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * Filter, which Feedback to fetch.
     */
    where: FeedbackWhereUniqueInput
  }

  /**
   * Feedback findUniqueOrThrow
   */
  export type FeedbackFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * Filter, which Feedback to fetch.
     */
    where: FeedbackWhereUniqueInput
  }

  /**
   * Feedback findFirst
   */
  export type FeedbackFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * Filter, which Feedback to fetch.
     */
    where?: FeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Feedbacks to fetch.
     */
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Feedbacks.
     */
    cursor?: FeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Feedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Feedbacks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Feedbacks.
     */
    distinct?: FeedbackScalarFieldEnum | FeedbackScalarFieldEnum[]
  }

  /**
   * Feedback findFirstOrThrow
   */
  export type FeedbackFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * Filter, which Feedback to fetch.
     */
    where?: FeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Feedbacks to fetch.
     */
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Feedbacks.
     */
    cursor?: FeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Feedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Feedbacks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Feedbacks.
     */
    distinct?: FeedbackScalarFieldEnum | FeedbackScalarFieldEnum[]
  }

  /**
   * Feedback findMany
   */
  export type FeedbackFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * Filter, which Feedbacks to fetch.
     */
    where?: FeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Feedbacks to fetch.
     */
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Feedbacks.
     */
    cursor?: FeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Feedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Feedbacks.
     */
    skip?: number
    distinct?: FeedbackScalarFieldEnum | FeedbackScalarFieldEnum[]
  }

  /**
   * Feedback create
   */
  export type FeedbackCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * The data needed to create a Feedback.
     */
    data: XOR<FeedbackCreateInput, FeedbackUncheckedCreateInput>
  }

  /**
   * Feedback createMany
   */
  export type FeedbackCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Feedbacks.
     */
    data: FeedbackCreateManyInput | FeedbackCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Feedback createManyAndReturn
   */
  export type FeedbackCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * The data used to create many Feedbacks.
     */
    data: FeedbackCreateManyInput | FeedbackCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Feedback update
   */
  export type FeedbackUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * The data needed to update a Feedback.
     */
    data: XOR<FeedbackUpdateInput, FeedbackUncheckedUpdateInput>
    /**
     * Choose, which Feedback to update.
     */
    where: FeedbackWhereUniqueInput
  }

  /**
   * Feedback updateMany
   */
  export type FeedbackUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Feedbacks.
     */
    data: XOR<FeedbackUpdateManyMutationInput, FeedbackUncheckedUpdateManyInput>
    /**
     * Filter which Feedbacks to update
     */
    where?: FeedbackWhereInput
    /**
     * Limit how many Feedbacks to update.
     */
    limit?: number
  }

  /**
   * Feedback updateManyAndReturn
   */
  export type FeedbackUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * The data used to update Feedbacks.
     */
    data: XOR<FeedbackUpdateManyMutationInput, FeedbackUncheckedUpdateManyInput>
    /**
     * Filter which Feedbacks to update
     */
    where?: FeedbackWhereInput
    /**
     * Limit how many Feedbacks to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Feedback upsert
   */
  export type FeedbackUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * The filter to search for the Feedback to update in case it exists.
     */
    where: FeedbackWhereUniqueInput
    /**
     * In case the Feedback found by the `where` argument doesn't exist, create a new Feedback with this data.
     */
    create: XOR<FeedbackCreateInput, FeedbackUncheckedCreateInput>
    /**
     * In case the Feedback was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FeedbackUpdateInput, FeedbackUncheckedUpdateInput>
  }

  /**
   * Feedback delete
   */
  export type FeedbackDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * Filter which Feedback to delete.
     */
    where: FeedbackWhereUniqueInput
  }

  /**
   * Feedback deleteMany
   */
  export type FeedbackDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Feedbacks to delete
     */
    where?: FeedbackWhereInput
    /**
     * Limit how many Feedbacks to delete.
     */
    limit?: number
  }

  /**
   * Feedback without action
   */
  export type FeedbackDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
  }


  /**
   * Model GatePass
   */

  export type AggregateGatePass = {
    _count: GatePassCountAggregateOutputType | null
    _avg: GatePassAvgAggregateOutputType | null
    _sum: GatePassSumAggregateOutputType | null
    _min: GatePassMinAggregateOutputType | null
    _max: GatePassMaxAggregateOutputType | null
  }

  export type GatePassAvgAggregateOutputType = {
    id: number | null
    student1_id: number | null
  }

  export type GatePassSumAggregateOutputType = {
    id: number | null
    student1_id: number | null
  }

  export type GatePassMinAggregateOutputType = {
    id: number | null
    reason: string | null
    leave_date: Date | null
    arrival_date: Date | null
    approval: $Enums.ApprovalEnum | null
    student1_id: number | null
    createdAt: Date | null
  }

  export type GatePassMaxAggregateOutputType = {
    id: number | null
    reason: string | null
    leave_date: Date | null
    arrival_date: Date | null
    approval: $Enums.ApprovalEnum | null
    student1_id: number | null
    createdAt: Date | null
  }

  export type GatePassCountAggregateOutputType = {
    id: number
    reason: number
    leave_date: number
    arrival_date: number
    approval: number
    student1_id: number
    createdAt: number
    _all: number
  }


  export type GatePassAvgAggregateInputType = {
    id?: true
    student1_id?: true
  }

  export type GatePassSumAggregateInputType = {
    id?: true
    student1_id?: true
  }

  export type GatePassMinAggregateInputType = {
    id?: true
    reason?: true
    leave_date?: true
    arrival_date?: true
    approval?: true
    student1_id?: true
    createdAt?: true
  }

  export type GatePassMaxAggregateInputType = {
    id?: true
    reason?: true
    leave_date?: true
    arrival_date?: true
    approval?: true
    student1_id?: true
    createdAt?: true
  }

  export type GatePassCountAggregateInputType = {
    id?: true
    reason?: true
    leave_date?: true
    arrival_date?: true
    approval?: true
    student1_id?: true
    createdAt?: true
    _all?: true
  }

  export type GatePassAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GatePass to aggregate.
     */
    where?: GatePassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GatePasses to fetch.
     */
    orderBy?: GatePassOrderByWithRelationInput | GatePassOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GatePassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GatePasses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GatePasses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GatePasses
    **/
    _count?: true | GatePassCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GatePassAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GatePassSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GatePassMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GatePassMaxAggregateInputType
  }

  export type GetGatePassAggregateType<T extends GatePassAggregateArgs> = {
        [P in keyof T & keyof AggregateGatePass]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGatePass[P]>
      : GetScalarType<T[P], AggregateGatePass[P]>
  }




  export type GatePassGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GatePassWhereInput
    orderBy?: GatePassOrderByWithAggregationInput | GatePassOrderByWithAggregationInput[]
    by: GatePassScalarFieldEnum[] | GatePassScalarFieldEnum
    having?: GatePassScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GatePassCountAggregateInputType | true
    _avg?: GatePassAvgAggregateInputType
    _sum?: GatePassSumAggregateInputType
    _min?: GatePassMinAggregateInputType
    _max?: GatePassMaxAggregateInputType
  }

  export type GatePassGroupByOutputType = {
    id: number
    reason: string
    leave_date: Date
    arrival_date: Date
    approval: $Enums.ApprovalEnum
    student1_id: number
    createdAt: Date
    _count: GatePassCountAggregateOutputType | null
    _avg: GatePassAvgAggregateOutputType | null
    _sum: GatePassSumAggregateOutputType | null
    _min: GatePassMinAggregateOutputType | null
    _max: GatePassMaxAggregateOutputType | null
  }

  type GetGatePassGroupByPayload<T extends GatePassGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GatePassGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GatePassGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GatePassGroupByOutputType[P]>
            : GetScalarType<T[P], GatePassGroupByOutputType[P]>
        }
      >
    >


  export type GatePassSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    reason?: boolean
    leave_date?: boolean
    arrival_date?: boolean
    approval?: boolean
    student1_id?: boolean
    createdAt?: boolean
    student?: boolean | Student1DefaultArgs<ExtArgs>
  }, ExtArgs["result"]["gatePass"]>

  export type GatePassSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    reason?: boolean
    leave_date?: boolean
    arrival_date?: boolean
    approval?: boolean
    student1_id?: boolean
    createdAt?: boolean
    student?: boolean | Student1DefaultArgs<ExtArgs>
  }, ExtArgs["result"]["gatePass"]>

  export type GatePassSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    reason?: boolean
    leave_date?: boolean
    arrival_date?: boolean
    approval?: boolean
    student1_id?: boolean
    createdAt?: boolean
    student?: boolean | Student1DefaultArgs<ExtArgs>
  }, ExtArgs["result"]["gatePass"]>

  export type GatePassSelectScalar = {
    id?: boolean
    reason?: boolean
    leave_date?: boolean
    arrival_date?: boolean
    approval?: boolean
    student1_id?: boolean
    createdAt?: boolean
  }

  export type GatePassOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "reason" | "leave_date" | "arrival_date" | "approval" | "student1_id" | "createdAt", ExtArgs["result"]["gatePass"]>
  export type GatePassInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | Student1DefaultArgs<ExtArgs>
  }
  export type GatePassIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | Student1DefaultArgs<ExtArgs>
  }
  export type GatePassIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | Student1DefaultArgs<ExtArgs>
  }

  export type $GatePassPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "GatePass"
    objects: {
      student: Prisma.$Student1Payload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      reason: string
      leave_date: Date
      arrival_date: Date
      approval: $Enums.ApprovalEnum
      student1_id: number
      createdAt: Date
    }, ExtArgs["result"]["gatePass"]>
    composites: {}
  }

  type GatePassGetPayload<S extends boolean | null | undefined | GatePassDefaultArgs> = $Result.GetResult<Prisma.$GatePassPayload, S>

  type GatePassCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<GatePassFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: GatePassCountAggregateInputType | true
    }

  export interface GatePassDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GatePass'], meta: { name: 'GatePass' } }
    /**
     * Find zero or one GatePass that matches the filter.
     * @param {GatePassFindUniqueArgs} args - Arguments to find a GatePass
     * @example
     * // Get one GatePass
     * const gatePass = await prisma.gatePass.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GatePassFindUniqueArgs>(args: SelectSubset<T, GatePassFindUniqueArgs<ExtArgs>>): Prisma__GatePassClient<$Result.GetResult<Prisma.$GatePassPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one GatePass that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {GatePassFindUniqueOrThrowArgs} args - Arguments to find a GatePass
     * @example
     * // Get one GatePass
     * const gatePass = await prisma.gatePass.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GatePassFindUniqueOrThrowArgs>(args: SelectSubset<T, GatePassFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GatePassClient<$Result.GetResult<Prisma.$GatePassPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GatePass that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GatePassFindFirstArgs} args - Arguments to find a GatePass
     * @example
     * // Get one GatePass
     * const gatePass = await prisma.gatePass.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GatePassFindFirstArgs>(args?: SelectSubset<T, GatePassFindFirstArgs<ExtArgs>>): Prisma__GatePassClient<$Result.GetResult<Prisma.$GatePassPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GatePass that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GatePassFindFirstOrThrowArgs} args - Arguments to find a GatePass
     * @example
     * // Get one GatePass
     * const gatePass = await prisma.gatePass.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GatePassFindFirstOrThrowArgs>(args?: SelectSubset<T, GatePassFindFirstOrThrowArgs<ExtArgs>>): Prisma__GatePassClient<$Result.GetResult<Prisma.$GatePassPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more GatePasses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GatePassFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GatePasses
     * const gatePasses = await prisma.gatePass.findMany()
     * 
     * // Get first 10 GatePasses
     * const gatePasses = await prisma.gatePass.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const gatePassWithIdOnly = await prisma.gatePass.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GatePassFindManyArgs>(args?: SelectSubset<T, GatePassFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GatePassPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a GatePass.
     * @param {GatePassCreateArgs} args - Arguments to create a GatePass.
     * @example
     * // Create one GatePass
     * const GatePass = await prisma.gatePass.create({
     *   data: {
     *     // ... data to create a GatePass
     *   }
     * })
     * 
     */
    create<T extends GatePassCreateArgs>(args: SelectSubset<T, GatePassCreateArgs<ExtArgs>>): Prisma__GatePassClient<$Result.GetResult<Prisma.$GatePassPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many GatePasses.
     * @param {GatePassCreateManyArgs} args - Arguments to create many GatePasses.
     * @example
     * // Create many GatePasses
     * const gatePass = await prisma.gatePass.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GatePassCreateManyArgs>(args?: SelectSubset<T, GatePassCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many GatePasses and returns the data saved in the database.
     * @param {GatePassCreateManyAndReturnArgs} args - Arguments to create many GatePasses.
     * @example
     * // Create many GatePasses
     * const gatePass = await prisma.gatePass.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many GatePasses and only return the `id`
     * const gatePassWithIdOnly = await prisma.gatePass.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GatePassCreateManyAndReturnArgs>(args?: SelectSubset<T, GatePassCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GatePassPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a GatePass.
     * @param {GatePassDeleteArgs} args - Arguments to delete one GatePass.
     * @example
     * // Delete one GatePass
     * const GatePass = await prisma.gatePass.delete({
     *   where: {
     *     // ... filter to delete one GatePass
     *   }
     * })
     * 
     */
    delete<T extends GatePassDeleteArgs>(args: SelectSubset<T, GatePassDeleteArgs<ExtArgs>>): Prisma__GatePassClient<$Result.GetResult<Prisma.$GatePassPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one GatePass.
     * @param {GatePassUpdateArgs} args - Arguments to update one GatePass.
     * @example
     * // Update one GatePass
     * const gatePass = await prisma.gatePass.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GatePassUpdateArgs>(args: SelectSubset<T, GatePassUpdateArgs<ExtArgs>>): Prisma__GatePassClient<$Result.GetResult<Prisma.$GatePassPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more GatePasses.
     * @param {GatePassDeleteManyArgs} args - Arguments to filter GatePasses to delete.
     * @example
     * // Delete a few GatePasses
     * const { count } = await prisma.gatePass.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GatePassDeleteManyArgs>(args?: SelectSubset<T, GatePassDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GatePasses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GatePassUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GatePasses
     * const gatePass = await prisma.gatePass.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GatePassUpdateManyArgs>(args: SelectSubset<T, GatePassUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GatePasses and returns the data updated in the database.
     * @param {GatePassUpdateManyAndReturnArgs} args - Arguments to update many GatePasses.
     * @example
     * // Update many GatePasses
     * const gatePass = await prisma.gatePass.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more GatePasses and only return the `id`
     * const gatePassWithIdOnly = await prisma.gatePass.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends GatePassUpdateManyAndReturnArgs>(args: SelectSubset<T, GatePassUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GatePassPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one GatePass.
     * @param {GatePassUpsertArgs} args - Arguments to update or create a GatePass.
     * @example
     * // Update or create a GatePass
     * const gatePass = await prisma.gatePass.upsert({
     *   create: {
     *     // ... data to create a GatePass
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GatePass we want to update
     *   }
     * })
     */
    upsert<T extends GatePassUpsertArgs>(args: SelectSubset<T, GatePassUpsertArgs<ExtArgs>>): Prisma__GatePassClient<$Result.GetResult<Prisma.$GatePassPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of GatePasses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GatePassCountArgs} args - Arguments to filter GatePasses to count.
     * @example
     * // Count the number of GatePasses
     * const count = await prisma.gatePass.count({
     *   where: {
     *     // ... the filter for the GatePasses we want to count
     *   }
     * })
    **/
    count<T extends GatePassCountArgs>(
      args?: Subset<T, GatePassCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GatePassCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GatePass.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GatePassAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GatePassAggregateArgs>(args: Subset<T, GatePassAggregateArgs>): Prisma.PrismaPromise<GetGatePassAggregateType<T>>

    /**
     * Group by GatePass.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GatePassGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GatePassGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GatePassGroupByArgs['orderBy'] }
        : { orderBy?: GatePassGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GatePassGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGatePassGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the GatePass model
   */
  readonly fields: GatePassFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for GatePass.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GatePassClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    student<T extends Student1DefaultArgs<ExtArgs> = {}>(args?: Subset<T, Student1DefaultArgs<ExtArgs>>): Prisma__Student1Client<$Result.GetResult<Prisma.$Student1Payload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the GatePass model
   */ 
  interface GatePassFieldRefs {
    readonly id: FieldRef<"GatePass", 'Int'>
    readonly reason: FieldRef<"GatePass", 'String'>
    readonly leave_date: FieldRef<"GatePass", 'DateTime'>
    readonly arrival_date: FieldRef<"GatePass", 'DateTime'>
    readonly approval: FieldRef<"GatePass", 'ApprovalEnum'>
    readonly student1_id: FieldRef<"GatePass", 'Int'>
    readonly createdAt: FieldRef<"GatePass", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * GatePass findUnique
   */
  export type GatePassFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GatePass
     */
    select?: GatePassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GatePass
     */
    omit?: GatePassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GatePassInclude<ExtArgs> | null
    /**
     * Filter, which GatePass to fetch.
     */
    where: GatePassWhereUniqueInput
  }

  /**
   * GatePass findUniqueOrThrow
   */
  export type GatePassFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GatePass
     */
    select?: GatePassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GatePass
     */
    omit?: GatePassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GatePassInclude<ExtArgs> | null
    /**
     * Filter, which GatePass to fetch.
     */
    where: GatePassWhereUniqueInput
  }

  /**
   * GatePass findFirst
   */
  export type GatePassFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GatePass
     */
    select?: GatePassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GatePass
     */
    omit?: GatePassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GatePassInclude<ExtArgs> | null
    /**
     * Filter, which GatePass to fetch.
     */
    where?: GatePassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GatePasses to fetch.
     */
    orderBy?: GatePassOrderByWithRelationInput | GatePassOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GatePasses.
     */
    cursor?: GatePassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GatePasses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GatePasses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GatePasses.
     */
    distinct?: GatePassScalarFieldEnum | GatePassScalarFieldEnum[]
  }

  /**
   * GatePass findFirstOrThrow
   */
  export type GatePassFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GatePass
     */
    select?: GatePassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GatePass
     */
    omit?: GatePassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GatePassInclude<ExtArgs> | null
    /**
     * Filter, which GatePass to fetch.
     */
    where?: GatePassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GatePasses to fetch.
     */
    orderBy?: GatePassOrderByWithRelationInput | GatePassOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GatePasses.
     */
    cursor?: GatePassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GatePasses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GatePasses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GatePasses.
     */
    distinct?: GatePassScalarFieldEnum | GatePassScalarFieldEnum[]
  }

  /**
   * GatePass findMany
   */
  export type GatePassFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GatePass
     */
    select?: GatePassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GatePass
     */
    omit?: GatePassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GatePassInclude<ExtArgs> | null
    /**
     * Filter, which GatePasses to fetch.
     */
    where?: GatePassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GatePasses to fetch.
     */
    orderBy?: GatePassOrderByWithRelationInput | GatePassOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GatePasses.
     */
    cursor?: GatePassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GatePasses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GatePasses.
     */
    skip?: number
    distinct?: GatePassScalarFieldEnum | GatePassScalarFieldEnum[]
  }

  /**
   * GatePass create
   */
  export type GatePassCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GatePass
     */
    select?: GatePassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GatePass
     */
    omit?: GatePassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GatePassInclude<ExtArgs> | null
    /**
     * The data needed to create a GatePass.
     */
    data: XOR<GatePassCreateInput, GatePassUncheckedCreateInput>
  }

  /**
   * GatePass createMany
   */
  export type GatePassCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GatePasses.
     */
    data: GatePassCreateManyInput | GatePassCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * GatePass createManyAndReturn
   */
  export type GatePassCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GatePass
     */
    select?: GatePassSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the GatePass
     */
    omit?: GatePassOmit<ExtArgs> | null
    /**
     * The data used to create many GatePasses.
     */
    data: GatePassCreateManyInput | GatePassCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GatePassIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * GatePass update
   */
  export type GatePassUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GatePass
     */
    select?: GatePassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GatePass
     */
    omit?: GatePassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GatePassInclude<ExtArgs> | null
    /**
     * The data needed to update a GatePass.
     */
    data: XOR<GatePassUpdateInput, GatePassUncheckedUpdateInput>
    /**
     * Choose, which GatePass to update.
     */
    where: GatePassWhereUniqueInput
  }

  /**
   * GatePass updateMany
   */
  export type GatePassUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GatePasses.
     */
    data: XOR<GatePassUpdateManyMutationInput, GatePassUncheckedUpdateManyInput>
    /**
     * Filter which GatePasses to update
     */
    where?: GatePassWhereInput
    /**
     * Limit how many GatePasses to update.
     */
    limit?: number
  }

  /**
   * GatePass updateManyAndReturn
   */
  export type GatePassUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GatePass
     */
    select?: GatePassSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the GatePass
     */
    omit?: GatePassOmit<ExtArgs> | null
    /**
     * The data used to update GatePasses.
     */
    data: XOR<GatePassUpdateManyMutationInput, GatePassUncheckedUpdateManyInput>
    /**
     * Filter which GatePasses to update
     */
    where?: GatePassWhereInput
    /**
     * Limit how many GatePasses to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GatePassIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * GatePass upsert
   */
  export type GatePassUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GatePass
     */
    select?: GatePassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GatePass
     */
    omit?: GatePassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GatePassInclude<ExtArgs> | null
    /**
     * The filter to search for the GatePass to update in case it exists.
     */
    where: GatePassWhereUniqueInput
    /**
     * In case the GatePass found by the `where` argument doesn't exist, create a new GatePass with this data.
     */
    create: XOR<GatePassCreateInput, GatePassUncheckedCreateInput>
    /**
     * In case the GatePass was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GatePassUpdateInput, GatePassUncheckedUpdateInput>
  }

  /**
   * GatePass delete
   */
  export type GatePassDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GatePass
     */
    select?: GatePassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GatePass
     */
    omit?: GatePassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GatePassInclude<ExtArgs> | null
    /**
     * Filter which GatePass to delete.
     */
    where: GatePassWhereUniqueInput
  }

  /**
   * GatePass deleteMany
   */
  export type GatePassDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GatePasses to delete
     */
    where?: GatePassWhereInput
    /**
     * Limit how many GatePasses to delete.
     */
    limit?: number
  }

  /**
   * GatePass without action
   */
  export type GatePassDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GatePass
     */
    select?: GatePassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GatePass
     */
    omit?: GatePassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GatePassInclude<ExtArgs> | null
  }


  /**
   * Model FeePayment
   */

  export type AggregateFeePayment = {
    _count: FeePaymentCountAggregateOutputType | null
    _avg: FeePaymentAvgAggregateOutputType | null
    _sum: FeePaymentSumAggregateOutputType | null
    _min: FeePaymentMinAggregateOutputType | null
    _max: FeePaymentMaxAggregateOutputType | null
  }

  export type FeePaymentAvgAggregateOutputType = {
    id: number | null
    semester: number | null
    student_id: number | null
  }

  export type FeePaymentSumAggregateOutputType = {
    id: number | null
    semester: number | null
    student_id: number | null
  }

  export type FeePaymentMinAggregateOutputType = {
    id: number | null
    semester: number | null
    date_of_payment: Date | null
    mode_of_payment: string | null
    student_id: number | null
  }

  export type FeePaymentMaxAggregateOutputType = {
    id: number | null
    semester: number | null
    date_of_payment: Date | null
    mode_of_payment: string | null
    student_id: number | null
  }

  export type FeePaymentCountAggregateOutputType = {
    id: number
    semester: number
    date_of_payment: number
    mode_of_payment: number
    student_id: number
    _all: number
  }


  export type FeePaymentAvgAggregateInputType = {
    id?: true
    semester?: true
    student_id?: true
  }

  export type FeePaymentSumAggregateInputType = {
    id?: true
    semester?: true
    student_id?: true
  }

  export type FeePaymentMinAggregateInputType = {
    id?: true
    semester?: true
    date_of_payment?: true
    mode_of_payment?: true
    student_id?: true
  }

  export type FeePaymentMaxAggregateInputType = {
    id?: true
    semester?: true
    date_of_payment?: true
    mode_of_payment?: true
    student_id?: true
  }

  export type FeePaymentCountAggregateInputType = {
    id?: true
    semester?: true
    date_of_payment?: true
    mode_of_payment?: true
    student_id?: true
    _all?: true
  }

  export type FeePaymentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FeePayment to aggregate.
     */
    where?: FeePaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FeePayments to fetch.
     */
    orderBy?: FeePaymentOrderByWithRelationInput | FeePaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FeePaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FeePayments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FeePayments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FeePayments
    **/
    _count?: true | FeePaymentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FeePaymentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FeePaymentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FeePaymentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FeePaymentMaxAggregateInputType
  }

  export type GetFeePaymentAggregateType<T extends FeePaymentAggregateArgs> = {
        [P in keyof T & keyof AggregateFeePayment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFeePayment[P]>
      : GetScalarType<T[P], AggregateFeePayment[P]>
  }




  export type FeePaymentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeePaymentWhereInput
    orderBy?: FeePaymentOrderByWithAggregationInput | FeePaymentOrderByWithAggregationInput[]
    by: FeePaymentScalarFieldEnum[] | FeePaymentScalarFieldEnum
    having?: FeePaymentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FeePaymentCountAggregateInputType | true
    _avg?: FeePaymentAvgAggregateInputType
    _sum?: FeePaymentSumAggregateInputType
    _min?: FeePaymentMinAggregateInputType
    _max?: FeePaymentMaxAggregateInputType
  }

  export type FeePaymentGroupByOutputType = {
    id: number
    semester: number
    date_of_payment: Date
    mode_of_payment: string
    student_id: number
    _count: FeePaymentCountAggregateOutputType | null
    _avg: FeePaymentAvgAggregateOutputType | null
    _sum: FeePaymentSumAggregateOutputType | null
    _min: FeePaymentMinAggregateOutputType | null
    _max: FeePaymentMaxAggregateOutputType | null
  }

  type GetFeePaymentGroupByPayload<T extends FeePaymentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FeePaymentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FeePaymentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FeePaymentGroupByOutputType[P]>
            : GetScalarType<T[P], FeePaymentGroupByOutputType[P]>
        }
      >
    >


  export type FeePaymentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    semester?: boolean
    date_of_payment?: boolean
    mode_of_payment?: boolean
    student_id?: boolean
    student?: boolean | Student1DefaultArgs<ExtArgs>
  }, ExtArgs["result"]["feePayment"]>

  export type FeePaymentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    semester?: boolean
    date_of_payment?: boolean
    mode_of_payment?: boolean
    student_id?: boolean
    student?: boolean | Student1DefaultArgs<ExtArgs>
  }, ExtArgs["result"]["feePayment"]>

  export type FeePaymentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    semester?: boolean
    date_of_payment?: boolean
    mode_of_payment?: boolean
    student_id?: boolean
    student?: boolean | Student1DefaultArgs<ExtArgs>
  }, ExtArgs["result"]["feePayment"]>

  export type FeePaymentSelectScalar = {
    id?: boolean
    semester?: boolean
    date_of_payment?: boolean
    mode_of_payment?: boolean
    student_id?: boolean
  }

  export type FeePaymentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "semester" | "date_of_payment" | "mode_of_payment" | "student_id", ExtArgs["result"]["feePayment"]>
  export type FeePaymentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | Student1DefaultArgs<ExtArgs>
  }
  export type FeePaymentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | Student1DefaultArgs<ExtArgs>
  }
  export type FeePaymentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | Student1DefaultArgs<ExtArgs>
  }

  export type $FeePaymentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FeePayment"
    objects: {
      student: Prisma.$Student1Payload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      semester: number
      date_of_payment: Date
      mode_of_payment: string
      student_id: number
    }, ExtArgs["result"]["feePayment"]>
    composites: {}
  }

  type FeePaymentGetPayload<S extends boolean | null | undefined | FeePaymentDefaultArgs> = $Result.GetResult<Prisma.$FeePaymentPayload, S>

  type FeePaymentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FeePaymentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FeePaymentCountAggregateInputType | true
    }

  export interface FeePaymentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FeePayment'], meta: { name: 'FeePayment' } }
    /**
     * Find zero or one FeePayment that matches the filter.
     * @param {FeePaymentFindUniqueArgs} args - Arguments to find a FeePayment
     * @example
     * // Get one FeePayment
     * const feePayment = await prisma.feePayment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FeePaymentFindUniqueArgs>(args: SelectSubset<T, FeePaymentFindUniqueArgs<ExtArgs>>): Prisma__FeePaymentClient<$Result.GetResult<Prisma.$FeePaymentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one FeePayment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FeePaymentFindUniqueOrThrowArgs} args - Arguments to find a FeePayment
     * @example
     * // Get one FeePayment
     * const feePayment = await prisma.feePayment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FeePaymentFindUniqueOrThrowArgs>(args: SelectSubset<T, FeePaymentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FeePaymentClient<$Result.GetResult<Prisma.$FeePaymentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FeePayment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeePaymentFindFirstArgs} args - Arguments to find a FeePayment
     * @example
     * // Get one FeePayment
     * const feePayment = await prisma.feePayment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FeePaymentFindFirstArgs>(args?: SelectSubset<T, FeePaymentFindFirstArgs<ExtArgs>>): Prisma__FeePaymentClient<$Result.GetResult<Prisma.$FeePaymentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FeePayment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeePaymentFindFirstOrThrowArgs} args - Arguments to find a FeePayment
     * @example
     * // Get one FeePayment
     * const feePayment = await prisma.feePayment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FeePaymentFindFirstOrThrowArgs>(args?: SelectSubset<T, FeePaymentFindFirstOrThrowArgs<ExtArgs>>): Prisma__FeePaymentClient<$Result.GetResult<Prisma.$FeePaymentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more FeePayments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeePaymentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FeePayments
     * const feePayments = await prisma.feePayment.findMany()
     * 
     * // Get first 10 FeePayments
     * const feePayments = await prisma.feePayment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const feePaymentWithIdOnly = await prisma.feePayment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FeePaymentFindManyArgs>(args?: SelectSubset<T, FeePaymentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeePaymentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a FeePayment.
     * @param {FeePaymentCreateArgs} args - Arguments to create a FeePayment.
     * @example
     * // Create one FeePayment
     * const FeePayment = await prisma.feePayment.create({
     *   data: {
     *     // ... data to create a FeePayment
     *   }
     * })
     * 
     */
    create<T extends FeePaymentCreateArgs>(args: SelectSubset<T, FeePaymentCreateArgs<ExtArgs>>): Prisma__FeePaymentClient<$Result.GetResult<Prisma.$FeePaymentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many FeePayments.
     * @param {FeePaymentCreateManyArgs} args - Arguments to create many FeePayments.
     * @example
     * // Create many FeePayments
     * const feePayment = await prisma.feePayment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FeePaymentCreateManyArgs>(args?: SelectSubset<T, FeePaymentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FeePayments and returns the data saved in the database.
     * @param {FeePaymentCreateManyAndReturnArgs} args - Arguments to create many FeePayments.
     * @example
     * // Create many FeePayments
     * const feePayment = await prisma.feePayment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FeePayments and only return the `id`
     * const feePaymentWithIdOnly = await prisma.feePayment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FeePaymentCreateManyAndReturnArgs>(args?: SelectSubset<T, FeePaymentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeePaymentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a FeePayment.
     * @param {FeePaymentDeleteArgs} args - Arguments to delete one FeePayment.
     * @example
     * // Delete one FeePayment
     * const FeePayment = await prisma.feePayment.delete({
     *   where: {
     *     // ... filter to delete one FeePayment
     *   }
     * })
     * 
     */
    delete<T extends FeePaymentDeleteArgs>(args: SelectSubset<T, FeePaymentDeleteArgs<ExtArgs>>): Prisma__FeePaymentClient<$Result.GetResult<Prisma.$FeePaymentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one FeePayment.
     * @param {FeePaymentUpdateArgs} args - Arguments to update one FeePayment.
     * @example
     * // Update one FeePayment
     * const feePayment = await prisma.feePayment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FeePaymentUpdateArgs>(args: SelectSubset<T, FeePaymentUpdateArgs<ExtArgs>>): Prisma__FeePaymentClient<$Result.GetResult<Prisma.$FeePaymentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more FeePayments.
     * @param {FeePaymentDeleteManyArgs} args - Arguments to filter FeePayments to delete.
     * @example
     * // Delete a few FeePayments
     * const { count } = await prisma.feePayment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FeePaymentDeleteManyArgs>(args?: SelectSubset<T, FeePaymentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FeePayments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeePaymentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FeePayments
     * const feePayment = await prisma.feePayment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FeePaymentUpdateManyArgs>(args: SelectSubset<T, FeePaymentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FeePayments and returns the data updated in the database.
     * @param {FeePaymentUpdateManyAndReturnArgs} args - Arguments to update many FeePayments.
     * @example
     * // Update many FeePayments
     * const feePayment = await prisma.feePayment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more FeePayments and only return the `id`
     * const feePaymentWithIdOnly = await prisma.feePayment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FeePaymentUpdateManyAndReturnArgs>(args: SelectSubset<T, FeePaymentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeePaymentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one FeePayment.
     * @param {FeePaymentUpsertArgs} args - Arguments to update or create a FeePayment.
     * @example
     * // Update or create a FeePayment
     * const feePayment = await prisma.feePayment.upsert({
     *   create: {
     *     // ... data to create a FeePayment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FeePayment we want to update
     *   }
     * })
     */
    upsert<T extends FeePaymentUpsertArgs>(args: SelectSubset<T, FeePaymentUpsertArgs<ExtArgs>>): Prisma__FeePaymentClient<$Result.GetResult<Prisma.$FeePaymentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of FeePayments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeePaymentCountArgs} args - Arguments to filter FeePayments to count.
     * @example
     * // Count the number of FeePayments
     * const count = await prisma.feePayment.count({
     *   where: {
     *     // ... the filter for the FeePayments we want to count
     *   }
     * })
    **/
    count<T extends FeePaymentCountArgs>(
      args?: Subset<T, FeePaymentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FeePaymentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FeePayment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeePaymentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FeePaymentAggregateArgs>(args: Subset<T, FeePaymentAggregateArgs>): Prisma.PrismaPromise<GetFeePaymentAggregateType<T>>

    /**
     * Group by FeePayment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeePaymentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FeePaymentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FeePaymentGroupByArgs['orderBy'] }
        : { orderBy?: FeePaymentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FeePaymentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFeePaymentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FeePayment model
   */
  readonly fields: FeePaymentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FeePayment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FeePaymentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    student<T extends Student1DefaultArgs<ExtArgs> = {}>(args?: Subset<T, Student1DefaultArgs<ExtArgs>>): Prisma__Student1Client<$Result.GetResult<Prisma.$Student1Payload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FeePayment model
   */ 
  interface FeePaymentFieldRefs {
    readonly id: FieldRef<"FeePayment", 'Int'>
    readonly semester: FieldRef<"FeePayment", 'Int'>
    readonly date_of_payment: FieldRef<"FeePayment", 'DateTime'>
    readonly mode_of_payment: FieldRef<"FeePayment", 'String'>
    readonly student_id: FieldRef<"FeePayment", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * FeePayment findUnique
   */
  export type FeePaymentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeePayment
     */
    select?: FeePaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeePayment
     */
    omit?: FeePaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeePaymentInclude<ExtArgs> | null
    /**
     * Filter, which FeePayment to fetch.
     */
    where: FeePaymentWhereUniqueInput
  }

  /**
   * FeePayment findUniqueOrThrow
   */
  export type FeePaymentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeePayment
     */
    select?: FeePaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeePayment
     */
    omit?: FeePaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeePaymentInclude<ExtArgs> | null
    /**
     * Filter, which FeePayment to fetch.
     */
    where: FeePaymentWhereUniqueInput
  }

  /**
   * FeePayment findFirst
   */
  export type FeePaymentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeePayment
     */
    select?: FeePaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeePayment
     */
    omit?: FeePaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeePaymentInclude<ExtArgs> | null
    /**
     * Filter, which FeePayment to fetch.
     */
    where?: FeePaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FeePayments to fetch.
     */
    orderBy?: FeePaymentOrderByWithRelationInput | FeePaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FeePayments.
     */
    cursor?: FeePaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FeePayments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FeePayments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FeePayments.
     */
    distinct?: FeePaymentScalarFieldEnum | FeePaymentScalarFieldEnum[]
  }

  /**
   * FeePayment findFirstOrThrow
   */
  export type FeePaymentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeePayment
     */
    select?: FeePaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeePayment
     */
    omit?: FeePaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeePaymentInclude<ExtArgs> | null
    /**
     * Filter, which FeePayment to fetch.
     */
    where?: FeePaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FeePayments to fetch.
     */
    orderBy?: FeePaymentOrderByWithRelationInput | FeePaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FeePayments.
     */
    cursor?: FeePaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FeePayments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FeePayments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FeePayments.
     */
    distinct?: FeePaymentScalarFieldEnum | FeePaymentScalarFieldEnum[]
  }

  /**
   * FeePayment findMany
   */
  export type FeePaymentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeePayment
     */
    select?: FeePaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeePayment
     */
    omit?: FeePaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeePaymentInclude<ExtArgs> | null
    /**
     * Filter, which FeePayments to fetch.
     */
    where?: FeePaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FeePayments to fetch.
     */
    orderBy?: FeePaymentOrderByWithRelationInput | FeePaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FeePayments.
     */
    cursor?: FeePaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FeePayments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FeePayments.
     */
    skip?: number
    distinct?: FeePaymentScalarFieldEnum | FeePaymentScalarFieldEnum[]
  }

  /**
   * FeePayment create
   */
  export type FeePaymentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeePayment
     */
    select?: FeePaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeePayment
     */
    omit?: FeePaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeePaymentInclude<ExtArgs> | null
    /**
     * The data needed to create a FeePayment.
     */
    data: XOR<FeePaymentCreateInput, FeePaymentUncheckedCreateInput>
  }

  /**
   * FeePayment createMany
   */
  export type FeePaymentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FeePayments.
     */
    data: FeePaymentCreateManyInput | FeePaymentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FeePayment createManyAndReturn
   */
  export type FeePaymentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeePayment
     */
    select?: FeePaymentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FeePayment
     */
    omit?: FeePaymentOmit<ExtArgs> | null
    /**
     * The data used to create many FeePayments.
     */
    data: FeePaymentCreateManyInput | FeePaymentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeePaymentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * FeePayment update
   */
  export type FeePaymentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeePayment
     */
    select?: FeePaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeePayment
     */
    omit?: FeePaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeePaymentInclude<ExtArgs> | null
    /**
     * The data needed to update a FeePayment.
     */
    data: XOR<FeePaymentUpdateInput, FeePaymentUncheckedUpdateInput>
    /**
     * Choose, which FeePayment to update.
     */
    where: FeePaymentWhereUniqueInput
  }

  /**
   * FeePayment updateMany
   */
  export type FeePaymentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FeePayments.
     */
    data: XOR<FeePaymentUpdateManyMutationInput, FeePaymentUncheckedUpdateManyInput>
    /**
     * Filter which FeePayments to update
     */
    where?: FeePaymentWhereInput
    /**
     * Limit how many FeePayments to update.
     */
    limit?: number
  }

  /**
   * FeePayment updateManyAndReturn
   */
  export type FeePaymentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeePayment
     */
    select?: FeePaymentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FeePayment
     */
    omit?: FeePaymentOmit<ExtArgs> | null
    /**
     * The data used to update FeePayments.
     */
    data: XOR<FeePaymentUpdateManyMutationInput, FeePaymentUncheckedUpdateManyInput>
    /**
     * Filter which FeePayments to update
     */
    where?: FeePaymentWhereInput
    /**
     * Limit how many FeePayments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeePaymentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * FeePayment upsert
   */
  export type FeePaymentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeePayment
     */
    select?: FeePaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeePayment
     */
    omit?: FeePaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeePaymentInclude<ExtArgs> | null
    /**
     * The filter to search for the FeePayment to update in case it exists.
     */
    where: FeePaymentWhereUniqueInput
    /**
     * In case the FeePayment found by the `where` argument doesn't exist, create a new FeePayment with this data.
     */
    create: XOR<FeePaymentCreateInput, FeePaymentUncheckedCreateInput>
    /**
     * In case the FeePayment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FeePaymentUpdateInput, FeePaymentUncheckedUpdateInput>
  }

  /**
   * FeePayment delete
   */
  export type FeePaymentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeePayment
     */
    select?: FeePaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeePayment
     */
    omit?: FeePaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeePaymentInclude<ExtArgs> | null
    /**
     * Filter which FeePayment to delete.
     */
    where: FeePaymentWhereUniqueInput
  }

  /**
   * FeePayment deleteMany
   */
  export type FeePaymentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FeePayments to delete
     */
    where?: FeePaymentWhereInput
    /**
     * Limit how many FeePayments to delete.
     */
    limit?: number
  }

  /**
   * FeePayment without action
   */
  export type FeePaymentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeePayment
     */
    select?: FeePaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeePayment
     */
    omit?: FeePaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeePaymentInclude<ExtArgs> | null
  }


  /**
   * Model MessMenu
   */

  export type AggregateMessMenu = {
    _count: MessMenuCountAggregateOutputType | null
    _avg: MessMenuAvgAggregateOutputType | null
    _sum: MessMenuSumAggregateOutputType | null
    _min: MessMenuMinAggregateOutputType | null
    _max: MessMenuMaxAggregateOutputType | null
  }

  export type MessMenuAvgAggregateOutputType = {
    id: number | null
  }

  export type MessMenuSumAggregateOutputType = {
    id: number | null
  }

  export type MessMenuMinAggregateOutputType = {
    id: number | null
    day: string | null
    meal_type: string | null
    items: string | null
    createdAt: Date | null
  }

  export type MessMenuMaxAggregateOutputType = {
    id: number | null
    day: string | null
    meal_type: string | null
    items: string | null
    createdAt: Date | null
  }

  export type MessMenuCountAggregateOutputType = {
    id: number
    day: number
    meal_type: number
    items: number
    createdAt: number
    _all: number
  }


  export type MessMenuAvgAggregateInputType = {
    id?: true
  }

  export type MessMenuSumAggregateInputType = {
    id?: true
  }

  export type MessMenuMinAggregateInputType = {
    id?: true
    day?: true
    meal_type?: true
    items?: true
    createdAt?: true
  }

  export type MessMenuMaxAggregateInputType = {
    id?: true
    day?: true
    meal_type?: true
    items?: true
    createdAt?: true
  }

  export type MessMenuCountAggregateInputType = {
    id?: true
    day?: true
    meal_type?: true
    items?: true
    createdAt?: true
    _all?: true
  }

  export type MessMenuAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MessMenu to aggregate.
     */
    where?: MessMenuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MessMenus to fetch.
     */
    orderBy?: MessMenuOrderByWithRelationInput | MessMenuOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MessMenuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MessMenus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MessMenus.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MessMenus
    **/
    _count?: true | MessMenuCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MessMenuAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MessMenuSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MessMenuMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MessMenuMaxAggregateInputType
  }

  export type GetMessMenuAggregateType<T extends MessMenuAggregateArgs> = {
        [P in keyof T & keyof AggregateMessMenu]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMessMenu[P]>
      : GetScalarType<T[P], AggregateMessMenu[P]>
  }




  export type MessMenuGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessMenuWhereInput
    orderBy?: MessMenuOrderByWithAggregationInput | MessMenuOrderByWithAggregationInput[]
    by: MessMenuScalarFieldEnum[] | MessMenuScalarFieldEnum
    having?: MessMenuScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MessMenuCountAggregateInputType | true
    _avg?: MessMenuAvgAggregateInputType
    _sum?: MessMenuSumAggregateInputType
    _min?: MessMenuMinAggregateInputType
    _max?: MessMenuMaxAggregateInputType
  }

  export type MessMenuGroupByOutputType = {
    id: number
    day: string
    meal_type: string
    items: string
    createdAt: Date
    _count: MessMenuCountAggregateOutputType | null
    _avg: MessMenuAvgAggregateOutputType | null
    _sum: MessMenuSumAggregateOutputType | null
    _min: MessMenuMinAggregateOutputType | null
    _max: MessMenuMaxAggregateOutputType | null
  }

  type GetMessMenuGroupByPayload<T extends MessMenuGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MessMenuGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MessMenuGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MessMenuGroupByOutputType[P]>
            : GetScalarType<T[P], MessMenuGroupByOutputType[P]>
        }
      >
    >


  export type MessMenuSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    day?: boolean
    meal_type?: boolean
    items?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["messMenu"]>

  export type MessMenuSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    day?: boolean
    meal_type?: boolean
    items?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["messMenu"]>

  export type MessMenuSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    day?: boolean
    meal_type?: boolean
    items?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["messMenu"]>

  export type MessMenuSelectScalar = {
    id?: boolean
    day?: boolean
    meal_type?: boolean
    items?: boolean
    createdAt?: boolean
  }

  export type MessMenuOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "day" | "meal_type" | "items" | "createdAt", ExtArgs["result"]["messMenu"]>

  export type $MessMenuPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MessMenu"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      day: string
      meal_type: string
      items: string
      createdAt: Date
    }, ExtArgs["result"]["messMenu"]>
    composites: {}
  }

  type MessMenuGetPayload<S extends boolean | null | undefined | MessMenuDefaultArgs> = $Result.GetResult<Prisma.$MessMenuPayload, S>

  type MessMenuCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MessMenuFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MessMenuCountAggregateInputType | true
    }

  export interface MessMenuDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MessMenu'], meta: { name: 'MessMenu' } }
    /**
     * Find zero or one MessMenu that matches the filter.
     * @param {MessMenuFindUniqueArgs} args - Arguments to find a MessMenu
     * @example
     * // Get one MessMenu
     * const messMenu = await prisma.messMenu.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MessMenuFindUniqueArgs>(args: SelectSubset<T, MessMenuFindUniqueArgs<ExtArgs>>): Prisma__MessMenuClient<$Result.GetResult<Prisma.$MessMenuPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one MessMenu that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MessMenuFindUniqueOrThrowArgs} args - Arguments to find a MessMenu
     * @example
     * // Get one MessMenu
     * const messMenu = await prisma.messMenu.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MessMenuFindUniqueOrThrowArgs>(args: SelectSubset<T, MessMenuFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MessMenuClient<$Result.GetResult<Prisma.$MessMenuPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MessMenu that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessMenuFindFirstArgs} args - Arguments to find a MessMenu
     * @example
     * // Get one MessMenu
     * const messMenu = await prisma.messMenu.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MessMenuFindFirstArgs>(args?: SelectSubset<T, MessMenuFindFirstArgs<ExtArgs>>): Prisma__MessMenuClient<$Result.GetResult<Prisma.$MessMenuPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MessMenu that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessMenuFindFirstOrThrowArgs} args - Arguments to find a MessMenu
     * @example
     * // Get one MessMenu
     * const messMenu = await prisma.messMenu.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MessMenuFindFirstOrThrowArgs>(args?: SelectSubset<T, MessMenuFindFirstOrThrowArgs<ExtArgs>>): Prisma__MessMenuClient<$Result.GetResult<Prisma.$MessMenuPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more MessMenus that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessMenuFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MessMenus
     * const messMenus = await prisma.messMenu.findMany()
     * 
     * // Get first 10 MessMenus
     * const messMenus = await prisma.messMenu.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const messMenuWithIdOnly = await prisma.messMenu.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MessMenuFindManyArgs>(args?: SelectSubset<T, MessMenuFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessMenuPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a MessMenu.
     * @param {MessMenuCreateArgs} args - Arguments to create a MessMenu.
     * @example
     * // Create one MessMenu
     * const MessMenu = await prisma.messMenu.create({
     *   data: {
     *     // ... data to create a MessMenu
     *   }
     * })
     * 
     */
    create<T extends MessMenuCreateArgs>(args: SelectSubset<T, MessMenuCreateArgs<ExtArgs>>): Prisma__MessMenuClient<$Result.GetResult<Prisma.$MessMenuPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many MessMenus.
     * @param {MessMenuCreateManyArgs} args - Arguments to create many MessMenus.
     * @example
     * // Create many MessMenus
     * const messMenu = await prisma.messMenu.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MessMenuCreateManyArgs>(args?: SelectSubset<T, MessMenuCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MessMenus and returns the data saved in the database.
     * @param {MessMenuCreateManyAndReturnArgs} args - Arguments to create many MessMenus.
     * @example
     * // Create many MessMenus
     * const messMenu = await prisma.messMenu.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MessMenus and only return the `id`
     * const messMenuWithIdOnly = await prisma.messMenu.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MessMenuCreateManyAndReturnArgs>(args?: SelectSubset<T, MessMenuCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessMenuPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a MessMenu.
     * @param {MessMenuDeleteArgs} args - Arguments to delete one MessMenu.
     * @example
     * // Delete one MessMenu
     * const MessMenu = await prisma.messMenu.delete({
     *   where: {
     *     // ... filter to delete one MessMenu
     *   }
     * })
     * 
     */
    delete<T extends MessMenuDeleteArgs>(args: SelectSubset<T, MessMenuDeleteArgs<ExtArgs>>): Prisma__MessMenuClient<$Result.GetResult<Prisma.$MessMenuPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one MessMenu.
     * @param {MessMenuUpdateArgs} args - Arguments to update one MessMenu.
     * @example
     * // Update one MessMenu
     * const messMenu = await prisma.messMenu.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MessMenuUpdateArgs>(args: SelectSubset<T, MessMenuUpdateArgs<ExtArgs>>): Prisma__MessMenuClient<$Result.GetResult<Prisma.$MessMenuPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more MessMenus.
     * @param {MessMenuDeleteManyArgs} args - Arguments to filter MessMenus to delete.
     * @example
     * // Delete a few MessMenus
     * const { count } = await prisma.messMenu.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MessMenuDeleteManyArgs>(args?: SelectSubset<T, MessMenuDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MessMenus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessMenuUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MessMenus
     * const messMenu = await prisma.messMenu.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MessMenuUpdateManyArgs>(args: SelectSubset<T, MessMenuUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MessMenus and returns the data updated in the database.
     * @param {MessMenuUpdateManyAndReturnArgs} args - Arguments to update many MessMenus.
     * @example
     * // Update many MessMenus
     * const messMenu = await prisma.messMenu.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more MessMenus and only return the `id`
     * const messMenuWithIdOnly = await prisma.messMenu.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MessMenuUpdateManyAndReturnArgs>(args: SelectSubset<T, MessMenuUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessMenuPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one MessMenu.
     * @param {MessMenuUpsertArgs} args - Arguments to update or create a MessMenu.
     * @example
     * // Update or create a MessMenu
     * const messMenu = await prisma.messMenu.upsert({
     *   create: {
     *     // ... data to create a MessMenu
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MessMenu we want to update
     *   }
     * })
     */
    upsert<T extends MessMenuUpsertArgs>(args: SelectSubset<T, MessMenuUpsertArgs<ExtArgs>>): Prisma__MessMenuClient<$Result.GetResult<Prisma.$MessMenuPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of MessMenus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessMenuCountArgs} args - Arguments to filter MessMenus to count.
     * @example
     * // Count the number of MessMenus
     * const count = await prisma.messMenu.count({
     *   where: {
     *     // ... the filter for the MessMenus we want to count
     *   }
     * })
    **/
    count<T extends MessMenuCountArgs>(
      args?: Subset<T, MessMenuCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MessMenuCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MessMenu.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessMenuAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MessMenuAggregateArgs>(args: Subset<T, MessMenuAggregateArgs>): Prisma.PrismaPromise<GetMessMenuAggregateType<T>>

    /**
     * Group by MessMenu.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessMenuGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MessMenuGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MessMenuGroupByArgs['orderBy'] }
        : { orderBy?: MessMenuGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MessMenuGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMessMenuGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MessMenu model
   */
  readonly fields: MessMenuFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MessMenu.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MessMenuClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MessMenu model
   */ 
  interface MessMenuFieldRefs {
    readonly id: FieldRef<"MessMenu", 'Int'>
    readonly day: FieldRef<"MessMenu", 'String'>
    readonly meal_type: FieldRef<"MessMenu", 'String'>
    readonly items: FieldRef<"MessMenu", 'String'>
    readonly createdAt: FieldRef<"MessMenu", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * MessMenu findUnique
   */
  export type MessMenuFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessMenu
     */
    select?: MessMenuSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessMenu
     */
    omit?: MessMenuOmit<ExtArgs> | null
    /**
     * Filter, which MessMenu to fetch.
     */
    where: MessMenuWhereUniqueInput
  }

  /**
   * MessMenu findUniqueOrThrow
   */
  export type MessMenuFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessMenu
     */
    select?: MessMenuSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessMenu
     */
    omit?: MessMenuOmit<ExtArgs> | null
    /**
     * Filter, which MessMenu to fetch.
     */
    where: MessMenuWhereUniqueInput
  }

  /**
   * MessMenu findFirst
   */
  export type MessMenuFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessMenu
     */
    select?: MessMenuSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessMenu
     */
    omit?: MessMenuOmit<ExtArgs> | null
    /**
     * Filter, which MessMenu to fetch.
     */
    where?: MessMenuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MessMenus to fetch.
     */
    orderBy?: MessMenuOrderByWithRelationInput | MessMenuOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MessMenus.
     */
    cursor?: MessMenuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MessMenus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MessMenus.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MessMenus.
     */
    distinct?: MessMenuScalarFieldEnum | MessMenuScalarFieldEnum[]
  }

  /**
   * MessMenu findFirstOrThrow
   */
  export type MessMenuFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessMenu
     */
    select?: MessMenuSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessMenu
     */
    omit?: MessMenuOmit<ExtArgs> | null
    /**
     * Filter, which MessMenu to fetch.
     */
    where?: MessMenuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MessMenus to fetch.
     */
    orderBy?: MessMenuOrderByWithRelationInput | MessMenuOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MessMenus.
     */
    cursor?: MessMenuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MessMenus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MessMenus.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MessMenus.
     */
    distinct?: MessMenuScalarFieldEnum | MessMenuScalarFieldEnum[]
  }

  /**
   * MessMenu findMany
   */
  export type MessMenuFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessMenu
     */
    select?: MessMenuSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessMenu
     */
    omit?: MessMenuOmit<ExtArgs> | null
    /**
     * Filter, which MessMenus to fetch.
     */
    where?: MessMenuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MessMenus to fetch.
     */
    orderBy?: MessMenuOrderByWithRelationInput | MessMenuOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MessMenus.
     */
    cursor?: MessMenuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MessMenus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MessMenus.
     */
    skip?: number
    distinct?: MessMenuScalarFieldEnum | MessMenuScalarFieldEnum[]
  }

  /**
   * MessMenu create
   */
  export type MessMenuCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessMenu
     */
    select?: MessMenuSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessMenu
     */
    omit?: MessMenuOmit<ExtArgs> | null
    /**
     * The data needed to create a MessMenu.
     */
    data: XOR<MessMenuCreateInput, MessMenuUncheckedCreateInput>
  }

  /**
   * MessMenu createMany
   */
  export type MessMenuCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MessMenus.
     */
    data: MessMenuCreateManyInput | MessMenuCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MessMenu createManyAndReturn
   */
  export type MessMenuCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessMenu
     */
    select?: MessMenuSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MessMenu
     */
    omit?: MessMenuOmit<ExtArgs> | null
    /**
     * The data used to create many MessMenus.
     */
    data: MessMenuCreateManyInput | MessMenuCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MessMenu update
   */
  export type MessMenuUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessMenu
     */
    select?: MessMenuSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessMenu
     */
    omit?: MessMenuOmit<ExtArgs> | null
    /**
     * The data needed to update a MessMenu.
     */
    data: XOR<MessMenuUpdateInput, MessMenuUncheckedUpdateInput>
    /**
     * Choose, which MessMenu to update.
     */
    where: MessMenuWhereUniqueInput
  }

  /**
   * MessMenu updateMany
   */
  export type MessMenuUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MessMenus.
     */
    data: XOR<MessMenuUpdateManyMutationInput, MessMenuUncheckedUpdateManyInput>
    /**
     * Filter which MessMenus to update
     */
    where?: MessMenuWhereInput
    /**
     * Limit how many MessMenus to update.
     */
    limit?: number
  }

  /**
   * MessMenu updateManyAndReturn
   */
  export type MessMenuUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessMenu
     */
    select?: MessMenuSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MessMenu
     */
    omit?: MessMenuOmit<ExtArgs> | null
    /**
     * The data used to update MessMenus.
     */
    data: XOR<MessMenuUpdateManyMutationInput, MessMenuUncheckedUpdateManyInput>
    /**
     * Filter which MessMenus to update
     */
    where?: MessMenuWhereInput
    /**
     * Limit how many MessMenus to update.
     */
    limit?: number
  }

  /**
   * MessMenu upsert
   */
  export type MessMenuUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessMenu
     */
    select?: MessMenuSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessMenu
     */
    omit?: MessMenuOmit<ExtArgs> | null
    /**
     * The filter to search for the MessMenu to update in case it exists.
     */
    where: MessMenuWhereUniqueInput
    /**
     * In case the MessMenu found by the `where` argument doesn't exist, create a new MessMenu with this data.
     */
    create: XOR<MessMenuCreateInput, MessMenuUncheckedCreateInput>
    /**
     * In case the MessMenu was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MessMenuUpdateInput, MessMenuUncheckedUpdateInput>
  }

  /**
   * MessMenu delete
   */
  export type MessMenuDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessMenu
     */
    select?: MessMenuSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessMenu
     */
    omit?: MessMenuOmit<ExtArgs> | null
    /**
     * Filter which MessMenu to delete.
     */
    where: MessMenuWhereUniqueInput
  }

  /**
   * MessMenu deleteMany
   */
  export type MessMenuDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MessMenus to delete
     */
    where?: MessMenuWhereInput
    /**
     * Limit how many MessMenus to delete.
     */
    limit?: number
  }

  /**
   * MessMenu without action
   */
  export type MessMenuDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessMenu
     */
    select?: MessMenuSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessMenu
     */
    omit?: MessMenuOmit<ExtArgs> | null
  }


  /**
   * Model HostelCommittee
   */

  export type AggregateHostelCommittee = {
    _count: HostelCommitteeCountAggregateOutputType | null
    _avg: HostelCommitteeAvgAggregateOutputType | null
    _sum: HostelCommitteeSumAggregateOutputType | null
    _min: HostelCommitteeMinAggregateOutputType | null
    _max: HostelCommitteeMaxAggregateOutputType | null
  }

  export type HostelCommitteeAvgAggregateOutputType = {
    id: number | null
  }

  export type HostelCommitteeSumAggregateOutputType = {
    id: number | null
  }

  export type HostelCommitteeMinAggregateOutputType = {
    id: number | null
    name: string | null
    position: string | null
    contact_number: string | null
    date_of_join: Date | null
    email: string | null
    gender: $Enums.GenderEnum | null
  }

  export type HostelCommitteeMaxAggregateOutputType = {
    id: number | null
    name: string | null
    position: string | null
    contact_number: string | null
    date_of_join: Date | null
    email: string | null
    gender: $Enums.GenderEnum | null
  }

  export type HostelCommitteeCountAggregateOutputType = {
    id: number
    name: number
    position: number
    contact_number: number
    date_of_join: number
    email: number
    gender: number
    _all: number
  }


  export type HostelCommitteeAvgAggregateInputType = {
    id?: true
  }

  export type HostelCommitteeSumAggregateInputType = {
    id?: true
  }

  export type HostelCommitteeMinAggregateInputType = {
    id?: true
    name?: true
    position?: true
    contact_number?: true
    date_of_join?: true
    email?: true
    gender?: true
  }

  export type HostelCommitteeMaxAggregateInputType = {
    id?: true
    name?: true
    position?: true
    contact_number?: true
    date_of_join?: true
    email?: true
    gender?: true
  }

  export type HostelCommitteeCountAggregateInputType = {
    id?: true
    name?: true
    position?: true
    contact_number?: true
    date_of_join?: true
    email?: true
    gender?: true
    _all?: true
  }

  export type HostelCommitteeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which HostelCommittee to aggregate.
     */
    where?: HostelCommitteeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HostelCommittees to fetch.
     */
    orderBy?: HostelCommitteeOrderByWithRelationInput | HostelCommitteeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: HostelCommitteeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HostelCommittees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HostelCommittees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned HostelCommittees
    **/
    _count?: true | HostelCommitteeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: HostelCommitteeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: HostelCommitteeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HostelCommitteeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HostelCommitteeMaxAggregateInputType
  }

  export type GetHostelCommitteeAggregateType<T extends HostelCommitteeAggregateArgs> = {
        [P in keyof T & keyof AggregateHostelCommittee]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHostelCommittee[P]>
      : GetScalarType<T[P], AggregateHostelCommittee[P]>
  }




  export type HostelCommitteeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HostelCommitteeWhereInput
    orderBy?: HostelCommitteeOrderByWithAggregationInput | HostelCommitteeOrderByWithAggregationInput[]
    by: HostelCommitteeScalarFieldEnum[] | HostelCommitteeScalarFieldEnum
    having?: HostelCommitteeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HostelCommitteeCountAggregateInputType | true
    _avg?: HostelCommitteeAvgAggregateInputType
    _sum?: HostelCommitteeSumAggregateInputType
    _min?: HostelCommitteeMinAggregateInputType
    _max?: HostelCommitteeMaxAggregateInputType
  }

  export type HostelCommitteeGroupByOutputType = {
    id: number
    name: string
    position: string
    contact_number: string
    date_of_join: Date
    email: string | null
    gender: $Enums.GenderEnum
    _count: HostelCommitteeCountAggregateOutputType | null
    _avg: HostelCommitteeAvgAggregateOutputType | null
    _sum: HostelCommitteeSumAggregateOutputType | null
    _min: HostelCommitteeMinAggregateOutputType | null
    _max: HostelCommitteeMaxAggregateOutputType | null
  }

  type GetHostelCommitteeGroupByPayload<T extends HostelCommitteeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<HostelCommitteeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HostelCommitteeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HostelCommitteeGroupByOutputType[P]>
            : GetScalarType<T[P], HostelCommitteeGroupByOutputType[P]>
        }
      >
    >


  export type HostelCommitteeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    position?: boolean
    contact_number?: boolean
    date_of_join?: boolean
    email?: boolean
    gender?: boolean
  }, ExtArgs["result"]["hostelCommittee"]>

  export type HostelCommitteeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    position?: boolean
    contact_number?: boolean
    date_of_join?: boolean
    email?: boolean
    gender?: boolean
  }, ExtArgs["result"]["hostelCommittee"]>

  export type HostelCommitteeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    position?: boolean
    contact_number?: boolean
    date_of_join?: boolean
    email?: boolean
    gender?: boolean
  }, ExtArgs["result"]["hostelCommittee"]>

  export type HostelCommitteeSelectScalar = {
    id?: boolean
    name?: boolean
    position?: boolean
    contact_number?: boolean
    date_of_join?: boolean
    email?: boolean
    gender?: boolean
  }

  export type HostelCommitteeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "position" | "contact_number" | "date_of_join" | "email" | "gender", ExtArgs["result"]["hostelCommittee"]>

  export type $HostelCommitteePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "HostelCommittee"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      position: string
      contact_number: string
      date_of_join: Date
      email: string | null
      gender: $Enums.GenderEnum
    }, ExtArgs["result"]["hostelCommittee"]>
    composites: {}
  }

  type HostelCommitteeGetPayload<S extends boolean | null | undefined | HostelCommitteeDefaultArgs> = $Result.GetResult<Prisma.$HostelCommitteePayload, S>

  type HostelCommitteeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<HostelCommitteeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: HostelCommitteeCountAggregateInputType | true
    }

  export interface HostelCommitteeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['HostelCommittee'], meta: { name: 'HostelCommittee' } }
    /**
     * Find zero or one HostelCommittee that matches the filter.
     * @param {HostelCommitteeFindUniqueArgs} args - Arguments to find a HostelCommittee
     * @example
     * // Get one HostelCommittee
     * const hostelCommittee = await prisma.hostelCommittee.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends HostelCommitteeFindUniqueArgs>(args: SelectSubset<T, HostelCommitteeFindUniqueArgs<ExtArgs>>): Prisma__HostelCommitteeClient<$Result.GetResult<Prisma.$HostelCommitteePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one HostelCommittee that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {HostelCommitteeFindUniqueOrThrowArgs} args - Arguments to find a HostelCommittee
     * @example
     * // Get one HostelCommittee
     * const hostelCommittee = await prisma.hostelCommittee.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends HostelCommitteeFindUniqueOrThrowArgs>(args: SelectSubset<T, HostelCommitteeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__HostelCommitteeClient<$Result.GetResult<Prisma.$HostelCommitteePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first HostelCommittee that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HostelCommitteeFindFirstArgs} args - Arguments to find a HostelCommittee
     * @example
     * // Get one HostelCommittee
     * const hostelCommittee = await prisma.hostelCommittee.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends HostelCommitteeFindFirstArgs>(args?: SelectSubset<T, HostelCommitteeFindFirstArgs<ExtArgs>>): Prisma__HostelCommitteeClient<$Result.GetResult<Prisma.$HostelCommitteePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first HostelCommittee that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HostelCommitteeFindFirstOrThrowArgs} args - Arguments to find a HostelCommittee
     * @example
     * // Get one HostelCommittee
     * const hostelCommittee = await prisma.hostelCommittee.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends HostelCommitteeFindFirstOrThrowArgs>(args?: SelectSubset<T, HostelCommitteeFindFirstOrThrowArgs<ExtArgs>>): Prisma__HostelCommitteeClient<$Result.GetResult<Prisma.$HostelCommitteePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more HostelCommittees that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HostelCommitteeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all HostelCommittees
     * const hostelCommittees = await prisma.hostelCommittee.findMany()
     * 
     * // Get first 10 HostelCommittees
     * const hostelCommittees = await prisma.hostelCommittee.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const hostelCommitteeWithIdOnly = await prisma.hostelCommittee.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends HostelCommitteeFindManyArgs>(args?: SelectSubset<T, HostelCommitteeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HostelCommitteePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a HostelCommittee.
     * @param {HostelCommitteeCreateArgs} args - Arguments to create a HostelCommittee.
     * @example
     * // Create one HostelCommittee
     * const HostelCommittee = await prisma.hostelCommittee.create({
     *   data: {
     *     // ... data to create a HostelCommittee
     *   }
     * })
     * 
     */
    create<T extends HostelCommitteeCreateArgs>(args: SelectSubset<T, HostelCommitteeCreateArgs<ExtArgs>>): Prisma__HostelCommitteeClient<$Result.GetResult<Prisma.$HostelCommitteePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many HostelCommittees.
     * @param {HostelCommitteeCreateManyArgs} args - Arguments to create many HostelCommittees.
     * @example
     * // Create many HostelCommittees
     * const hostelCommittee = await prisma.hostelCommittee.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends HostelCommitteeCreateManyArgs>(args?: SelectSubset<T, HostelCommitteeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many HostelCommittees and returns the data saved in the database.
     * @param {HostelCommitteeCreateManyAndReturnArgs} args - Arguments to create many HostelCommittees.
     * @example
     * // Create many HostelCommittees
     * const hostelCommittee = await prisma.hostelCommittee.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many HostelCommittees and only return the `id`
     * const hostelCommitteeWithIdOnly = await prisma.hostelCommittee.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends HostelCommitteeCreateManyAndReturnArgs>(args?: SelectSubset<T, HostelCommitteeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HostelCommitteePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a HostelCommittee.
     * @param {HostelCommitteeDeleteArgs} args - Arguments to delete one HostelCommittee.
     * @example
     * // Delete one HostelCommittee
     * const HostelCommittee = await prisma.hostelCommittee.delete({
     *   where: {
     *     // ... filter to delete one HostelCommittee
     *   }
     * })
     * 
     */
    delete<T extends HostelCommitteeDeleteArgs>(args: SelectSubset<T, HostelCommitteeDeleteArgs<ExtArgs>>): Prisma__HostelCommitteeClient<$Result.GetResult<Prisma.$HostelCommitteePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one HostelCommittee.
     * @param {HostelCommitteeUpdateArgs} args - Arguments to update one HostelCommittee.
     * @example
     * // Update one HostelCommittee
     * const hostelCommittee = await prisma.hostelCommittee.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends HostelCommitteeUpdateArgs>(args: SelectSubset<T, HostelCommitteeUpdateArgs<ExtArgs>>): Prisma__HostelCommitteeClient<$Result.GetResult<Prisma.$HostelCommitteePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more HostelCommittees.
     * @param {HostelCommitteeDeleteManyArgs} args - Arguments to filter HostelCommittees to delete.
     * @example
     * // Delete a few HostelCommittees
     * const { count } = await prisma.hostelCommittee.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends HostelCommitteeDeleteManyArgs>(args?: SelectSubset<T, HostelCommitteeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more HostelCommittees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HostelCommitteeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many HostelCommittees
     * const hostelCommittee = await prisma.hostelCommittee.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends HostelCommitteeUpdateManyArgs>(args: SelectSubset<T, HostelCommitteeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more HostelCommittees and returns the data updated in the database.
     * @param {HostelCommitteeUpdateManyAndReturnArgs} args - Arguments to update many HostelCommittees.
     * @example
     * // Update many HostelCommittees
     * const hostelCommittee = await prisma.hostelCommittee.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more HostelCommittees and only return the `id`
     * const hostelCommitteeWithIdOnly = await prisma.hostelCommittee.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends HostelCommitteeUpdateManyAndReturnArgs>(args: SelectSubset<T, HostelCommitteeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HostelCommitteePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one HostelCommittee.
     * @param {HostelCommitteeUpsertArgs} args - Arguments to update or create a HostelCommittee.
     * @example
     * // Update or create a HostelCommittee
     * const hostelCommittee = await prisma.hostelCommittee.upsert({
     *   create: {
     *     // ... data to create a HostelCommittee
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the HostelCommittee we want to update
     *   }
     * })
     */
    upsert<T extends HostelCommitteeUpsertArgs>(args: SelectSubset<T, HostelCommitteeUpsertArgs<ExtArgs>>): Prisma__HostelCommitteeClient<$Result.GetResult<Prisma.$HostelCommitteePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of HostelCommittees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HostelCommitteeCountArgs} args - Arguments to filter HostelCommittees to count.
     * @example
     * // Count the number of HostelCommittees
     * const count = await prisma.hostelCommittee.count({
     *   where: {
     *     // ... the filter for the HostelCommittees we want to count
     *   }
     * })
    **/
    count<T extends HostelCommitteeCountArgs>(
      args?: Subset<T, HostelCommitteeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HostelCommitteeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a HostelCommittee.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HostelCommitteeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HostelCommitteeAggregateArgs>(args: Subset<T, HostelCommitteeAggregateArgs>): Prisma.PrismaPromise<GetHostelCommitteeAggregateType<T>>

    /**
     * Group by HostelCommittee.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HostelCommitteeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HostelCommitteeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HostelCommitteeGroupByArgs['orderBy'] }
        : { orderBy?: HostelCommitteeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HostelCommitteeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHostelCommitteeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the HostelCommittee model
   */
  readonly fields: HostelCommitteeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for HostelCommittee.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__HostelCommitteeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the HostelCommittee model
   */ 
  interface HostelCommitteeFieldRefs {
    readonly id: FieldRef<"HostelCommittee", 'Int'>
    readonly name: FieldRef<"HostelCommittee", 'String'>
    readonly position: FieldRef<"HostelCommittee", 'String'>
    readonly contact_number: FieldRef<"HostelCommittee", 'String'>
    readonly date_of_join: FieldRef<"HostelCommittee", 'DateTime'>
    readonly email: FieldRef<"HostelCommittee", 'String'>
    readonly gender: FieldRef<"HostelCommittee", 'GenderEnum'>
  }
    

  // Custom InputTypes
  /**
   * HostelCommittee findUnique
   */
  export type HostelCommitteeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HostelCommittee
     */
    select?: HostelCommitteeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HostelCommittee
     */
    omit?: HostelCommitteeOmit<ExtArgs> | null
    /**
     * Filter, which HostelCommittee to fetch.
     */
    where: HostelCommitteeWhereUniqueInput
  }

  /**
   * HostelCommittee findUniqueOrThrow
   */
  export type HostelCommitteeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HostelCommittee
     */
    select?: HostelCommitteeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HostelCommittee
     */
    omit?: HostelCommitteeOmit<ExtArgs> | null
    /**
     * Filter, which HostelCommittee to fetch.
     */
    where: HostelCommitteeWhereUniqueInput
  }

  /**
   * HostelCommittee findFirst
   */
  export type HostelCommitteeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HostelCommittee
     */
    select?: HostelCommitteeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HostelCommittee
     */
    omit?: HostelCommitteeOmit<ExtArgs> | null
    /**
     * Filter, which HostelCommittee to fetch.
     */
    where?: HostelCommitteeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HostelCommittees to fetch.
     */
    orderBy?: HostelCommitteeOrderByWithRelationInput | HostelCommitteeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HostelCommittees.
     */
    cursor?: HostelCommitteeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HostelCommittees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HostelCommittees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HostelCommittees.
     */
    distinct?: HostelCommitteeScalarFieldEnum | HostelCommitteeScalarFieldEnum[]
  }

  /**
   * HostelCommittee findFirstOrThrow
   */
  export type HostelCommitteeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HostelCommittee
     */
    select?: HostelCommitteeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HostelCommittee
     */
    omit?: HostelCommitteeOmit<ExtArgs> | null
    /**
     * Filter, which HostelCommittee to fetch.
     */
    where?: HostelCommitteeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HostelCommittees to fetch.
     */
    orderBy?: HostelCommitteeOrderByWithRelationInput | HostelCommitteeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HostelCommittees.
     */
    cursor?: HostelCommitteeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HostelCommittees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HostelCommittees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HostelCommittees.
     */
    distinct?: HostelCommitteeScalarFieldEnum | HostelCommitteeScalarFieldEnum[]
  }

  /**
   * HostelCommittee findMany
   */
  export type HostelCommitteeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HostelCommittee
     */
    select?: HostelCommitteeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HostelCommittee
     */
    omit?: HostelCommitteeOmit<ExtArgs> | null
    /**
     * Filter, which HostelCommittees to fetch.
     */
    where?: HostelCommitteeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HostelCommittees to fetch.
     */
    orderBy?: HostelCommitteeOrderByWithRelationInput | HostelCommitteeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing HostelCommittees.
     */
    cursor?: HostelCommitteeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HostelCommittees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HostelCommittees.
     */
    skip?: number
    distinct?: HostelCommitteeScalarFieldEnum | HostelCommitteeScalarFieldEnum[]
  }

  /**
   * HostelCommittee create
   */
  export type HostelCommitteeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HostelCommittee
     */
    select?: HostelCommitteeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HostelCommittee
     */
    omit?: HostelCommitteeOmit<ExtArgs> | null
    /**
     * The data needed to create a HostelCommittee.
     */
    data: XOR<HostelCommitteeCreateInput, HostelCommitteeUncheckedCreateInput>
  }

  /**
   * HostelCommittee createMany
   */
  export type HostelCommitteeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many HostelCommittees.
     */
    data: HostelCommitteeCreateManyInput | HostelCommitteeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * HostelCommittee createManyAndReturn
   */
  export type HostelCommitteeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HostelCommittee
     */
    select?: HostelCommitteeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the HostelCommittee
     */
    omit?: HostelCommitteeOmit<ExtArgs> | null
    /**
     * The data used to create many HostelCommittees.
     */
    data: HostelCommitteeCreateManyInput | HostelCommitteeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * HostelCommittee update
   */
  export type HostelCommitteeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HostelCommittee
     */
    select?: HostelCommitteeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HostelCommittee
     */
    omit?: HostelCommitteeOmit<ExtArgs> | null
    /**
     * The data needed to update a HostelCommittee.
     */
    data: XOR<HostelCommitteeUpdateInput, HostelCommitteeUncheckedUpdateInput>
    /**
     * Choose, which HostelCommittee to update.
     */
    where: HostelCommitteeWhereUniqueInput
  }

  /**
   * HostelCommittee updateMany
   */
  export type HostelCommitteeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update HostelCommittees.
     */
    data: XOR<HostelCommitteeUpdateManyMutationInput, HostelCommitteeUncheckedUpdateManyInput>
    /**
     * Filter which HostelCommittees to update
     */
    where?: HostelCommitteeWhereInput
    /**
     * Limit how many HostelCommittees to update.
     */
    limit?: number
  }

  /**
   * HostelCommittee updateManyAndReturn
   */
  export type HostelCommitteeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HostelCommittee
     */
    select?: HostelCommitteeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the HostelCommittee
     */
    omit?: HostelCommitteeOmit<ExtArgs> | null
    /**
     * The data used to update HostelCommittees.
     */
    data: XOR<HostelCommitteeUpdateManyMutationInput, HostelCommitteeUncheckedUpdateManyInput>
    /**
     * Filter which HostelCommittees to update
     */
    where?: HostelCommitteeWhereInput
    /**
     * Limit how many HostelCommittees to update.
     */
    limit?: number
  }

  /**
   * HostelCommittee upsert
   */
  export type HostelCommitteeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HostelCommittee
     */
    select?: HostelCommitteeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HostelCommittee
     */
    omit?: HostelCommitteeOmit<ExtArgs> | null
    /**
     * The filter to search for the HostelCommittee to update in case it exists.
     */
    where: HostelCommitteeWhereUniqueInput
    /**
     * In case the HostelCommittee found by the `where` argument doesn't exist, create a new HostelCommittee with this data.
     */
    create: XOR<HostelCommitteeCreateInput, HostelCommitteeUncheckedCreateInput>
    /**
     * In case the HostelCommittee was found with the provided `where` argument, update it with this data.
     */
    update: XOR<HostelCommitteeUpdateInput, HostelCommitteeUncheckedUpdateInput>
  }

  /**
   * HostelCommittee delete
   */
  export type HostelCommitteeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HostelCommittee
     */
    select?: HostelCommitteeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HostelCommittee
     */
    omit?: HostelCommitteeOmit<ExtArgs> | null
    /**
     * Filter which HostelCommittee to delete.
     */
    where: HostelCommitteeWhereUniqueInput
  }

  /**
   * HostelCommittee deleteMany
   */
  export type HostelCommitteeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which HostelCommittees to delete
     */
    where?: HostelCommitteeWhereInput
    /**
     * Limit how many HostelCommittees to delete.
     */
    limit?: number
  }

  /**
   * HostelCommittee without action
   */
  export type HostelCommitteeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HostelCommittee
     */
    select?: HostelCommitteeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HostelCommittee
     */
    omit?: HostelCommitteeOmit<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const AdminScalarFieldEnum: {
    id: 'id',
    name: 'name',
    password: 'password',
    email: 'email',
    room_count: 'room_count'
  };

  export type AdminScalarFieldEnum = (typeof AdminScalarFieldEnum)[keyof typeof AdminScalarFieldEnum]


  export const RoleScalarFieldEnum: {
    role_id: 'role_id',
    role: 'role'
  };

  export type RoleScalarFieldEnum = (typeof RoleScalarFieldEnum)[keyof typeof RoleScalarFieldEnum]


  export const StaffScalarFieldEnum: {
    id: 'id',
    name: 'name',
    contact_number: 'contact_number',
    date_of_join: 'date_of_join',
    salary: 'salary',
    gender: 'gender',
    age: 'age',
    roll_id: 'roll_id'
  };

  export type StaffScalarFieldEnum = (typeof StaffScalarFieldEnum)[keyof typeof StaffScalarFieldEnum]


  export const Student1ScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    password: 'password',
    gender: 'gender',
    age: 'age',
    role: 'role'
  };

  export type Student1ScalarFieldEnum = (typeof Student1ScalarFieldEnum)[keyof typeof Student1ScalarFieldEnum]


  export const Student2ScalarFieldEnum: {
    student1_id: 'student1_id',
    mobile_number: 'mobile_number',
    address: 'address',
    emergency_number: 'emergency_number',
    parent_contact: 'parent_contact',
    roll_number: 'roll_number'
  };

  export type Student2ScalarFieldEnum = (typeof Student2ScalarFieldEnum)[keyof typeof Student2ScalarFieldEnum]


  export const CollegeScalarFieldEnum: {
    roll_number: 'roll_number',
    college_name: 'college_name'
  };

  export type CollegeScalarFieldEnum = (typeof CollegeScalarFieldEnum)[keyof typeof CollegeScalarFieldEnum]


  export const RoomScalarFieldEnum: {
    id: 'id',
    student_id: 'student_id',
    room_id: 'room_id'
  };

  export type RoomScalarFieldEnum = (typeof RoomScalarFieldEnum)[keyof typeof RoomScalarFieldEnum]


  export const FeedbackScalarFieldEnum: {
    id: 'id',
    student1_id: 'student1_id',
    issue: 'issue',
    room_number: 'room_number',
    createdAt: 'createdAt'
  };

  export type FeedbackScalarFieldEnum = (typeof FeedbackScalarFieldEnum)[keyof typeof FeedbackScalarFieldEnum]


  export const GatePassScalarFieldEnum: {
    id: 'id',
    reason: 'reason',
    leave_date: 'leave_date',
    arrival_date: 'arrival_date',
    approval: 'approval',
    student1_id: 'student1_id',
    createdAt: 'createdAt'
  };

  export type GatePassScalarFieldEnum = (typeof GatePassScalarFieldEnum)[keyof typeof GatePassScalarFieldEnum]


  export const FeePaymentScalarFieldEnum: {
    id: 'id',
    semester: 'semester',
    date_of_payment: 'date_of_payment',
    mode_of_payment: 'mode_of_payment',
    student_id: 'student_id'
  };

  export type FeePaymentScalarFieldEnum = (typeof FeePaymentScalarFieldEnum)[keyof typeof FeePaymentScalarFieldEnum]


  export const MessMenuScalarFieldEnum: {
    id: 'id',
    day: 'day',
    meal_type: 'meal_type',
    items: 'items',
    createdAt: 'createdAt'
  };

  export type MessMenuScalarFieldEnum = (typeof MessMenuScalarFieldEnum)[keyof typeof MessMenuScalarFieldEnum]


  export const HostelCommitteeScalarFieldEnum: {
    id: 'id',
    name: 'name',
    position: 'position',
    contact_number: 'contact_number',
    date_of_join: 'date_of_join',
    email: 'email',
    gender: 'gender'
  };

  export type HostelCommitteeScalarFieldEnum = (typeof HostelCommitteeScalarFieldEnum)[keyof typeof HostelCommitteeScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'RoleEnum'
   */
  export type EnumRoleEnumFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RoleEnum'>
    


  /**
   * Reference to a field of type 'RoleEnum[]'
   */
  export type ListEnumRoleEnumFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RoleEnum[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Decimal[]'
   */
  export type ListDecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal[]'>
    


  /**
   * Reference to a field of type 'GenderEnum'
   */
  export type EnumGenderEnumFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'GenderEnum'>
    


  /**
   * Reference to a field of type 'GenderEnum[]'
   */
  export type ListEnumGenderEnumFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'GenderEnum[]'>
    


  /**
   * Reference to a field of type 'ApprovalEnum'
   */
  export type EnumApprovalEnumFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ApprovalEnum'>
    


  /**
   * Reference to a field of type 'ApprovalEnum[]'
   */
  export type ListEnumApprovalEnumFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ApprovalEnum[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type AdminWhereInput = {
    AND?: AdminWhereInput | AdminWhereInput[]
    OR?: AdminWhereInput[]
    NOT?: AdminWhereInput | AdminWhereInput[]
    id?: IntFilter<"Admin"> | number
    name?: StringFilter<"Admin"> | string
    password?: StringFilter<"Admin"> | string
    email?: StringFilter<"Admin"> | string
    room_count?: IntFilter<"Admin"> | number
  }

  export type AdminOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    password?: SortOrder
    email?: SortOrder
    room_count?: SortOrder
  }

  export type AdminWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: AdminWhereInput | AdminWhereInput[]
    OR?: AdminWhereInput[]
    NOT?: AdminWhereInput | AdminWhereInput[]
    name?: StringFilter<"Admin"> | string
    password?: StringFilter<"Admin"> | string
    room_count?: IntFilter<"Admin"> | number
  }, "id" | "email">

  export type AdminOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    password?: SortOrder
    email?: SortOrder
    room_count?: SortOrder
    _count?: AdminCountOrderByAggregateInput
    _avg?: AdminAvgOrderByAggregateInput
    _max?: AdminMaxOrderByAggregateInput
    _min?: AdminMinOrderByAggregateInput
    _sum?: AdminSumOrderByAggregateInput
  }

  export type AdminScalarWhereWithAggregatesInput = {
    AND?: AdminScalarWhereWithAggregatesInput | AdminScalarWhereWithAggregatesInput[]
    OR?: AdminScalarWhereWithAggregatesInput[]
    NOT?: AdminScalarWhereWithAggregatesInput | AdminScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Admin"> | number
    name?: StringWithAggregatesFilter<"Admin"> | string
    password?: StringWithAggregatesFilter<"Admin"> | string
    email?: StringWithAggregatesFilter<"Admin"> | string
    room_count?: IntWithAggregatesFilter<"Admin"> | number
  }

  export type RoleWhereInput = {
    AND?: RoleWhereInput | RoleWhereInput[]
    OR?: RoleWhereInput[]
    NOT?: RoleWhereInput | RoleWhereInput[]
    role_id?: IntFilter<"Role"> | number
    role?: EnumRoleEnumFilter<"Role"> | $Enums.RoleEnum
    staff?: StaffListRelationFilter
  }

  export type RoleOrderByWithRelationInput = {
    role_id?: SortOrder
    role?: SortOrder
    staff?: StaffOrderByRelationAggregateInput
  }

  export type RoleWhereUniqueInput = Prisma.AtLeast<{
    role_id?: number
    AND?: RoleWhereInput | RoleWhereInput[]
    OR?: RoleWhereInput[]
    NOT?: RoleWhereInput | RoleWhereInput[]
    role?: EnumRoleEnumFilter<"Role"> | $Enums.RoleEnum
    staff?: StaffListRelationFilter
  }, "role_id">

  export type RoleOrderByWithAggregationInput = {
    role_id?: SortOrder
    role?: SortOrder
    _count?: RoleCountOrderByAggregateInput
    _avg?: RoleAvgOrderByAggregateInput
    _max?: RoleMaxOrderByAggregateInput
    _min?: RoleMinOrderByAggregateInput
    _sum?: RoleSumOrderByAggregateInput
  }

  export type RoleScalarWhereWithAggregatesInput = {
    AND?: RoleScalarWhereWithAggregatesInput | RoleScalarWhereWithAggregatesInput[]
    OR?: RoleScalarWhereWithAggregatesInput[]
    NOT?: RoleScalarWhereWithAggregatesInput | RoleScalarWhereWithAggregatesInput[]
    role_id?: IntWithAggregatesFilter<"Role"> | number
    role?: EnumRoleEnumWithAggregatesFilter<"Role"> | $Enums.RoleEnum
  }

  export type StaffWhereInput = {
    AND?: StaffWhereInput | StaffWhereInput[]
    OR?: StaffWhereInput[]
    NOT?: StaffWhereInput | StaffWhereInput[]
    id?: IntFilter<"Staff"> | number
    name?: StringFilter<"Staff"> | string
    contact_number?: StringFilter<"Staff"> | string
    date_of_join?: DateTimeFilter<"Staff"> | Date | string
    salary?: DecimalFilter<"Staff"> | Decimal | DecimalJsLike | number | string
    gender?: EnumGenderEnumFilter<"Staff"> | $Enums.GenderEnum
    age?: IntFilter<"Staff"> | number
    roll_id?: IntFilter<"Staff"> | number
    role?: XOR<RoleScalarRelationFilter, RoleWhereInput>
  }

  export type StaffOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    contact_number?: SortOrder
    date_of_join?: SortOrder
    salary?: SortOrder
    gender?: SortOrder
    age?: SortOrder
    roll_id?: SortOrder
    role?: RoleOrderByWithRelationInput
  }

  export type StaffWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: StaffWhereInput | StaffWhereInput[]
    OR?: StaffWhereInput[]
    NOT?: StaffWhereInput | StaffWhereInput[]
    name?: StringFilter<"Staff"> | string
    contact_number?: StringFilter<"Staff"> | string
    date_of_join?: DateTimeFilter<"Staff"> | Date | string
    salary?: DecimalFilter<"Staff"> | Decimal | DecimalJsLike | number | string
    gender?: EnumGenderEnumFilter<"Staff"> | $Enums.GenderEnum
    age?: IntFilter<"Staff"> | number
    roll_id?: IntFilter<"Staff"> | number
    role?: XOR<RoleScalarRelationFilter, RoleWhereInput>
  }, "id">

  export type StaffOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    contact_number?: SortOrder
    date_of_join?: SortOrder
    salary?: SortOrder
    gender?: SortOrder
    age?: SortOrder
    roll_id?: SortOrder
    _count?: StaffCountOrderByAggregateInput
    _avg?: StaffAvgOrderByAggregateInput
    _max?: StaffMaxOrderByAggregateInput
    _min?: StaffMinOrderByAggregateInput
    _sum?: StaffSumOrderByAggregateInput
  }

  export type StaffScalarWhereWithAggregatesInput = {
    AND?: StaffScalarWhereWithAggregatesInput | StaffScalarWhereWithAggregatesInput[]
    OR?: StaffScalarWhereWithAggregatesInput[]
    NOT?: StaffScalarWhereWithAggregatesInput | StaffScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Staff"> | number
    name?: StringWithAggregatesFilter<"Staff"> | string
    contact_number?: StringWithAggregatesFilter<"Staff"> | string
    date_of_join?: DateTimeWithAggregatesFilter<"Staff"> | Date | string
    salary?: DecimalWithAggregatesFilter<"Staff"> | Decimal | DecimalJsLike | number | string
    gender?: EnumGenderEnumWithAggregatesFilter<"Staff"> | $Enums.GenderEnum
    age?: IntWithAggregatesFilter<"Staff"> | number
    roll_id?: IntWithAggregatesFilter<"Staff"> | number
  }

  export type Student1WhereInput = {
    AND?: Student1WhereInput | Student1WhereInput[]
    OR?: Student1WhereInput[]
    NOT?: Student1WhereInput | Student1WhereInput[]
    id?: IntFilter<"Student1"> | number
    name?: StringNullableFilter<"Student1"> | string | null
    email?: StringFilter<"Student1"> | string
    password?: StringFilter<"Student1"> | string
    gender?: EnumGenderEnumFilter<"Student1"> | $Enums.GenderEnum
    age?: IntFilter<"Student1"> | number
    role?: StringFilter<"Student1"> | string
    student2?: XOR<Student2NullableScalarRelationFilter, Student2WhereInput> | null
    feedbacks?: FeedbackListRelationFilter
    gatePasses?: GatePassListRelationFilter
    feePayments?: FeePaymentListRelationFilter
    room?: XOR<RoomNullableScalarRelationFilter, RoomWhereInput> | null
  }

  export type Student1OrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    email?: SortOrder
    password?: SortOrder
    gender?: SortOrder
    age?: SortOrder
    role?: SortOrder
    student2?: Student2OrderByWithRelationInput
    feedbacks?: FeedbackOrderByRelationAggregateInput
    gatePasses?: GatePassOrderByRelationAggregateInput
    feePayments?: FeePaymentOrderByRelationAggregateInput
    room?: RoomOrderByWithRelationInput
  }

  export type Student1WhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: Student1WhereInput | Student1WhereInput[]
    OR?: Student1WhereInput[]
    NOT?: Student1WhereInput | Student1WhereInput[]
    name?: StringNullableFilter<"Student1"> | string | null
    password?: StringFilter<"Student1"> | string
    gender?: EnumGenderEnumFilter<"Student1"> | $Enums.GenderEnum
    age?: IntFilter<"Student1"> | number
    role?: StringFilter<"Student1"> | string
    student2?: XOR<Student2NullableScalarRelationFilter, Student2WhereInput> | null
    feedbacks?: FeedbackListRelationFilter
    gatePasses?: GatePassListRelationFilter
    feePayments?: FeePaymentListRelationFilter
    room?: XOR<RoomNullableScalarRelationFilter, RoomWhereInput> | null
  }, "id" | "email">

  export type Student1OrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    email?: SortOrder
    password?: SortOrder
    gender?: SortOrder
    age?: SortOrder
    role?: SortOrder
    _count?: Student1CountOrderByAggregateInput
    _avg?: Student1AvgOrderByAggregateInput
    _max?: Student1MaxOrderByAggregateInput
    _min?: Student1MinOrderByAggregateInput
    _sum?: Student1SumOrderByAggregateInput
  }

  export type Student1ScalarWhereWithAggregatesInput = {
    AND?: Student1ScalarWhereWithAggregatesInput | Student1ScalarWhereWithAggregatesInput[]
    OR?: Student1ScalarWhereWithAggregatesInput[]
    NOT?: Student1ScalarWhereWithAggregatesInput | Student1ScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Student1"> | number
    name?: StringNullableWithAggregatesFilter<"Student1"> | string | null
    email?: StringWithAggregatesFilter<"Student1"> | string
    password?: StringWithAggregatesFilter<"Student1"> | string
    gender?: EnumGenderEnumWithAggregatesFilter<"Student1"> | $Enums.GenderEnum
    age?: IntWithAggregatesFilter<"Student1"> | number
    role?: StringWithAggregatesFilter<"Student1"> | string
  }

  export type Student2WhereInput = {
    AND?: Student2WhereInput | Student2WhereInput[]
    OR?: Student2WhereInput[]
    NOT?: Student2WhereInput | Student2WhereInput[]
    student1_id?: IntFilter<"Student2"> | number
    mobile_number?: StringFilter<"Student2"> | string
    address?: StringFilter<"Student2"> | string
    emergency_number?: StringFilter<"Student2"> | string
    parent_contact?: StringFilter<"Student2"> | string
    roll_number?: IntFilter<"Student2"> | number
    student1?: XOR<Student1ScalarRelationFilter, Student1WhereInput>
    college?: XOR<CollegeScalarRelationFilter, CollegeWhereInput>
  }

  export type Student2OrderByWithRelationInput = {
    student1_id?: SortOrder
    mobile_number?: SortOrder
    address?: SortOrder
    emergency_number?: SortOrder
    parent_contact?: SortOrder
    roll_number?: SortOrder
    student1?: Student1OrderByWithRelationInput
    college?: CollegeOrderByWithRelationInput
  }

  export type Student2WhereUniqueInput = Prisma.AtLeast<{
    student1_id?: number
    AND?: Student2WhereInput | Student2WhereInput[]
    OR?: Student2WhereInput[]
    NOT?: Student2WhereInput | Student2WhereInput[]
    mobile_number?: StringFilter<"Student2"> | string
    address?: StringFilter<"Student2"> | string
    emergency_number?: StringFilter<"Student2"> | string
    parent_contact?: StringFilter<"Student2"> | string
    roll_number?: IntFilter<"Student2"> | number
    student1?: XOR<Student1ScalarRelationFilter, Student1WhereInput>
    college?: XOR<CollegeScalarRelationFilter, CollegeWhereInput>
  }, "student1_id">

  export type Student2OrderByWithAggregationInput = {
    student1_id?: SortOrder
    mobile_number?: SortOrder
    address?: SortOrder
    emergency_number?: SortOrder
    parent_contact?: SortOrder
    roll_number?: SortOrder
    _count?: Student2CountOrderByAggregateInput
    _avg?: Student2AvgOrderByAggregateInput
    _max?: Student2MaxOrderByAggregateInput
    _min?: Student2MinOrderByAggregateInput
    _sum?: Student2SumOrderByAggregateInput
  }

  export type Student2ScalarWhereWithAggregatesInput = {
    AND?: Student2ScalarWhereWithAggregatesInput | Student2ScalarWhereWithAggregatesInput[]
    OR?: Student2ScalarWhereWithAggregatesInput[]
    NOT?: Student2ScalarWhereWithAggregatesInput | Student2ScalarWhereWithAggregatesInput[]
    student1_id?: IntWithAggregatesFilter<"Student2"> | number
    mobile_number?: StringWithAggregatesFilter<"Student2"> | string
    address?: StringWithAggregatesFilter<"Student2"> | string
    emergency_number?: StringWithAggregatesFilter<"Student2"> | string
    parent_contact?: StringWithAggregatesFilter<"Student2"> | string
    roll_number?: IntWithAggregatesFilter<"Student2"> | number
  }

  export type CollegeWhereInput = {
    AND?: CollegeWhereInput | CollegeWhereInput[]
    OR?: CollegeWhereInput[]
    NOT?: CollegeWhereInput | CollegeWhereInput[]
    roll_number?: IntFilter<"College"> | number
    college_name?: StringFilter<"College"> | string
    students?: Student2ListRelationFilter
  }

  export type CollegeOrderByWithRelationInput = {
    roll_number?: SortOrder
    college_name?: SortOrder
    students?: Student2OrderByRelationAggregateInput
  }

  export type CollegeWhereUniqueInput = Prisma.AtLeast<{
    roll_number?: number
    AND?: CollegeWhereInput | CollegeWhereInput[]
    OR?: CollegeWhereInput[]
    NOT?: CollegeWhereInput | CollegeWhereInput[]
    college_name?: StringFilter<"College"> | string
    students?: Student2ListRelationFilter
  }, "roll_number">

  export type CollegeOrderByWithAggregationInput = {
    roll_number?: SortOrder
    college_name?: SortOrder
    _count?: CollegeCountOrderByAggregateInput
    _avg?: CollegeAvgOrderByAggregateInput
    _max?: CollegeMaxOrderByAggregateInput
    _min?: CollegeMinOrderByAggregateInput
    _sum?: CollegeSumOrderByAggregateInput
  }

  export type CollegeScalarWhereWithAggregatesInput = {
    AND?: CollegeScalarWhereWithAggregatesInput | CollegeScalarWhereWithAggregatesInput[]
    OR?: CollegeScalarWhereWithAggregatesInput[]
    NOT?: CollegeScalarWhereWithAggregatesInput | CollegeScalarWhereWithAggregatesInput[]
    roll_number?: IntWithAggregatesFilter<"College"> | number
    college_name?: StringWithAggregatesFilter<"College"> | string
  }

  export type RoomWhereInput = {
    AND?: RoomWhereInput | RoomWhereInput[]
    OR?: RoomWhereInput[]
    NOT?: RoomWhereInput | RoomWhereInput[]
    id?: IntFilter<"Room"> | number
    student_id?: IntFilter<"Room"> | number
    room_id?: StringFilter<"Room"> | string
    student?: XOR<Student1ScalarRelationFilter, Student1WhereInput>
  }

  export type RoomOrderByWithRelationInput = {
    id?: SortOrder
    student_id?: SortOrder
    room_id?: SortOrder
    student?: Student1OrderByWithRelationInput
  }

  export type RoomWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    student_id?: number
    AND?: RoomWhereInput | RoomWhereInput[]
    OR?: RoomWhereInput[]
    NOT?: RoomWhereInput | RoomWhereInput[]
    room_id?: StringFilter<"Room"> | string
    student?: XOR<Student1ScalarRelationFilter, Student1WhereInput>
  }, "id" | "student_id">

  export type RoomOrderByWithAggregationInput = {
    id?: SortOrder
    student_id?: SortOrder
    room_id?: SortOrder
    _count?: RoomCountOrderByAggregateInput
    _avg?: RoomAvgOrderByAggregateInput
    _max?: RoomMaxOrderByAggregateInput
    _min?: RoomMinOrderByAggregateInput
    _sum?: RoomSumOrderByAggregateInput
  }

  export type RoomScalarWhereWithAggregatesInput = {
    AND?: RoomScalarWhereWithAggregatesInput | RoomScalarWhereWithAggregatesInput[]
    OR?: RoomScalarWhereWithAggregatesInput[]
    NOT?: RoomScalarWhereWithAggregatesInput | RoomScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Room"> | number
    student_id?: IntWithAggregatesFilter<"Room"> | number
    room_id?: StringWithAggregatesFilter<"Room"> | string
  }

  export type FeedbackWhereInput = {
    AND?: FeedbackWhereInput | FeedbackWhereInput[]
    OR?: FeedbackWhereInput[]
    NOT?: FeedbackWhereInput | FeedbackWhereInput[]
    id?: IntFilter<"Feedback"> | number
    student1_id?: IntFilter<"Feedback"> | number
    issue?: StringFilter<"Feedback"> | string
    room_number?: StringFilter<"Feedback"> | string
    createdAt?: DateTimeFilter<"Feedback"> | Date | string
    student?: XOR<Student1ScalarRelationFilter, Student1WhereInput>
  }

  export type FeedbackOrderByWithRelationInput = {
    id?: SortOrder
    student1_id?: SortOrder
    issue?: SortOrder
    room_number?: SortOrder
    createdAt?: SortOrder
    student?: Student1OrderByWithRelationInput
  }

  export type FeedbackWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: FeedbackWhereInput | FeedbackWhereInput[]
    OR?: FeedbackWhereInput[]
    NOT?: FeedbackWhereInput | FeedbackWhereInput[]
    student1_id?: IntFilter<"Feedback"> | number
    issue?: StringFilter<"Feedback"> | string
    room_number?: StringFilter<"Feedback"> | string
    createdAt?: DateTimeFilter<"Feedback"> | Date | string
    student?: XOR<Student1ScalarRelationFilter, Student1WhereInput>
  }, "id">

  export type FeedbackOrderByWithAggregationInput = {
    id?: SortOrder
    student1_id?: SortOrder
    issue?: SortOrder
    room_number?: SortOrder
    createdAt?: SortOrder
    _count?: FeedbackCountOrderByAggregateInput
    _avg?: FeedbackAvgOrderByAggregateInput
    _max?: FeedbackMaxOrderByAggregateInput
    _min?: FeedbackMinOrderByAggregateInput
    _sum?: FeedbackSumOrderByAggregateInput
  }

  export type FeedbackScalarWhereWithAggregatesInput = {
    AND?: FeedbackScalarWhereWithAggregatesInput | FeedbackScalarWhereWithAggregatesInput[]
    OR?: FeedbackScalarWhereWithAggregatesInput[]
    NOT?: FeedbackScalarWhereWithAggregatesInput | FeedbackScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Feedback"> | number
    student1_id?: IntWithAggregatesFilter<"Feedback"> | number
    issue?: StringWithAggregatesFilter<"Feedback"> | string
    room_number?: StringWithAggregatesFilter<"Feedback"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Feedback"> | Date | string
  }

  export type GatePassWhereInput = {
    AND?: GatePassWhereInput | GatePassWhereInput[]
    OR?: GatePassWhereInput[]
    NOT?: GatePassWhereInput | GatePassWhereInput[]
    id?: IntFilter<"GatePass"> | number
    reason?: StringFilter<"GatePass"> | string
    leave_date?: DateTimeFilter<"GatePass"> | Date | string
    arrival_date?: DateTimeFilter<"GatePass"> | Date | string
    approval?: EnumApprovalEnumFilter<"GatePass"> | $Enums.ApprovalEnum
    student1_id?: IntFilter<"GatePass"> | number
    createdAt?: DateTimeFilter<"GatePass"> | Date | string
    student?: XOR<Student1ScalarRelationFilter, Student1WhereInput>
  }

  export type GatePassOrderByWithRelationInput = {
    id?: SortOrder
    reason?: SortOrder
    leave_date?: SortOrder
    arrival_date?: SortOrder
    approval?: SortOrder
    student1_id?: SortOrder
    createdAt?: SortOrder
    student?: Student1OrderByWithRelationInput
  }

  export type GatePassWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: GatePassWhereInput | GatePassWhereInput[]
    OR?: GatePassWhereInput[]
    NOT?: GatePassWhereInput | GatePassWhereInput[]
    reason?: StringFilter<"GatePass"> | string
    leave_date?: DateTimeFilter<"GatePass"> | Date | string
    arrival_date?: DateTimeFilter<"GatePass"> | Date | string
    approval?: EnumApprovalEnumFilter<"GatePass"> | $Enums.ApprovalEnum
    student1_id?: IntFilter<"GatePass"> | number
    createdAt?: DateTimeFilter<"GatePass"> | Date | string
    student?: XOR<Student1ScalarRelationFilter, Student1WhereInput>
  }, "id">

  export type GatePassOrderByWithAggregationInput = {
    id?: SortOrder
    reason?: SortOrder
    leave_date?: SortOrder
    arrival_date?: SortOrder
    approval?: SortOrder
    student1_id?: SortOrder
    createdAt?: SortOrder
    _count?: GatePassCountOrderByAggregateInput
    _avg?: GatePassAvgOrderByAggregateInput
    _max?: GatePassMaxOrderByAggregateInput
    _min?: GatePassMinOrderByAggregateInput
    _sum?: GatePassSumOrderByAggregateInput
  }

  export type GatePassScalarWhereWithAggregatesInput = {
    AND?: GatePassScalarWhereWithAggregatesInput | GatePassScalarWhereWithAggregatesInput[]
    OR?: GatePassScalarWhereWithAggregatesInput[]
    NOT?: GatePassScalarWhereWithAggregatesInput | GatePassScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"GatePass"> | number
    reason?: StringWithAggregatesFilter<"GatePass"> | string
    leave_date?: DateTimeWithAggregatesFilter<"GatePass"> | Date | string
    arrival_date?: DateTimeWithAggregatesFilter<"GatePass"> | Date | string
    approval?: EnumApprovalEnumWithAggregatesFilter<"GatePass"> | $Enums.ApprovalEnum
    student1_id?: IntWithAggregatesFilter<"GatePass"> | number
    createdAt?: DateTimeWithAggregatesFilter<"GatePass"> | Date | string
  }

  export type FeePaymentWhereInput = {
    AND?: FeePaymentWhereInput | FeePaymentWhereInput[]
    OR?: FeePaymentWhereInput[]
    NOT?: FeePaymentWhereInput | FeePaymentWhereInput[]
    id?: IntFilter<"FeePayment"> | number
    semester?: IntFilter<"FeePayment"> | number
    date_of_payment?: DateTimeFilter<"FeePayment"> | Date | string
    mode_of_payment?: StringFilter<"FeePayment"> | string
    student_id?: IntFilter<"FeePayment"> | number
    student?: XOR<Student1ScalarRelationFilter, Student1WhereInput>
  }

  export type FeePaymentOrderByWithRelationInput = {
    id?: SortOrder
    semester?: SortOrder
    date_of_payment?: SortOrder
    mode_of_payment?: SortOrder
    student_id?: SortOrder
    student?: Student1OrderByWithRelationInput
  }

  export type FeePaymentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: FeePaymentWhereInput | FeePaymentWhereInput[]
    OR?: FeePaymentWhereInput[]
    NOT?: FeePaymentWhereInput | FeePaymentWhereInput[]
    semester?: IntFilter<"FeePayment"> | number
    date_of_payment?: DateTimeFilter<"FeePayment"> | Date | string
    mode_of_payment?: StringFilter<"FeePayment"> | string
    student_id?: IntFilter<"FeePayment"> | number
    student?: XOR<Student1ScalarRelationFilter, Student1WhereInput>
  }, "id">

  export type FeePaymentOrderByWithAggregationInput = {
    id?: SortOrder
    semester?: SortOrder
    date_of_payment?: SortOrder
    mode_of_payment?: SortOrder
    student_id?: SortOrder
    _count?: FeePaymentCountOrderByAggregateInput
    _avg?: FeePaymentAvgOrderByAggregateInput
    _max?: FeePaymentMaxOrderByAggregateInput
    _min?: FeePaymentMinOrderByAggregateInput
    _sum?: FeePaymentSumOrderByAggregateInput
  }

  export type FeePaymentScalarWhereWithAggregatesInput = {
    AND?: FeePaymentScalarWhereWithAggregatesInput | FeePaymentScalarWhereWithAggregatesInput[]
    OR?: FeePaymentScalarWhereWithAggregatesInput[]
    NOT?: FeePaymentScalarWhereWithAggregatesInput | FeePaymentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"FeePayment"> | number
    semester?: IntWithAggregatesFilter<"FeePayment"> | number
    date_of_payment?: DateTimeWithAggregatesFilter<"FeePayment"> | Date | string
    mode_of_payment?: StringWithAggregatesFilter<"FeePayment"> | string
    student_id?: IntWithAggregatesFilter<"FeePayment"> | number
  }

  export type MessMenuWhereInput = {
    AND?: MessMenuWhereInput | MessMenuWhereInput[]
    OR?: MessMenuWhereInput[]
    NOT?: MessMenuWhereInput | MessMenuWhereInput[]
    id?: IntFilter<"MessMenu"> | number
    day?: StringFilter<"MessMenu"> | string
    meal_type?: StringFilter<"MessMenu"> | string
    items?: StringFilter<"MessMenu"> | string
    createdAt?: DateTimeFilter<"MessMenu"> | Date | string
  }

  export type MessMenuOrderByWithRelationInput = {
    id?: SortOrder
    day?: SortOrder
    meal_type?: SortOrder
    items?: SortOrder
    createdAt?: SortOrder
  }

  export type MessMenuWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: MessMenuWhereInput | MessMenuWhereInput[]
    OR?: MessMenuWhereInput[]
    NOT?: MessMenuWhereInput | MessMenuWhereInput[]
    day?: StringFilter<"MessMenu"> | string
    meal_type?: StringFilter<"MessMenu"> | string
    items?: StringFilter<"MessMenu"> | string
    createdAt?: DateTimeFilter<"MessMenu"> | Date | string
  }, "id">

  export type MessMenuOrderByWithAggregationInput = {
    id?: SortOrder
    day?: SortOrder
    meal_type?: SortOrder
    items?: SortOrder
    createdAt?: SortOrder
    _count?: MessMenuCountOrderByAggregateInput
    _avg?: MessMenuAvgOrderByAggregateInput
    _max?: MessMenuMaxOrderByAggregateInput
    _min?: MessMenuMinOrderByAggregateInput
    _sum?: MessMenuSumOrderByAggregateInput
  }

  export type MessMenuScalarWhereWithAggregatesInput = {
    AND?: MessMenuScalarWhereWithAggregatesInput | MessMenuScalarWhereWithAggregatesInput[]
    OR?: MessMenuScalarWhereWithAggregatesInput[]
    NOT?: MessMenuScalarWhereWithAggregatesInput | MessMenuScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"MessMenu"> | number
    day?: StringWithAggregatesFilter<"MessMenu"> | string
    meal_type?: StringWithAggregatesFilter<"MessMenu"> | string
    items?: StringWithAggregatesFilter<"MessMenu"> | string
    createdAt?: DateTimeWithAggregatesFilter<"MessMenu"> | Date | string
  }

  export type HostelCommitteeWhereInput = {
    AND?: HostelCommitteeWhereInput | HostelCommitteeWhereInput[]
    OR?: HostelCommitteeWhereInput[]
    NOT?: HostelCommitteeWhereInput | HostelCommitteeWhereInput[]
    id?: IntFilter<"HostelCommittee"> | number
    name?: StringFilter<"HostelCommittee"> | string
    position?: StringFilter<"HostelCommittee"> | string
    contact_number?: StringFilter<"HostelCommittee"> | string
    date_of_join?: DateTimeFilter<"HostelCommittee"> | Date | string
    email?: StringNullableFilter<"HostelCommittee"> | string | null
    gender?: EnumGenderEnumFilter<"HostelCommittee"> | $Enums.GenderEnum
  }

  export type HostelCommitteeOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    position?: SortOrder
    contact_number?: SortOrder
    date_of_join?: SortOrder
    email?: SortOrderInput | SortOrder
    gender?: SortOrder
  }

  export type HostelCommitteeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: HostelCommitteeWhereInput | HostelCommitteeWhereInput[]
    OR?: HostelCommitteeWhereInput[]
    NOT?: HostelCommitteeWhereInput | HostelCommitteeWhereInput[]
    name?: StringFilter<"HostelCommittee"> | string
    position?: StringFilter<"HostelCommittee"> | string
    contact_number?: StringFilter<"HostelCommittee"> | string
    date_of_join?: DateTimeFilter<"HostelCommittee"> | Date | string
    gender?: EnumGenderEnumFilter<"HostelCommittee"> | $Enums.GenderEnum
  }, "id" | "email">

  export type HostelCommitteeOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    position?: SortOrder
    contact_number?: SortOrder
    date_of_join?: SortOrder
    email?: SortOrderInput | SortOrder
    gender?: SortOrder
    _count?: HostelCommitteeCountOrderByAggregateInput
    _avg?: HostelCommitteeAvgOrderByAggregateInput
    _max?: HostelCommitteeMaxOrderByAggregateInput
    _min?: HostelCommitteeMinOrderByAggregateInput
    _sum?: HostelCommitteeSumOrderByAggregateInput
  }

  export type HostelCommitteeScalarWhereWithAggregatesInput = {
    AND?: HostelCommitteeScalarWhereWithAggregatesInput | HostelCommitteeScalarWhereWithAggregatesInput[]
    OR?: HostelCommitteeScalarWhereWithAggregatesInput[]
    NOT?: HostelCommitteeScalarWhereWithAggregatesInput | HostelCommitteeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"HostelCommittee"> | number
    name?: StringWithAggregatesFilter<"HostelCommittee"> | string
    position?: StringWithAggregatesFilter<"HostelCommittee"> | string
    contact_number?: StringWithAggregatesFilter<"HostelCommittee"> | string
    date_of_join?: DateTimeWithAggregatesFilter<"HostelCommittee"> | Date | string
    email?: StringNullableWithAggregatesFilter<"HostelCommittee"> | string | null
    gender?: EnumGenderEnumWithAggregatesFilter<"HostelCommittee"> | $Enums.GenderEnum
  }

  export type AdminCreateInput = {
    name: string
    password: string
    email: string
    room_count: number
  }

  export type AdminUncheckedCreateInput = {
    id?: number
    name: string
    password: string
    email: string
    room_count: number
  }

  export type AdminUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    room_count?: IntFieldUpdateOperationsInput | number
  }

  export type AdminUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    room_count?: IntFieldUpdateOperationsInput | number
  }

  export type AdminCreateManyInput = {
    id?: number
    name: string
    password: string
    email: string
    room_count: number
  }

  export type AdminUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    room_count?: IntFieldUpdateOperationsInput | number
  }

  export type AdminUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    room_count?: IntFieldUpdateOperationsInput | number
  }

  export type RoleCreateInput = {
    role: $Enums.RoleEnum
    staff?: StaffCreateNestedManyWithoutRoleInput
  }

  export type RoleUncheckedCreateInput = {
    role_id?: number
    role: $Enums.RoleEnum
    staff?: StaffUncheckedCreateNestedManyWithoutRoleInput
  }

  export type RoleUpdateInput = {
    role?: EnumRoleEnumFieldUpdateOperationsInput | $Enums.RoleEnum
    staff?: StaffUpdateManyWithoutRoleNestedInput
  }

  export type RoleUncheckedUpdateInput = {
    role_id?: IntFieldUpdateOperationsInput | number
    role?: EnumRoleEnumFieldUpdateOperationsInput | $Enums.RoleEnum
    staff?: StaffUncheckedUpdateManyWithoutRoleNestedInput
  }

  export type RoleCreateManyInput = {
    role_id?: number
    role: $Enums.RoleEnum
  }

  export type RoleUpdateManyMutationInput = {
    role?: EnumRoleEnumFieldUpdateOperationsInput | $Enums.RoleEnum
  }

  export type RoleUncheckedUpdateManyInput = {
    role_id?: IntFieldUpdateOperationsInput | number
    role?: EnumRoleEnumFieldUpdateOperationsInput | $Enums.RoleEnum
  }

  export type StaffCreateInput = {
    name: string
    contact_number: string
    date_of_join: Date | string
    salary: Decimal | DecimalJsLike | number | string
    gender: $Enums.GenderEnum
    age: number
    role: RoleCreateNestedOneWithoutStaffInput
  }

  export type StaffUncheckedCreateInput = {
    id?: number
    name: string
    contact_number: string
    date_of_join: Date | string
    salary: Decimal | DecimalJsLike | number | string
    gender: $Enums.GenderEnum
    age: number
    roll_id: number
  }

  export type StaffUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    contact_number?: StringFieldUpdateOperationsInput | string
    date_of_join?: DateTimeFieldUpdateOperationsInput | Date | string
    salary?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    gender?: EnumGenderEnumFieldUpdateOperationsInput | $Enums.GenderEnum
    age?: IntFieldUpdateOperationsInput | number
    role?: RoleUpdateOneRequiredWithoutStaffNestedInput
  }

  export type StaffUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    contact_number?: StringFieldUpdateOperationsInput | string
    date_of_join?: DateTimeFieldUpdateOperationsInput | Date | string
    salary?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    gender?: EnumGenderEnumFieldUpdateOperationsInput | $Enums.GenderEnum
    age?: IntFieldUpdateOperationsInput | number
    roll_id?: IntFieldUpdateOperationsInput | number
  }

  export type StaffCreateManyInput = {
    id?: number
    name: string
    contact_number: string
    date_of_join: Date | string
    salary: Decimal | DecimalJsLike | number | string
    gender: $Enums.GenderEnum
    age: number
    roll_id: number
  }

  export type StaffUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    contact_number?: StringFieldUpdateOperationsInput | string
    date_of_join?: DateTimeFieldUpdateOperationsInput | Date | string
    salary?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    gender?: EnumGenderEnumFieldUpdateOperationsInput | $Enums.GenderEnum
    age?: IntFieldUpdateOperationsInput | number
  }

  export type StaffUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    contact_number?: StringFieldUpdateOperationsInput | string
    date_of_join?: DateTimeFieldUpdateOperationsInput | Date | string
    salary?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    gender?: EnumGenderEnumFieldUpdateOperationsInput | $Enums.GenderEnum
    age?: IntFieldUpdateOperationsInput | number
    roll_id?: IntFieldUpdateOperationsInput | number
  }

  export type Student1CreateInput = {
    name?: string | null
    email: string
    password: string
    gender?: $Enums.GenderEnum
    age?: number
    role?: string
    student2?: Student2CreateNestedOneWithoutStudent1Input
    feedbacks?: FeedbackCreateNestedManyWithoutStudentInput
    gatePasses?: GatePassCreateNestedManyWithoutStudentInput
    feePayments?: FeePaymentCreateNestedManyWithoutStudentInput
    room?: RoomCreateNestedOneWithoutStudentInput
  }

  export type Student1UncheckedCreateInput = {
    id?: number
    name?: string | null
    email: string
    password: string
    gender?: $Enums.GenderEnum
    age?: number
    role?: string
    student2?: Student2UncheckedCreateNestedOneWithoutStudent1Input
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutStudentInput
    gatePasses?: GatePassUncheckedCreateNestedManyWithoutStudentInput
    feePayments?: FeePaymentUncheckedCreateNestedManyWithoutStudentInput
    room?: RoomUncheckedCreateNestedOneWithoutStudentInput
  }

  export type Student1UpdateInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    gender?: EnumGenderEnumFieldUpdateOperationsInput | $Enums.GenderEnum
    age?: IntFieldUpdateOperationsInput | number
    role?: StringFieldUpdateOperationsInput | string
    student2?: Student2UpdateOneWithoutStudent1NestedInput
    feedbacks?: FeedbackUpdateManyWithoutStudentNestedInput
    gatePasses?: GatePassUpdateManyWithoutStudentNestedInput
    feePayments?: FeePaymentUpdateManyWithoutStudentNestedInput
    room?: RoomUpdateOneWithoutStudentNestedInput
  }

  export type Student1UncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    gender?: EnumGenderEnumFieldUpdateOperationsInput | $Enums.GenderEnum
    age?: IntFieldUpdateOperationsInput | number
    role?: StringFieldUpdateOperationsInput | string
    student2?: Student2UncheckedUpdateOneWithoutStudent1NestedInput
    feedbacks?: FeedbackUncheckedUpdateManyWithoutStudentNestedInput
    gatePasses?: GatePassUncheckedUpdateManyWithoutStudentNestedInput
    feePayments?: FeePaymentUncheckedUpdateManyWithoutStudentNestedInput
    room?: RoomUncheckedUpdateOneWithoutStudentNestedInput
  }

  export type Student1CreateManyInput = {
    id?: number
    name?: string | null
    email: string
    password: string
    gender?: $Enums.GenderEnum
    age?: number
    role?: string
  }

  export type Student1UpdateManyMutationInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    gender?: EnumGenderEnumFieldUpdateOperationsInput | $Enums.GenderEnum
    age?: IntFieldUpdateOperationsInput | number
    role?: StringFieldUpdateOperationsInput | string
  }

  export type Student1UncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    gender?: EnumGenderEnumFieldUpdateOperationsInput | $Enums.GenderEnum
    age?: IntFieldUpdateOperationsInput | number
    role?: StringFieldUpdateOperationsInput | string
  }

  export type Student2CreateInput = {
    mobile_number: string
    address: string
    emergency_number: string
    parent_contact: string
    student1: Student1CreateNestedOneWithoutStudent2Input
    college: CollegeCreateNestedOneWithoutStudentsInput
  }

  export type Student2UncheckedCreateInput = {
    student1_id: number
    mobile_number: string
    address: string
    emergency_number: string
    parent_contact: string
    roll_number: number
  }

  export type Student2UpdateInput = {
    mobile_number?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    emergency_number?: StringFieldUpdateOperationsInput | string
    parent_contact?: StringFieldUpdateOperationsInput | string
    student1?: Student1UpdateOneRequiredWithoutStudent2NestedInput
    college?: CollegeUpdateOneRequiredWithoutStudentsNestedInput
  }

  export type Student2UncheckedUpdateInput = {
    student1_id?: IntFieldUpdateOperationsInput | number
    mobile_number?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    emergency_number?: StringFieldUpdateOperationsInput | string
    parent_contact?: StringFieldUpdateOperationsInput | string
    roll_number?: IntFieldUpdateOperationsInput | number
  }

  export type Student2CreateManyInput = {
    student1_id: number
    mobile_number: string
    address: string
    emergency_number: string
    parent_contact: string
    roll_number: number
  }

  export type Student2UpdateManyMutationInput = {
    mobile_number?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    emergency_number?: StringFieldUpdateOperationsInput | string
    parent_contact?: StringFieldUpdateOperationsInput | string
  }

  export type Student2UncheckedUpdateManyInput = {
    student1_id?: IntFieldUpdateOperationsInput | number
    mobile_number?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    emergency_number?: StringFieldUpdateOperationsInput | string
    parent_contact?: StringFieldUpdateOperationsInput | string
    roll_number?: IntFieldUpdateOperationsInput | number
  }

  export type CollegeCreateInput = {
    roll_number: number
    college_name: string
    students?: Student2CreateNestedManyWithoutCollegeInput
  }

  export type CollegeUncheckedCreateInput = {
    roll_number: number
    college_name: string
    students?: Student2UncheckedCreateNestedManyWithoutCollegeInput
  }

  export type CollegeUpdateInput = {
    roll_number?: IntFieldUpdateOperationsInput | number
    college_name?: StringFieldUpdateOperationsInput | string
    students?: Student2UpdateManyWithoutCollegeNestedInput
  }

  export type CollegeUncheckedUpdateInput = {
    roll_number?: IntFieldUpdateOperationsInput | number
    college_name?: StringFieldUpdateOperationsInput | string
    students?: Student2UncheckedUpdateManyWithoutCollegeNestedInput
  }

  export type CollegeCreateManyInput = {
    roll_number: number
    college_name: string
  }

  export type CollegeUpdateManyMutationInput = {
    roll_number?: IntFieldUpdateOperationsInput | number
    college_name?: StringFieldUpdateOperationsInput | string
  }

  export type CollegeUncheckedUpdateManyInput = {
    roll_number?: IntFieldUpdateOperationsInput | number
    college_name?: StringFieldUpdateOperationsInput | string
  }

  export type RoomCreateInput = {
    room_id: string
    student: Student1CreateNestedOneWithoutRoomInput
  }

  export type RoomUncheckedCreateInput = {
    id?: number
    student_id: number
    room_id: string
  }

  export type RoomUpdateInput = {
    room_id?: StringFieldUpdateOperationsInput | string
    student?: Student1UpdateOneRequiredWithoutRoomNestedInput
  }

  export type RoomUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    student_id?: IntFieldUpdateOperationsInput | number
    room_id?: StringFieldUpdateOperationsInput | string
  }

  export type RoomCreateManyInput = {
    id?: number
    student_id: number
    room_id: string
  }

  export type RoomUpdateManyMutationInput = {
    room_id?: StringFieldUpdateOperationsInput | string
  }

  export type RoomUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    student_id?: IntFieldUpdateOperationsInput | number
    room_id?: StringFieldUpdateOperationsInput | string
  }

  export type FeedbackCreateInput = {
    issue: string
    room_number: string
    createdAt?: Date | string
    student: Student1CreateNestedOneWithoutFeedbacksInput
  }

  export type FeedbackUncheckedCreateInput = {
    id?: number
    student1_id: number
    issue: string
    room_number: string
    createdAt?: Date | string
  }

  export type FeedbackUpdateInput = {
    issue?: StringFieldUpdateOperationsInput | string
    room_number?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    student?: Student1UpdateOneRequiredWithoutFeedbacksNestedInput
  }

  export type FeedbackUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    student1_id?: IntFieldUpdateOperationsInput | number
    issue?: StringFieldUpdateOperationsInput | string
    room_number?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedbackCreateManyInput = {
    id?: number
    student1_id: number
    issue: string
    room_number: string
    createdAt?: Date | string
  }

  export type FeedbackUpdateManyMutationInput = {
    issue?: StringFieldUpdateOperationsInput | string
    room_number?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedbackUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    student1_id?: IntFieldUpdateOperationsInput | number
    issue?: StringFieldUpdateOperationsInput | string
    room_number?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GatePassCreateInput = {
    reason: string
    leave_date: Date | string
    arrival_date: Date | string
    approval: $Enums.ApprovalEnum
    createdAt?: Date | string
    student: Student1CreateNestedOneWithoutGatePassesInput
  }

  export type GatePassUncheckedCreateInput = {
    id?: number
    reason: string
    leave_date: Date | string
    arrival_date: Date | string
    approval: $Enums.ApprovalEnum
    student1_id: number
    createdAt?: Date | string
  }

  export type GatePassUpdateInput = {
    reason?: StringFieldUpdateOperationsInput | string
    leave_date?: DateTimeFieldUpdateOperationsInput | Date | string
    arrival_date?: DateTimeFieldUpdateOperationsInput | Date | string
    approval?: EnumApprovalEnumFieldUpdateOperationsInput | $Enums.ApprovalEnum
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    student?: Student1UpdateOneRequiredWithoutGatePassesNestedInput
  }

  export type GatePassUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    reason?: StringFieldUpdateOperationsInput | string
    leave_date?: DateTimeFieldUpdateOperationsInput | Date | string
    arrival_date?: DateTimeFieldUpdateOperationsInput | Date | string
    approval?: EnumApprovalEnumFieldUpdateOperationsInput | $Enums.ApprovalEnum
    student1_id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GatePassCreateManyInput = {
    id?: number
    reason: string
    leave_date: Date | string
    arrival_date: Date | string
    approval: $Enums.ApprovalEnum
    student1_id: number
    createdAt?: Date | string
  }

  export type GatePassUpdateManyMutationInput = {
    reason?: StringFieldUpdateOperationsInput | string
    leave_date?: DateTimeFieldUpdateOperationsInput | Date | string
    arrival_date?: DateTimeFieldUpdateOperationsInput | Date | string
    approval?: EnumApprovalEnumFieldUpdateOperationsInput | $Enums.ApprovalEnum
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GatePassUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    reason?: StringFieldUpdateOperationsInput | string
    leave_date?: DateTimeFieldUpdateOperationsInput | Date | string
    arrival_date?: DateTimeFieldUpdateOperationsInput | Date | string
    approval?: EnumApprovalEnumFieldUpdateOperationsInput | $Enums.ApprovalEnum
    student1_id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeePaymentCreateInput = {
    semester: number
    date_of_payment: Date | string
    mode_of_payment: string
    student: Student1CreateNestedOneWithoutFeePaymentsInput
  }

  export type FeePaymentUncheckedCreateInput = {
    id?: number
    semester: number
    date_of_payment: Date | string
    mode_of_payment: string
    student_id: number
  }

  export type FeePaymentUpdateInput = {
    semester?: IntFieldUpdateOperationsInput | number
    date_of_payment?: DateTimeFieldUpdateOperationsInput | Date | string
    mode_of_payment?: StringFieldUpdateOperationsInput | string
    student?: Student1UpdateOneRequiredWithoutFeePaymentsNestedInput
  }

  export type FeePaymentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    semester?: IntFieldUpdateOperationsInput | number
    date_of_payment?: DateTimeFieldUpdateOperationsInput | Date | string
    mode_of_payment?: StringFieldUpdateOperationsInput | string
    student_id?: IntFieldUpdateOperationsInput | number
  }

  export type FeePaymentCreateManyInput = {
    id?: number
    semester: number
    date_of_payment: Date | string
    mode_of_payment: string
    student_id: number
  }

  export type FeePaymentUpdateManyMutationInput = {
    semester?: IntFieldUpdateOperationsInput | number
    date_of_payment?: DateTimeFieldUpdateOperationsInput | Date | string
    mode_of_payment?: StringFieldUpdateOperationsInput | string
  }

  export type FeePaymentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    semester?: IntFieldUpdateOperationsInput | number
    date_of_payment?: DateTimeFieldUpdateOperationsInput | Date | string
    mode_of_payment?: StringFieldUpdateOperationsInput | string
    student_id?: IntFieldUpdateOperationsInput | number
  }

  export type MessMenuCreateInput = {
    day: string
    meal_type: string
    items: string
    createdAt?: Date | string
  }

  export type MessMenuUncheckedCreateInput = {
    id?: number
    day: string
    meal_type: string
    items: string
    createdAt?: Date | string
  }

  export type MessMenuUpdateInput = {
    day?: StringFieldUpdateOperationsInput | string
    meal_type?: StringFieldUpdateOperationsInput | string
    items?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessMenuUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    day?: StringFieldUpdateOperationsInput | string
    meal_type?: StringFieldUpdateOperationsInput | string
    items?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessMenuCreateManyInput = {
    id?: number
    day: string
    meal_type: string
    items: string
    createdAt?: Date | string
  }

  export type MessMenuUpdateManyMutationInput = {
    day?: StringFieldUpdateOperationsInput | string
    meal_type?: StringFieldUpdateOperationsInput | string
    items?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessMenuUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    day?: StringFieldUpdateOperationsInput | string
    meal_type?: StringFieldUpdateOperationsInput | string
    items?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HostelCommitteeCreateInput = {
    name: string
    position: string
    contact_number: string
    date_of_join: Date | string
    email?: string | null
    gender: $Enums.GenderEnum
  }

  export type HostelCommitteeUncheckedCreateInput = {
    id?: number
    name: string
    position: string
    contact_number: string
    date_of_join: Date | string
    email?: string | null
    gender: $Enums.GenderEnum
  }

  export type HostelCommitteeUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    contact_number?: StringFieldUpdateOperationsInput | string
    date_of_join?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: EnumGenderEnumFieldUpdateOperationsInput | $Enums.GenderEnum
  }

  export type HostelCommitteeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    contact_number?: StringFieldUpdateOperationsInput | string
    date_of_join?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: EnumGenderEnumFieldUpdateOperationsInput | $Enums.GenderEnum
  }

  export type HostelCommitteeCreateManyInput = {
    id?: number
    name: string
    position: string
    contact_number: string
    date_of_join: Date | string
    email?: string | null
    gender: $Enums.GenderEnum
  }

  export type HostelCommitteeUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    contact_number?: StringFieldUpdateOperationsInput | string
    date_of_join?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: EnumGenderEnumFieldUpdateOperationsInput | $Enums.GenderEnum
  }

  export type HostelCommitteeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    contact_number?: StringFieldUpdateOperationsInput | string
    date_of_join?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: EnumGenderEnumFieldUpdateOperationsInput | $Enums.GenderEnum
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type AdminCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    password?: SortOrder
    email?: SortOrder
    room_count?: SortOrder
  }

  export type AdminAvgOrderByAggregateInput = {
    id?: SortOrder
    room_count?: SortOrder
  }

  export type AdminMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    password?: SortOrder
    email?: SortOrder
    room_count?: SortOrder
  }

  export type AdminMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    password?: SortOrder
    email?: SortOrder
    room_count?: SortOrder
  }

  export type AdminSumOrderByAggregateInput = {
    id?: SortOrder
    room_count?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumRoleEnumFilter<$PrismaModel = never> = {
    equals?: $Enums.RoleEnum | EnumRoleEnumFieldRefInput<$PrismaModel>
    in?: $Enums.RoleEnum[] | ListEnumRoleEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.RoleEnum[] | ListEnumRoleEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleEnumFilter<$PrismaModel> | $Enums.RoleEnum
  }

  export type StaffListRelationFilter = {
    every?: StaffWhereInput
    some?: StaffWhereInput
    none?: StaffWhereInput
  }

  export type StaffOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RoleCountOrderByAggregateInput = {
    role_id?: SortOrder
    role?: SortOrder
  }

  export type RoleAvgOrderByAggregateInput = {
    role_id?: SortOrder
  }

  export type RoleMaxOrderByAggregateInput = {
    role_id?: SortOrder
    role?: SortOrder
  }

  export type RoleMinOrderByAggregateInput = {
    role_id?: SortOrder
    role?: SortOrder
  }

  export type RoleSumOrderByAggregateInput = {
    role_id?: SortOrder
  }

  export type EnumRoleEnumWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RoleEnum | EnumRoleEnumFieldRefInput<$PrismaModel>
    in?: $Enums.RoleEnum[] | ListEnumRoleEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.RoleEnum[] | ListEnumRoleEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleEnumWithAggregatesFilter<$PrismaModel> | $Enums.RoleEnum
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleEnumFilter<$PrismaModel>
    _max?: NestedEnumRoleEnumFilter<$PrismaModel>
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type DecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type EnumGenderEnumFilter<$PrismaModel = never> = {
    equals?: $Enums.GenderEnum | EnumGenderEnumFieldRefInput<$PrismaModel>
    in?: $Enums.GenderEnum[] | ListEnumGenderEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.GenderEnum[] | ListEnumGenderEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumGenderEnumFilter<$PrismaModel> | $Enums.GenderEnum
  }

  export type RoleScalarRelationFilter = {
    is?: RoleWhereInput
    isNot?: RoleWhereInput
  }

  export type StaffCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    contact_number?: SortOrder
    date_of_join?: SortOrder
    salary?: SortOrder
    gender?: SortOrder
    age?: SortOrder
    roll_id?: SortOrder
  }

  export type StaffAvgOrderByAggregateInput = {
    id?: SortOrder
    salary?: SortOrder
    age?: SortOrder
    roll_id?: SortOrder
  }

  export type StaffMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    contact_number?: SortOrder
    date_of_join?: SortOrder
    salary?: SortOrder
    gender?: SortOrder
    age?: SortOrder
    roll_id?: SortOrder
  }

  export type StaffMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    contact_number?: SortOrder
    date_of_join?: SortOrder
    salary?: SortOrder
    gender?: SortOrder
    age?: SortOrder
    roll_id?: SortOrder
  }

  export type StaffSumOrderByAggregateInput = {
    id?: SortOrder
    salary?: SortOrder
    age?: SortOrder
    roll_id?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type EnumGenderEnumWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.GenderEnum | EnumGenderEnumFieldRefInput<$PrismaModel>
    in?: $Enums.GenderEnum[] | ListEnumGenderEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.GenderEnum[] | ListEnumGenderEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumGenderEnumWithAggregatesFilter<$PrismaModel> | $Enums.GenderEnum
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumGenderEnumFilter<$PrismaModel>
    _max?: NestedEnumGenderEnumFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type Student2NullableScalarRelationFilter = {
    is?: Student2WhereInput | null
    isNot?: Student2WhereInput | null
  }

  export type FeedbackListRelationFilter = {
    every?: FeedbackWhereInput
    some?: FeedbackWhereInput
    none?: FeedbackWhereInput
  }

  export type GatePassListRelationFilter = {
    every?: GatePassWhereInput
    some?: GatePassWhereInput
    none?: GatePassWhereInput
  }

  export type FeePaymentListRelationFilter = {
    every?: FeePaymentWhereInput
    some?: FeePaymentWhereInput
    none?: FeePaymentWhereInput
  }

  export type RoomNullableScalarRelationFilter = {
    is?: RoomWhereInput | null
    isNot?: RoomWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type FeedbackOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GatePassOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FeePaymentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type Student1CountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    gender?: SortOrder
    age?: SortOrder
    role?: SortOrder
  }

  export type Student1AvgOrderByAggregateInput = {
    id?: SortOrder
    age?: SortOrder
  }

  export type Student1MaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    gender?: SortOrder
    age?: SortOrder
    role?: SortOrder
  }

  export type Student1MinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    gender?: SortOrder
    age?: SortOrder
    role?: SortOrder
  }

  export type Student1SumOrderByAggregateInput = {
    id?: SortOrder
    age?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type Student1ScalarRelationFilter = {
    is?: Student1WhereInput
    isNot?: Student1WhereInput
  }

  export type CollegeScalarRelationFilter = {
    is?: CollegeWhereInput
    isNot?: CollegeWhereInput
  }

  export type Student2CountOrderByAggregateInput = {
    student1_id?: SortOrder
    mobile_number?: SortOrder
    address?: SortOrder
    emergency_number?: SortOrder
    parent_contact?: SortOrder
    roll_number?: SortOrder
  }

  export type Student2AvgOrderByAggregateInput = {
    student1_id?: SortOrder
    roll_number?: SortOrder
  }

  export type Student2MaxOrderByAggregateInput = {
    student1_id?: SortOrder
    mobile_number?: SortOrder
    address?: SortOrder
    emergency_number?: SortOrder
    parent_contact?: SortOrder
    roll_number?: SortOrder
  }

  export type Student2MinOrderByAggregateInput = {
    student1_id?: SortOrder
    mobile_number?: SortOrder
    address?: SortOrder
    emergency_number?: SortOrder
    parent_contact?: SortOrder
    roll_number?: SortOrder
  }

  export type Student2SumOrderByAggregateInput = {
    student1_id?: SortOrder
    roll_number?: SortOrder
  }

  export type Student2ListRelationFilter = {
    every?: Student2WhereInput
    some?: Student2WhereInput
    none?: Student2WhereInput
  }

  export type Student2OrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CollegeCountOrderByAggregateInput = {
    roll_number?: SortOrder
    college_name?: SortOrder
  }

  export type CollegeAvgOrderByAggregateInput = {
    roll_number?: SortOrder
  }

  export type CollegeMaxOrderByAggregateInput = {
    roll_number?: SortOrder
    college_name?: SortOrder
  }

  export type CollegeMinOrderByAggregateInput = {
    roll_number?: SortOrder
    college_name?: SortOrder
  }

  export type CollegeSumOrderByAggregateInput = {
    roll_number?: SortOrder
  }

  export type RoomCountOrderByAggregateInput = {
    id?: SortOrder
    student_id?: SortOrder
    room_id?: SortOrder
  }

  export type RoomAvgOrderByAggregateInput = {
    id?: SortOrder
    student_id?: SortOrder
  }

  export type RoomMaxOrderByAggregateInput = {
    id?: SortOrder
    student_id?: SortOrder
    room_id?: SortOrder
  }

  export type RoomMinOrderByAggregateInput = {
    id?: SortOrder
    student_id?: SortOrder
    room_id?: SortOrder
  }

  export type RoomSumOrderByAggregateInput = {
    id?: SortOrder
    student_id?: SortOrder
  }

  export type FeedbackCountOrderByAggregateInput = {
    id?: SortOrder
    student1_id?: SortOrder
    issue?: SortOrder
    room_number?: SortOrder
    createdAt?: SortOrder
  }

  export type FeedbackAvgOrderByAggregateInput = {
    id?: SortOrder
    student1_id?: SortOrder
  }

  export type FeedbackMaxOrderByAggregateInput = {
    id?: SortOrder
    student1_id?: SortOrder
    issue?: SortOrder
    room_number?: SortOrder
    createdAt?: SortOrder
  }

  export type FeedbackMinOrderByAggregateInput = {
    id?: SortOrder
    student1_id?: SortOrder
    issue?: SortOrder
    room_number?: SortOrder
    createdAt?: SortOrder
  }

  export type FeedbackSumOrderByAggregateInput = {
    id?: SortOrder
    student1_id?: SortOrder
  }

  export type EnumApprovalEnumFilter<$PrismaModel = never> = {
    equals?: $Enums.ApprovalEnum | EnumApprovalEnumFieldRefInput<$PrismaModel>
    in?: $Enums.ApprovalEnum[] | ListEnumApprovalEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.ApprovalEnum[] | ListEnumApprovalEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumApprovalEnumFilter<$PrismaModel> | $Enums.ApprovalEnum
  }

  export type GatePassCountOrderByAggregateInput = {
    id?: SortOrder
    reason?: SortOrder
    leave_date?: SortOrder
    arrival_date?: SortOrder
    approval?: SortOrder
    student1_id?: SortOrder
    createdAt?: SortOrder
  }

  export type GatePassAvgOrderByAggregateInput = {
    id?: SortOrder
    student1_id?: SortOrder
  }

  export type GatePassMaxOrderByAggregateInput = {
    id?: SortOrder
    reason?: SortOrder
    leave_date?: SortOrder
    arrival_date?: SortOrder
    approval?: SortOrder
    student1_id?: SortOrder
    createdAt?: SortOrder
  }

  export type GatePassMinOrderByAggregateInput = {
    id?: SortOrder
    reason?: SortOrder
    leave_date?: SortOrder
    arrival_date?: SortOrder
    approval?: SortOrder
    student1_id?: SortOrder
    createdAt?: SortOrder
  }

  export type GatePassSumOrderByAggregateInput = {
    id?: SortOrder
    student1_id?: SortOrder
  }

  export type EnumApprovalEnumWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ApprovalEnum | EnumApprovalEnumFieldRefInput<$PrismaModel>
    in?: $Enums.ApprovalEnum[] | ListEnumApprovalEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.ApprovalEnum[] | ListEnumApprovalEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumApprovalEnumWithAggregatesFilter<$PrismaModel> | $Enums.ApprovalEnum
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumApprovalEnumFilter<$PrismaModel>
    _max?: NestedEnumApprovalEnumFilter<$PrismaModel>
  }

  export type FeePaymentCountOrderByAggregateInput = {
    id?: SortOrder
    semester?: SortOrder
    date_of_payment?: SortOrder
    mode_of_payment?: SortOrder
    student_id?: SortOrder
  }

  export type FeePaymentAvgOrderByAggregateInput = {
    id?: SortOrder
    semester?: SortOrder
    student_id?: SortOrder
  }

  export type FeePaymentMaxOrderByAggregateInput = {
    id?: SortOrder
    semester?: SortOrder
    date_of_payment?: SortOrder
    mode_of_payment?: SortOrder
    student_id?: SortOrder
  }

  export type FeePaymentMinOrderByAggregateInput = {
    id?: SortOrder
    semester?: SortOrder
    date_of_payment?: SortOrder
    mode_of_payment?: SortOrder
    student_id?: SortOrder
  }

  export type FeePaymentSumOrderByAggregateInput = {
    id?: SortOrder
    semester?: SortOrder
    student_id?: SortOrder
  }

  export type MessMenuCountOrderByAggregateInput = {
    id?: SortOrder
    day?: SortOrder
    meal_type?: SortOrder
    items?: SortOrder
    createdAt?: SortOrder
  }

  export type MessMenuAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type MessMenuMaxOrderByAggregateInput = {
    id?: SortOrder
    day?: SortOrder
    meal_type?: SortOrder
    items?: SortOrder
    createdAt?: SortOrder
  }

  export type MessMenuMinOrderByAggregateInput = {
    id?: SortOrder
    day?: SortOrder
    meal_type?: SortOrder
    items?: SortOrder
    createdAt?: SortOrder
  }

  export type MessMenuSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type HostelCommitteeCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    position?: SortOrder
    contact_number?: SortOrder
    date_of_join?: SortOrder
    email?: SortOrder
    gender?: SortOrder
  }

  export type HostelCommitteeAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type HostelCommitteeMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    position?: SortOrder
    contact_number?: SortOrder
    date_of_join?: SortOrder
    email?: SortOrder
    gender?: SortOrder
  }

  export type HostelCommitteeMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    position?: SortOrder
    contact_number?: SortOrder
    date_of_join?: SortOrder
    email?: SortOrder
    gender?: SortOrder
  }

  export type HostelCommitteeSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type StaffCreateNestedManyWithoutRoleInput = {
    create?: XOR<StaffCreateWithoutRoleInput, StaffUncheckedCreateWithoutRoleInput> | StaffCreateWithoutRoleInput[] | StaffUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: StaffCreateOrConnectWithoutRoleInput | StaffCreateOrConnectWithoutRoleInput[]
    createMany?: StaffCreateManyRoleInputEnvelope
    connect?: StaffWhereUniqueInput | StaffWhereUniqueInput[]
  }

  export type StaffUncheckedCreateNestedManyWithoutRoleInput = {
    create?: XOR<StaffCreateWithoutRoleInput, StaffUncheckedCreateWithoutRoleInput> | StaffCreateWithoutRoleInput[] | StaffUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: StaffCreateOrConnectWithoutRoleInput | StaffCreateOrConnectWithoutRoleInput[]
    createMany?: StaffCreateManyRoleInputEnvelope
    connect?: StaffWhereUniqueInput | StaffWhereUniqueInput[]
  }

  export type EnumRoleEnumFieldUpdateOperationsInput = {
    set?: $Enums.RoleEnum
  }

  export type StaffUpdateManyWithoutRoleNestedInput = {
    create?: XOR<StaffCreateWithoutRoleInput, StaffUncheckedCreateWithoutRoleInput> | StaffCreateWithoutRoleInput[] | StaffUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: StaffCreateOrConnectWithoutRoleInput | StaffCreateOrConnectWithoutRoleInput[]
    upsert?: StaffUpsertWithWhereUniqueWithoutRoleInput | StaffUpsertWithWhereUniqueWithoutRoleInput[]
    createMany?: StaffCreateManyRoleInputEnvelope
    set?: StaffWhereUniqueInput | StaffWhereUniqueInput[]
    disconnect?: StaffWhereUniqueInput | StaffWhereUniqueInput[]
    delete?: StaffWhereUniqueInput | StaffWhereUniqueInput[]
    connect?: StaffWhereUniqueInput | StaffWhereUniqueInput[]
    update?: StaffUpdateWithWhereUniqueWithoutRoleInput | StaffUpdateWithWhereUniqueWithoutRoleInput[]
    updateMany?: StaffUpdateManyWithWhereWithoutRoleInput | StaffUpdateManyWithWhereWithoutRoleInput[]
    deleteMany?: StaffScalarWhereInput | StaffScalarWhereInput[]
  }

  export type StaffUncheckedUpdateManyWithoutRoleNestedInput = {
    create?: XOR<StaffCreateWithoutRoleInput, StaffUncheckedCreateWithoutRoleInput> | StaffCreateWithoutRoleInput[] | StaffUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: StaffCreateOrConnectWithoutRoleInput | StaffCreateOrConnectWithoutRoleInput[]
    upsert?: StaffUpsertWithWhereUniqueWithoutRoleInput | StaffUpsertWithWhereUniqueWithoutRoleInput[]
    createMany?: StaffCreateManyRoleInputEnvelope
    set?: StaffWhereUniqueInput | StaffWhereUniqueInput[]
    disconnect?: StaffWhereUniqueInput | StaffWhereUniqueInput[]
    delete?: StaffWhereUniqueInput | StaffWhereUniqueInput[]
    connect?: StaffWhereUniqueInput | StaffWhereUniqueInput[]
    update?: StaffUpdateWithWhereUniqueWithoutRoleInput | StaffUpdateWithWhereUniqueWithoutRoleInput[]
    updateMany?: StaffUpdateManyWithWhereWithoutRoleInput | StaffUpdateManyWithWhereWithoutRoleInput[]
    deleteMany?: StaffScalarWhereInput | StaffScalarWhereInput[]
  }

  export type RoleCreateNestedOneWithoutStaffInput = {
    create?: XOR<RoleCreateWithoutStaffInput, RoleUncheckedCreateWithoutStaffInput>
    connectOrCreate?: RoleCreateOrConnectWithoutStaffInput
    connect?: RoleWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type EnumGenderEnumFieldUpdateOperationsInput = {
    set?: $Enums.GenderEnum
  }

  export type RoleUpdateOneRequiredWithoutStaffNestedInput = {
    create?: XOR<RoleCreateWithoutStaffInput, RoleUncheckedCreateWithoutStaffInput>
    connectOrCreate?: RoleCreateOrConnectWithoutStaffInput
    upsert?: RoleUpsertWithoutStaffInput
    connect?: RoleWhereUniqueInput
    update?: XOR<XOR<RoleUpdateToOneWithWhereWithoutStaffInput, RoleUpdateWithoutStaffInput>, RoleUncheckedUpdateWithoutStaffInput>
  }

  export type Student2CreateNestedOneWithoutStudent1Input = {
    create?: XOR<Student2CreateWithoutStudent1Input, Student2UncheckedCreateWithoutStudent1Input>
    connectOrCreate?: Student2CreateOrConnectWithoutStudent1Input
    connect?: Student2WhereUniqueInput
  }

  export type FeedbackCreateNestedManyWithoutStudentInput = {
    create?: XOR<FeedbackCreateWithoutStudentInput, FeedbackUncheckedCreateWithoutStudentInput> | FeedbackCreateWithoutStudentInput[] | FeedbackUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutStudentInput | FeedbackCreateOrConnectWithoutStudentInput[]
    createMany?: FeedbackCreateManyStudentInputEnvelope
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
  }

  export type GatePassCreateNestedManyWithoutStudentInput = {
    create?: XOR<GatePassCreateWithoutStudentInput, GatePassUncheckedCreateWithoutStudentInput> | GatePassCreateWithoutStudentInput[] | GatePassUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: GatePassCreateOrConnectWithoutStudentInput | GatePassCreateOrConnectWithoutStudentInput[]
    createMany?: GatePassCreateManyStudentInputEnvelope
    connect?: GatePassWhereUniqueInput | GatePassWhereUniqueInput[]
  }

  export type FeePaymentCreateNestedManyWithoutStudentInput = {
    create?: XOR<FeePaymentCreateWithoutStudentInput, FeePaymentUncheckedCreateWithoutStudentInput> | FeePaymentCreateWithoutStudentInput[] | FeePaymentUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: FeePaymentCreateOrConnectWithoutStudentInput | FeePaymentCreateOrConnectWithoutStudentInput[]
    createMany?: FeePaymentCreateManyStudentInputEnvelope
    connect?: FeePaymentWhereUniqueInput | FeePaymentWhereUniqueInput[]
  }

  export type RoomCreateNestedOneWithoutStudentInput = {
    create?: XOR<RoomCreateWithoutStudentInput, RoomUncheckedCreateWithoutStudentInput>
    connectOrCreate?: RoomCreateOrConnectWithoutStudentInput
    connect?: RoomWhereUniqueInput
  }

  export type Student2UncheckedCreateNestedOneWithoutStudent1Input = {
    create?: XOR<Student2CreateWithoutStudent1Input, Student2UncheckedCreateWithoutStudent1Input>
    connectOrCreate?: Student2CreateOrConnectWithoutStudent1Input
    connect?: Student2WhereUniqueInput
  }

  export type FeedbackUncheckedCreateNestedManyWithoutStudentInput = {
    create?: XOR<FeedbackCreateWithoutStudentInput, FeedbackUncheckedCreateWithoutStudentInput> | FeedbackCreateWithoutStudentInput[] | FeedbackUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutStudentInput | FeedbackCreateOrConnectWithoutStudentInput[]
    createMany?: FeedbackCreateManyStudentInputEnvelope
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
  }

  export type GatePassUncheckedCreateNestedManyWithoutStudentInput = {
    create?: XOR<GatePassCreateWithoutStudentInput, GatePassUncheckedCreateWithoutStudentInput> | GatePassCreateWithoutStudentInput[] | GatePassUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: GatePassCreateOrConnectWithoutStudentInput | GatePassCreateOrConnectWithoutStudentInput[]
    createMany?: GatePassCreateManyStudentInputEnvelope
    connect?: GatePassWhereUniqueInput | GatePassWhereUniqueInput[]
  }

  export type FeePaymentUncheckedCreateNestedManyWithoutStudentInput = {
    create?: XOR<FeePaymentCreateWithoutStudentInput, FeePaymentUncheckedCreateWithoutStudentInput> | FeePaymentCreateWithoutStudentInput[] | FeePaymentUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: FeePaymentCreateOrConnectWithoutStudentInput | FeePaymentCreateOrConnectWithoutStudentInput[]
    createMany?: FeePaymentCreateManyStudentInputEnvelope
    connect?: FeePaymentWhereUniqueInput | FeePaymentWhereUniqueInput[]
  }

  export type RoomUncheckedCreateNestedOneWithoutStudentInput = {
    create?: XOR<RoomCreateWithoutStudentInput, RoomUncheckedCreateWithoutStudentInput>
    connectOrCreate?: RoomCreateOrConnectWithoutStudentInput
    connect?: RoomWhereUniqueInput
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type Student2UpdateOneWithoutStudent1NestedInput = {
    create?: XOR<Student2CreateWithoutStudent1Input, Student2UncheckedCreateWithoutStudent1Input>
    connectOrCreate?: Student2CreateOrConnectWithoutStudent1Input
    upsert?: Student2UpsertWithoutStudent1Input
    disconnect?: Student2WhereInput | boolean
    delete?: Student2WhereInput | boolean
    connect?: Student2WhereUniqueInput
    update?: XOR<XOR<Student2UpdateToOneWithWhereWithoutStudent1Input, Student2UpdateWithoutStudent1Input>, Student2UncheckedUpdateWithoutStudent1Input>
  }

  export type FeedbackUpdateManyWithoutStudentNestedInput = {
    create?: XOR<FeedbackCreateWithoutStudentInput, FeedbackUncheckedCreateWithoutStudentInput> | FeedbackCreateWithoutStudentInput[] | FeedbackUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutStudentInput | FeedbackCreateOrConnectWithoutStudentInput[]
    upsert?: FeedbackUpsertWithWhereUniqueWithoutStudentInput | FeedbackUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: FeedbackCreateManyStudentInputEnvelope
    set?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    disconnect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    delete?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    update?: FeedbackUpdateWithWhereUniqueWithoutStudentInput | FeedbackUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: FeedbackUpdateManyWithWhereWithoutStudentInput | FeedbackUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: FeedbackScalarWhereInput | FeedbackScalarWhereInput[]
  }

  export type GatePassUpdateManyWithoutStudentNestedInput = {
    create?: XOR<GatePassCreateWithoutStudentInput, GatePassUncheckedCreateWithoutStudentInput> | GatePassCreateWithoutStudentInput[] | GatePassUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: GatePassCreateOrConnectWithoutStudentInput | GatePassCreateOrConnectWithoutStudentInput[]
    upsert?: GatePassUpsertWithWhereUniqueWithoutStudentInput | GatePassUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: GatePassCreateManyStudentInputEnvelope
    set?: GatePassWhereUniqueInput | GatePassWhereUniqueInput[]
    disconnect?: GatePassWhereUniqueInput | GatePassWhereUniqueInput[]
    delete?: GatePassWhereUniqueInput | GatePassWhereUniqueInput[]
    connect?: GatePassWhereUniqueInput | GatePassWhereUniqueInput[]
    update?: GatePassUpdateWithWhereUniqueWithoutStudentInput | GatePassUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: GatePassUpdateManyWithWhereWithoutStudentInput | GatePassUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: GatePassScalarWhereInput | GatePassScalarWhereInput[]
  }

  export type FeePaymentUpdateManyWithoutStudentNestedInput = {
    create?: XOR<FeePaymentCreateWithoutStudentInput, FeePaymentUncheckedCreateWithoutStudentInput> | FeePaymentCreateWithoutStudentInput[] | FeePaymentUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: FeePaymentCreateOrConnectWithoutStudentInput | FeePaymentCreateOrConnectWithoutStudentInput[]
    upsert?: FeePaymentUpsertWithWhereUniqueWithoutStudentInput | FeePaymentUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: FeePaymentCreateManyStudentInputEnvelope
    set?: FeePaymentWhereUniqueInput | FeePaymentWhereUniqueInput[]
    disconnect?: FeePaymentWhereUniqueInput | FeePaymentWhereUniqueInput[]
    delete?: FeePaymentWhereUniqueInput | FeePaymentWhereUniqueInput[]
    connect?: FeePaymentWhereUniqueInput | FeePaymentWhereUniqueInput[]
    update?: FeePaymentUpdateWithWhereUniqueWithoutStudentInput | FeePaymentUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: FeePaymentUpdateManyWithWhereWithoutStudentInput | FeePaymentUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: FeePaymentScalarWhereInput | FeePaymentScalarWhereInput[]
  }

  export type RoomUpdateOneWithoutStudentNestedInput = {
    create?: XOR<RoomCreateWithoutStudentInput, RoomUncheckedCreateWithoutStudentInput>
    connectOrCreate?: RoomCreateOrConnectWithoutStudentInput
    upsert?: RoomUpsertWithoutStudentInput
    disconnect?: RoomWhereInput | boolean
    delete?: RoomWhereInput | boolean
    connect?: RoomWhereUniqueInput
    update?: XOR<XOR<RoomUpdateToOneWithWhereWithoutStudentInput, RoomUpdateWithoutStudentInput>, RoomUncheckedUpdateWithoutStudentInput>
  }

  export type Student2UncheckedUpdateOneWithoutStudent1NestedInput = {
    create?: XOR<Student2CreateWithoutStudent1Input, Student2UncheckedCreateWithoutStudent1Input>
    connectOrCreate?: Student2CreateOrConnectWithoutStudent1Input
    upsert?: Student2UpsertWithoutStudent1Input
    disconnect?: Student2WhereInput | boolean
    delete?: Student2WhereInput | boolean
    connect?: Student2WhereUniqueInput
    update?: XOR<XOR<Student2UpdateToOneWithWhereWithoutStudent1Input, Student2UpdateWithoutStudent1Input>, Student2UncheckedUpdateWithoutStudent1Input>
  }

  export type FeedbackUncheckedUpdateManyWithoutStudentNestedInput = {
    create?: XOR<FeedbackCreateWithoutStudentInput, FeedbackUncheckedCreateWithoutStudentInput> | FeedbackCreateWithoutStudentInput[] | FeedbackUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutStudentInput | FeedbackCreateOrConnectWithoutStudentInput[]
    upsert?: FeedbackUpsertWithWhereUniqueWithoutStudentInput | FeedbackUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: FeedbackCreateManyStudentInputEnvelope
    set?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    disconnect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    delete?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    update?: FeedbackUpdateWithWhereUniqueWithoutStudentInput | FeedbackUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: FeedbackUpdateManyWithWhereWithoutStudentInput | FeedbackUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: FeedbackScalarWhereInput | FeedbackScalarWhereInput[]
  }

  export type GatePassUncheckedUpdateManyWithoutStudentNestedInput = {
    create?: XOR<GatePassCreateWithoutStudentInput, GatePassUncheckedCreateWithoutStudentInput> | GatePassCreateWithoutStudentInput[] | GatePassUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: GatePassCreateOrConnectWithoutStudentInput | GatePassCreateOrConnectWithoutStudentInput[]
    upsert?: GatePassUpsertWithWhereUniqueWithoutStudentInput | GatePassUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: GatePassCreateManyStudentInputEnvelope
    set?: GatePassWhereUniqueInput | GatePassWhereUniqueInput[]
    disconnect?: GatePassWhereUniqueInput | GatePassWhereUniqueInput[]
    delete?: GatePassWhereUniqueInput | GatePassWhereUniqueInput[]
    connect?: GatePassWhereUniqueInput | GatePassWhereUniqueInput[]
    update?: GatePassUpdateWithWhereUniqueWithoutStudentInput | GatePassUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: GatePassUpdateManyWithWhereWithoutStudentInput | GatePassUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: GatePassScalarWhereInput | GatePassScalarWhereInput[]
  }

  export type FeePaymentUncheckedUpdateManyWithoutStudentNestedInput = {
    create?: XOR<FeePaymentCreateWithoutStudentInput, FeePaymentUncheckedCreateWithoutStudentInput> | FeePaymentCreateWithoutStudentInput[] | FeePaymentUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: FeePaymentCreateOrConnectWithoutStudentInput | FeePaymentCreateOrConnectWithoutStudentInput[]
    upsert?: FeePaymentUpsertWithWhereUniqueWithoutStudentInput | FeePaymentUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: FeePaymentCreateManyStudentInputEnvelope
    set?: FeePaymentWhereUniqueInput | FeePaymentWhereUniqueInput[]
    disconnect?: FeePaymentWhereUniqueInput | FeePaymentWhereUniqueInput[]
    delete?: FeePaymentWhereUniqueInput | FeePaymentWhereUniqueInput[]
    connect?: FeePaymentWhereUniqueInput | FeePaymentWhereUniqueInput[]
    update?: FeePaymentUpdateWithWhereUniqueWithoutStudentInput | FeePaymentUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: FeePaymentUpdateManyWithWhereWithoutStudentInput | FeePaymentUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: FeePaymentScalarWhereInput | FeePaymentScalarWhereInput[]
  }

  export type RoomUncheckedUpdateOneWithoutStudentNestedInput = {
    create?: XOR<RoomCreateWithoutStudentInput, RoomUncheckedCreateWithoutStudentInput>
    connectOrCreate?: RoomCreateOrConnectWithoutStudentInput
    upsert?: RoomUpsertWithoutStudentInput
    disconnect?: RoomWhereInput | boolean
    delete?: RoomWhereInput | boolean
    connect?: RoomWhereUniqueInput
    update?: XOR<XOR<RoomUpdateToOneWithWhereWithoutStudentInput, RoomUpdateWithoutStudentInput>, RoomUncheckedUpdateWithoutStudentInput>
  }

  export type Student1CreateNestedOneWithoutStudent2Input = {
    create?: XOR<Student1CreateWithoutStudent2Input, Student1UncheckedCreateWithoutStudent2Input>
    connectOrCreate?: Student1CreateOrConnectWithoutStudent2Input
    connect?: Student1WhereUniqueInput
  }

  export type CollegeCreateNestedOneWithoutStudentsInput = {
    create?: XOR<CollegeCreateWithoutStudentsInput, CollegeUncheckedCreateWithoutStudentsInput>
    connectOrCreate?: CollegeCreateOrConnectWithoutStudentsInput
    connect?: CollegeWhereUniqueInput
  }

  export type Student1UpdateOneRequiredWithoutStudent2NestedInput = {
    create?: XOR<Student1CreateWithoutStudent2Input, Student1UncheckedCreateWithoutStudent2Input>
    connectOrCreate?: Student1CreateOrConnectWithoutStudent2Input
    upsert?: Student1UpsertWithoutStudent2Input
    connect?: Student1WhereUniqueInput
    update?: XOR<XOR<Student1UpdateToOneWithWhereWithoutStudent2Input, Student1UpdateWithoutStudent2Input>, Student1UncheckedUpdateWithoutStudent2Input>
  }

  export type CollegeUpdateOneRequiredWithoutStudentsNestedInput = {
    create?: XOR<CollegeCreateWithoutStudentsInput, CollegeUncheckedCreateWithoutStudentsInput>
    connectOrCreate?: CollegeCreateOrConnectWithoutStudentsInput
    upsert?: CollegeUpsertWithoutStudentsInput
    connect?: CollegeWhereUniqueInput
    update?: XOR<XOR<CollegeUpdateToOneWithWhereWithoutStudentsInput, CollegeUpdateWithoutStudentsInput>, CollegeUncheckedUpdateWithoutStudentsInput>
  }

  export type Student2CreateNestedManyWithoutCollegeInput = {
    create?: XOR<Student2CreateWithoutCollegeInput, Student2UncheckedCreateWithoutCollegeInput> | Student2CreateWithoutCollegeInput[] | Student2UncheckedCreateWithoutCollegeInput[]
    connectOrCreate?: Student2CreateOrConnectWithoutCollegeInput | Student2CreateOrConnectWithoutCollegeInput[]
    createMany?: Student2CreateManyCollegeInputEnvelope
    connect?: Student2WhereUniqueInput | Student2WhereUniqueInput[]
  }

  export type Student2UncheckedCreateNestedManyWithoutCollegeInput = {
    create?: XOR<Student2CreateWithoutCollegeInput, Student2UncheckedCreateWithoutCollegeInput> | Student2CreateWithoutCollegeInput[] | Student2UncheckedCreateWithoutCollegeInput[]
    connectOrCreate?: Student2CreateOrConnectWithoutCollegeInput | Student2CreateOrConnectWithoutCollegeInput[]
    createMany?: Student2CreateManyCollegeInputEnvelope
    connect?: Student2WhereUniqueInput | Student2WhereUniqueInput[]
  }

  export type Student2UpdateManyWithoutCollegeNestedInput = {
    create?: XOR<Student2CreateWithoutCollegeInput, Student2UncheckedCreateWithoutCollegeInput> | Student2CreateWithoutCollegeInput[] | Student2UncheckedCreateWithoutCollegeInput[]
    connectOrCreate?: Student2CreateOrConnectWithoutCollegeInput | Student2CreateOrConnectWithoutCollegeInput[]
    upsert?: Student2UpsertWithWhereUniqueWithoutCollegeInput | Student2UpsertWithWhereUniqueWithoutCollegeInput[]
    createMany?: Student2CreateManyCollegeInputEnvelope
    set?: Student2WhereUniqueInput | Student2WhereUniqueInput[]
    disconnect?: Student2WhereUniqueInput | Student2WhereUniqueInput[]
    delete?: Student2WhereUniqueInput | Student2WhereUniqueInput[]
    connect?: Student2WhereUniqueInput | Student2WhereUniqueInput[]
    update?: Student2UpdateWithWhereUniqueWithoutCollegeInput | Student2UpdateWithWhereUniqueWithoutCollegeInput[]
    updateMany?: Student2UpdateManyWithWhereWithoutCollegeInput | Student2UpdateManyWithWhereWithoutCollegeInput[]
    deleteMany?: Student2ScalarWhereInput | Student2ScalarWhereInput[]
  }

  export type Student2UncheckedUpdateManyWithoutCollegeNestedInput = {
    create?: XOR<Student2CreateWithoutCollegeInput, Student2UncheckedCreateWithoutCollegeInput> | Student2CreateWithoutCollegeInput[] | Student2UncheckedCreateWithoutCollegeInput[]
    connectOrCreate?: Student2CreateOrConnectWithoutCollegeInput | Student2CreateOrConnectWithoutCollegeInput[]
    upsert?: Student2UpsertWithWhereUniqueWithoutCollegeInput | Student2UpsertWithWhereUniqueWithoutCollegeInput[]
    createMany?: Student2CreateManyCollegeInputEnvelope
    set?: Student2WhereUniqueInput | Student2WhereUniqueInput[]
    disconnect?: Student2WhereUniqueInput | Student2WhereUniqueInput[]
    delete?: Student2WhereUniqueInput | Student2WhereUniqueInput[]
    connect?: Student2WhereUniqueInput | Student2WhereUniqueInput[]
    update?: Student2UpdateWithWhereUniqueWithoutCollegeInput | Student2UpdateWithWhereUniqueWithoutCollegeInput[]
    updateMany?: Student2UpdateManyWithWhereWithoutCollegeInput | Student2UpdateManyWithWhereWithoutCollegeInput[]
    deleteMany?: Student2ScalarWhereInput | Student2ScalarWhereInput[]
  }

  export type Student1CreateNestedOneWithoutRoomInput = {
    create?: XOR<Student1CreateWithoutRoomInput, Student1UncheckedCreateWithoutRoomInput>
    connectOrCreate?: Student1CreateOrConnectWithoutRoomInput
    connect?: Student1WhereUniqueInput
  }

  export type Student1UpdateOneRequiredWithoutRoomNestedInput = {
    create?: XOR<Student1CreateWithoutRoomInput, Student1UncheckedCreateWithoutRoomInput>
    connectOrCreate?: Student1CreateOrConnectWithoutRoomInput
    upsert?: Student1UpsertWithoutRoomInput
    connect?: Student1WhereUniqueInput
    update?: XOR<XOR<Student1UpdateToOneWithWhereWithoutRoomInput, Student1UpdateWithoutRoomInput>, Student1UncheckedUpdateWithoutRoomInput>
  }

  export type Student1CreateNestedOneWithoutFeedbacksInput = {
    create?: XOR<Student1CreateWithoutFeedbacksInput, Student1UncheckedCreateWithoutFeedbacksInput>
    connectOrCreate?: Student1CreateOrConnectWithoutFeedbacksInput
    connect?: Student1WhereUniqueInput
  }

  export type Student1UpdateOneRequiredWithoutFeedbacksNestedInput = {
    create?: XOR<Student1CreateWithoutFeedbacksInput, Student1UncheckedCreateWithoutFeedbacksInput>
    connectOrCreate?: Student1CreateOrConnectWithoutFeedbacksInput
    upsert?: Student1UpsertWithoutFeedbacksInput
    connect?: Student1WhereUniqueInput
    update?: XOR<XOR<Student1UpdateToOneWithWhereWithoutFeedbacksInput, Student1UpdateWithoutFeedbacksInput>, Student1UncheckedUpdateWithoutFeedbacksInput>
  }

  export type Student1CreateNestedOneWithoutGatePassesInput = {
    create?: XOR<Student1CreateWithoutGatePassesInput, Student1UncheckedCreateWithoutGatePassesInput>
    connectOrCreate?: Student1CreateOrConnectWithoutGatePassesInput
    connect?: Student1WhereUniqueInput
  }

  export type EnumApprovalEnumFieldUpdateOperationsInput = {
    set?: $Enums.ApprovalEnum
  }

  export type Student1UpdateOneRequiredWithoutGatePassesNestedInput = {
    create?: XOR<Student1CreateWithoutGatePassesInput, Student1UncheckedCreateWithoutGatePassesInput>
    connectOrCreate?: Student1CreateOrConnectWithoutGatePassesInput
    upsert?: Student1UpsertWithoutGatePassesInput
    connect?: Student1WhereUniqueInput
    update?: XOR<XOR<Student1UpdateToOneWithWhereWithoutGatePassesInput, Student1UpdateWithoutGatePassesInput>, Student1UncheckedUpdateWithoutGatePassesInput>
  }

  export type Student1CreateNestedOneWithoutFeePaymentsInput = {
    create?: XOR<Student1CreateWithoutFeePaymentsInput, Student1UncheckedCreateWithoutFeePaymentsInput>
    connectOrCreate?: Student1CreateOrConnectWithoutFeePaymentsInput
    connect?: Student1WhereUniqueInput
  }

  export type Student1UpdateOneRequiredWithoutFeePaymentsNestedInput = {
    create?: XOR<Student1CreateWithoutFeePaymentsInput, Student1UncheckedCreateWithoutFeePaymentsInput>
    connectOrCreate?: Student1CreateOrConnectWithoutFeePaymentsInput
    upsert?: Student1UpsertWithoutFeePaymentsInput
    connect?: Student1WhereUniqueInput
    update?: XOR<XOR<Student1UpdateToOneWithWhereWithoutFeePaymentsInput, Student1UpdateWithoutFeePaymentsInput>, Student1UncheckedUpdateWithoutFeePaymentsInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedEnumRoleEnumFilter<$PrismaModel = never> = {
    equals?: $Enums.RoleEnum | EnumRoleEnumFieldRefInput<$PrismaModel>
    in?: $Enums.RoleEnum[] | ListEnumRoleEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.RoleEnum[] | ListEnumRoleEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleEnumFilter<$PrismaModel> | $Enums.RoleEnum
  }

  export type NestedEnumRoleEnumWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RoleEnum | EnumRoleEnumFieldRefInput<$PrismaModel>
    in?: $Enums.RoleEnum[] | ListEnumRoleEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.RoleEnum[] | ListEnumRoleEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleEnumWithAggregatesFilter<$PrismaModel> | $Enums.RoleEnum
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleEnumFilter<$PrismaModel>
    _max?: NestedEnumRoleEnumFilter<$PrismaModel>
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type NestedEnumGenderEnumFilter<$PrismaModel = never> = {
    equals?: $Enums.GenderEnum | EnumGenderEnumFieldRefInput<$PrismaModel>
    in?: $Enums.GenderEnum[] | ListEnumGenderEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.GenderEnum[] | ListEnumGenderEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumGenderEnumFilter<$PrismaModel> | $Enums.GenderEnum
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type NestedEnumGenderEnumWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.GenderEnum | EnumGenderEnumFieldRefInput<$PrismaModel>
    in?: $Enums.GenderEnum[] | ListEnumGenderEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.GenderEnum[] | ListEnumGenderEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumGenderEnumWithAggregatesFilter<$PrismaModel> | $Enums.GenderEnum
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumGenderEnumFilter<$PrismaModel>
    _max?: NestedEnumGenderEnumFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumApprovalEnumFilter<$PrismaModel = never> = {
    equals?: $Enums.ApprovalEnum | EnumApprovalEnumFieldRefInput<$PrismaModel>
    in?: $Enums.ApprovalEnum[] | ListEnumApprovalEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.ApprovalEnum[] | ListEnumApprovalEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumApprovalEnumFilter<$PrismaModel> | $Enums.ApprovalEnum
  }

  export type NestedEnumApprovalEnumWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ApprovalEnum | EnumApprovalEnumFieldRefInput<$PrismaModel>
    in?: $Enums.ApprovalEnum[] | ListEnumApprovalEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.ApprovalEnum[] | ListEnumApprovalEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumApprovalEnumWithAggregatesFilter<$PrismaModel> | $Enums.ApprovalEnum
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumApprovalEnumFilter<$PrismaModel>
    _max?: NestedEnumApprovalEnumFilter<$PrismaModel>
  }

  export type StaffCreateWithoutRoleInput = {
    name: string
    contact_number: string
    date_of_join: Date | string
    salary: Decimal | DecimalJsLike | number | string
    gender: $Enums.GenderEnum
    age: number
  }

  export type StaffUncheckedCreateWithoutRoleInput = {
    id?: number
    name: string
    contact_number: string
    date_of_join: Date | string
    salary: Decimal | DecimalJsLike | number | string
    gender: $Enums.GenderEnum
    age: number
  }

  export type StaffCreateOrConnectWithoutRoleInput = {
    where: StaffWhereUniqueInput
    create: XOR<StaffCreateWithoutRoleInput, StaffUncheckedCreateWithoutRoleInput>
  }

  export type StaffCreateManyRoleInputEnvelope = {
    data: StaffCreateManyRoleInput | StaffCreateManyRoleInput[]
    skipDuplicates?: boolean
  }

  export type StaffUpsertWithWhereUniqueWithoutRoleInput = {
    where: StaffWhereUniqueInput
    update: XOR<StaffUpdateWithoutRoleInput, StaffUncheckedUpdateWithoutRoleInput>
    create: XOR<StaffCreateWithoutRoleInput, StaffUncheckedCreateWithoutRoleInput>
  }

  export type StaffUpdateWithWhereUniqueWithoutRoleInput = {
    where: StaffWhereUniqueInput
    data: XOR<StaffUpdateWithoutRoleInput, StaffUncheckedUpdateWithoutRoleInput>
  }

  export type StaffUpdateManyWithWhereWithoutRoleInput = {
    where: StaffScalarWhereInput
    data: XOR<StaffUpdateManyMutationInput, StaffUncheckedUpdateManyWithoutRoleInput>
  }

  export type StaffScalarWhereInput = {
    AND?: StaffScalarWhereInput | StaffScalarWhereInput[]
    OR?: StaffScalarWhereInput[]
    NOT?: StaffScalarWhereInput | StaffScalarWhereInput[]
    id?: IntFilter<"Staff"> | number
    name?: StringFilter<"Staff"> | string
    contact_number?: StringFilter<"Staff"> | string
    date_of_join?: DateTimeFilter<"Staff"> | Date | string
    salary?: DecimalFilter<"Staff"> | Decimal | DecimalJsLike | number | string
    gender?: EnumGenderEnumFilter<"Staff"> | $Enums.GenderEnum
    age?: IntFilter<"Staff"> | number
    roll_id?: IntFilter<"Staff"> | number
  }

  export type RoleCreateWithoutStaffInput = {
    role: $Enums.RoleEnum
  }

  export type RoleUncheckedCreateWithoutStaffInput = {
    role_id?: number
    role: $Enums.RoleEnum
  }

  export type RoleCreateOrConnectWithoutStaffInput = {
    where: RoleWhereUniqueInput
    create: XOR<RoleCreateWithoutStaffInput, RoleUncheckedCreateWithoutStaffInput>
  }

  export type RoleUpsertWithoutStaffInput = {
    update: XOR<RoleUpdateWithoutStaffInput, RoleUncheckedUpdateWithoutStaffInput>
    create: XOR<RoleCreateWithoutStaffInput, RoleUncheckedCreateWithoutStaffInput>
    where?: RoleWhereInput
  }

  export type RoleUpdateToOneWithWhereWithoutStaffInput = {
    where?: RoleWhereInput
    data: XOR<RoleUpdateWithoutStaffInput, RoleUncheckedUpdateWithoutStaffInput>
  }

  export type RoleUpdateWithoutStaffInput = {
    role?: EnumRoleEnumFieldUpdateOperationsInput | $Enums.RoleEnum
  }

  export type RoleUncheckedUpdateWithoutStaffInput = {
    role_id?: IntFieldUpdateOperationsInput | number
    role?: EnumRoleEnumFieldUpdateOperationsInput | $Enums.RoleEnum
  }

  export type Student2CreateWithoutStudent1Input = {
    mobile_number: string
    address: string
    emergency_number: string
    parent_contact: string
    college: CollegeCreateNestedOneWithoutStudentsInput
  }

  export type Student2UncheckedCreateWithoutStudent1Input = {
    mobile_number: string
    address: string
    emergency_number: string
    parent_contact: string
    roll_number: number
  }

  export type Student2CreateOrConnectWithoutStudent1Input = {
    where: Student2WhereUniqueInput
    create: XOR<Student2CreateWithoutStudent1Input, Student2UncheckedCreateWithoutStudent1Input>
  }

  export type FeedbackCreateWithoutStudentInput = {
    issue: string
    room_number: string
    createdAt?: Date | string
  }

  export type FeedbackUncheckedCreateWithoutStudentInput = {
    id?: number
    issue: string
    room_number: string
    createdAt?: Date | string
  }

  export type FeedbackCreateOrConnectWithoutStudentInput = {
    where: FeedbackWhereUniqueInput
    create: XOR<FeedbackCreateWithoutStudentInput, FeedbackUncheckedCreateWithoutStudentInput>
  }

  export type FeedbackCreateManyStudentInputEnvelope = {
    data: FeedbackCreateManyStudentInput | FeedbackCreateManyStudentInput[]
    skipDuplicates?: boolean
  }

  export type GatePassCreateWithoutStudentInput = {
    reason: string
    leave_date: Date | string
    arrival_date: Date | string
    approval: $Enums.ApprovalEnum
    createdAt?: Date | string
  }

  export type GatePassUncheckedCreateWithoutStudentInput = {
    id?: number
    reason: string
    leave_date: Date | string
    arrival_date: Date | string
    approval: $Enums.ApprovalEnum
    createdAt?: Date | string
  }

  export type GatePassCreateOrConnectWithoutStudentInput = {
    where: GatePassWhereUniqueInput
    create: XOR<GatePassCreateWithoutStudentInput, GatePassUncheckedCreateWithoutStudentInput>
  }

  export type GatePassCreateManyStudentInputEnvelope = {
    data: GatePassCreateManyStudentInput | GatePassCreateManyStudentInput[]
    skipDuplicates?: boolean
  }

  export type FeePaymentCreateWithoutStudentInput = {
    semester: number
    date_of_payment: Date | string
    mode_of_payment: string
  }

  export type FeePaymentUncheckedCreateWithoutStudentInput = {
    id?: number
    semester: number
    date_of_payment: Date | string
    mode_of_payment: string
  }

  export type FeePaymentCreateOrConnectWithoutStudentInput = {
    where: FeePaymentWhereUniqueInput
    create: XOR<FeePaymentCreateWithoutStudentInput, FeePaymentUncheckedCreateWithoutStudentInput>
  }

  export type FeePaymentCreateManyStudentInputEnvelope = {
    data: FeePaymentCreateManyStudentInput | FeePaymentCreateManyStudentInput[]
    skipDuplicates?: boolean
  }

  export type RoomCreateWithoutStudentInput = {
    room_id: string
  }

  export type RoomUncheckedCreateWithoutStudentInput = {
    id?: number
    room_id: string
  }

  export type RoomCreateOrConnectWithoutStudentInput = {
    where: RoomWhereUniqueInput
    create: XOR<RoomCreateWithoutStudentInput, RoomUncheckedCreateWithoutStudentInput>
  }

  export type Student2UpsertWithoutStudent1Input = {
    update: XOR<Student2UpdateWithoutStudent1Input, Student2UncheckedUpdateWithoutStudent1Input>
    create: XOR<Student2CreateWithoutStudent1Input, Student2UncheckedCreateWithoutStudent1Input>
    where?: Student2WhereInput
  }

  export type Student2UpdateToOneWithWhereWithoutStudent1Input = {
    where?: Student2WhereInput
    data: XOR<Student2UpdateWithoutStudent1Input, Student2UncheckedUpdateWithoutStudent1Input>
  }

  export type Student2UpdateWithoutStudent1Input = {
    mobile_number?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    emergency_number?: StringFieldUpdateOperationsInput | string
    parent_contact?: StringFieldUpdateOperationsInput | string
    college?: CollegeUpdateOneRequiredWithoutStudentsNestedInput
  }

  export type Student2UncheckedUpdateWithoutStudent1Input = {
    mobile_number?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    emergency_number?: StringFieldUpdateOperationsInput | string
    parent_contact?: StringFieldUpdateOperationsInput | string
    roll_number?: IntFieldUpdateOperationsInput | number
  }

  export type FeedbackUpsertWithWhereUniqueWithoutStudentInput = {
    where: FeedbackWhereUniqueInput
    update: XOR<FeedbackUpdateWithoutStudentInput, FeedbackUncheckedUpdateWithoutStudentInput>
    create: XOR<FeedbackCreateWithoutStudentInput, FeedbackUncheckedCreateWithoutStudentInput>
  }

  export type FeedbackUpdateWithWhereUniqueWithoutStudentInput = {
    where: FeedbackWhereUniqueInput
    data: XOR<FeedbackUpdateWithoutStudentInput, FeedbackUncheckedUpdateWithoutStudentInput>
  }

  export type FeedbackUpdateManyWithWhereWithoutStudentInput = {
    where: FeedbackScalarWhereInput
    data: XOR<FeedbackUpdateManyMutationInput, FeedbackUncheckedUpdateManyWithoutStudentInput>
  }

  export type FeedbackScalarWhereInput = {
    AND?: FeedbackScalarWhereInput | FeedbackScalarWhereInput[]
    OR?: FeedbackScalarWhereInput[]
    NOT?: FeedbackScalarWhereInput | FeedbackScalarWhereInput[]
    id?: IntFilter<"Feedback"> | number
    student1_id?: IntFilter<"Feedback"> | number
    issue?: StringFilter<"Feedback"> | string
    room_number?: StringFilter<"Feedback"> | string
    createdAt?: DateTimeFilter<"Feedback"> | Date | string
  }

  export type GatePassUpsertWithWhereUniqueWithoutStudentInput = {
    where: GatePassWhereUniqueInput
    update: XOR<GatePassUpdateWithoutStudentInput, GatePassUncheckedUpdateWithoutStudentInput>
    create: XOR<GatePassCreateWithoutStudentInput, GatePassUncheckedCreateWithoutStudentInput>
  }

  export type GatePassUpdateWithWhereUniqueWithoutStudentInput = {
    where: GatePassWhereUniqueInput
    data: XOR<GatePassUpdateWithoutStudentInput, GatePassUncheckedUpdateWithoutStudentInput>
  }

  export type GatePassUpdateManyWithWhereWithoutStudentInput = {
    where: GatePassScalarWhereInput
    data: XOR<GatePassUpdateManyMutationInput, GatePassUncheckedUpdateManyWithoutStudentInput>
  }

  export type GatePassScalarWhereInput = {
    AND?: GatePassScalarWhereInput | GatePassScalarWhereInput[]
    OR?: GatePassScalarWhereInput[]
    NOT?: GatePassScalarWhereInput | GatePassScalarWhereInput[]
    id?: IntFilter<"GatePass"> | number
    reason?: StringFilter<"GatePass"> | string
    leave_date?: DateTimeFilter<"GatePass"> | Date | string
    arrival_date?: DateTimeFilter<"GatePass"> | Date | string
    approval?: EnumApprovalEnumFilter<"GatePass"> | $Enums.ApprovalEnum
    student1_id?: IntFilter<"GatePass"> | number
    createdAt?: DateTimeFilter<"GatePass"> | Date | string
  }

  export type FeePaymentUpsertWithWhereUniqueWithoutStudentInput = {
    where: FeePaymentWhereUniqueInput
    update: XOR<FeePaymentUpdateWithoutStudentInput, FeePaymentUncheckedUpdateWithoutStudentInput>
    create: XOR<FeePaymentCreateWithoutStudentInput, FeePaymentUncheckedCreateWithoutStudentInput>
  }

  export type FeePaymentUpdateWithWhereUniqueWithoutStudentInput = {
    where: FeePaymentWhereUniqueInput
    data: XOR<FeePaymentUpdateWithoutStudentInput, FeePaymentUncheckedUpdateWithoutStudentInput>
  }

  export type FeePaymentUpdateManyWithWhereWithoutStudentInput = {
    where: FeePaymentScalarWhereInput
    data: XOR<FeePaymentUpdateManyMutationInput, FeePaymentUncheckedUpdateManyWithoutStudentInput>
  }

  export type FeePaymentScalarWhereInput = {
    AND?: FeePaymentScalarWhereInput | FeePaymentScalarWhereInput[]
    OR?: FeePaymentScalarWhereInput[]
    NOT?: FeePaymentScalarWhereInput | FeePaymentScalarWhereInput[]
    id?: IntFilter<"FeePayment"> | number
    semester?: IntFilter<"FeePayment"> | number
    date_of_payment?: DateTimeFilter<"FeePayment"> | Date | string
    mode_of_payment?: StringFilter<"FeePayment"> | string
    student_id?: IntFilter<"FeePayment"> | number
  }

  export type RoomUpsertWithoutStudentInput = {
    update: XOR<RoomUpdateWithoutStudentInput, RoomUncheckedUpdateWithoutStudentInput>
    create: XOR<RoomCreateWithoutStudentInput, RoomUncheckedCreateWithoutStudentInput>
    where?: RoomWhereInput
  }

  export type RoomUpdateToOneWithWhereWithoutStudentInput = {
    where?: RoomWhereInput
    data: XOR<RoomUpdateWithoutStudentInput, RoomUncheckedUpdateWithoutStudentInput>
  }

  export type RoomUpdateWithoutStudentInput = {
    room_id?: StringFieldUpdateOperationsInput | string
  }

  export type RoomUncheckedUpdateWithoutStudentInput = {
    id?: IntFieldUpdateOperationsInput | number
    room_id?: StringFieldUpdateOperationsInput | string
  }

  export type Student1CreateWithoutStudent2Input = {
    name?: string | null
    email: string
    password: string
    gender?: $Enums.GenderEnum
    age?: number
    role?: string
    feedbacks?: FeedbackCreateNestedManyWithoutStudentInput
    gatePasses?: GatePassCreateNestedManyWithoutStudentInput
    feePayments?: FeePaymentCreateNestedManyWithoutStudentInput
    room?: RoomCreateNestedOneWithoutStudentInput
  }

  export type Student1UncheckedCreateWithoutStudent2Input = {
    id?: number
    name?: string | null
    email: string
    password: string
    gender?: $Enums.GenderEnum
    age?: number
    role?: string
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutStudentInput
    gatePasses?: GatePassUncheckedCreateNestedManyWithoutStudentInput
    feePayments?: FeePaymentUncheckedCreateNestedManyWithoutStudentInput
    room?: RoomUncheckedCreateNestedOneWithoutStudentInput
  }

  export type Student1CreateOrConnectWithoutStudent2Input = {
    where: Student1WhereUniqueInput
    create: XOR<Student1CreateWithoutStudent2Input, Student1UncheckedCreateWithoutStudent2Input>
  }

  export type CollegeCreateWithoutStudentsInput = {
    roll_number: number
    college_name: string
  }

  export type CollegeUncheckedCreateWithoutStudentsInput = {
    roll_number: number
    college_name: string
  }

  export type CollegeCreateOrConnectWithoutStudentsInput = {
    where: CollegeWhereUniqueInput
    create: XOR<CollegeCreateWithoutStudentsInput, CollegeUncheckedCreateWithoutStudentsInput>
  }

  export type Student1UpsertWithoutStudent2Input = {
    update: XOR<Student1UpdateWithoutStudent2Input, Student1UncheckedUpdateWithoutStudent2Input>
    create: XOR<Student1CreateWithoutStudent2Input, Student1UncheckedCreateWithoutStudent2Input>
    where?: Student1WhereInput
  }

  export type Student1UpdateToOneWithWhereWithoutStudent2Input = {
    where?: Student1WhereInput
    data: XOR<Student1UpdateWithoutStudent2Input, Student1UncheckedUpdateWithoutStudent2Input>
  }

  export type Student1UpdateWithoutStudent2Input = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    gender?: EnumGenderEnumFieldUpdateOperationsInput | $Enums.GenderEnum
    age?: IntFieldUpdateOperationsInput | number
    role?: StringFieldUpdateOperationsInput | string
    feedbacks?: FeedbackUpdateManyWithoutStudentNestedInput
    gatePasses?: GatePassUpdateManyWithoutStudentNestedInput
    feePayments?: FeePaymentUpdateManyWithoutStudentNestedInput
    room?: RoomUpdateOneWithoutStudentNestedInput
  }

  export type Student1UncheckedUpdateWithoutStudent2Input = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    gender?: EnumGenderEnumFieldUpdateOperationsInput | $Enums.GenderEnum
    age?: IntFieldUpdateOperationsInput | number
    role?: StringFieldUpdateOperationsInput | string
    feedbacks?: FeedbackUncheckedUpdateManyWithoutStudentNestedInput
    gatePasses?: GatePassUncheckedUpdateManyWithoutStudentNestedInput
    feePayments?: FeePaymentUncheckedUpdateManyWithoutStudentNestedInput
    room?: RoomUncheckedUpdateOneWithoutStudentNestedInput
  }

  export type CollegeUpsertWithoutStudentsInput = {
    update: XOR<CollegeUpdateWithoutStudentsInput, CollegeUncheckedUpdateWithoutStudentsInput>
    create: XOR<CollegeCreateWithoutStudentsInput, CollegeUncheckedCreateWithoutStudentsInput>
    where?: CollegeWhereInput
  }

  export type CollegeUpdateToOneWithWhereWithoutStudentsInput = {
    where?: CollegeWhereInput
    data: XOR<CollegeUpdateWithoutStudentsInput, CollegeUncheckedUpdateWithoutStudentsInput>
  }

  export type CollegeUpdateWithoutStudentsInput = {
    roll_number?: IntFieldUpdateOperationsInput | number
    college_name?: StringFieldUpdateOperationsInput | string
  }

  export type CollegeUncheckedUpdateWithoutStudentsInput = {
    roll_number?: IntFieldUpdateOperationsInput | number
    college_name?: StringFieldUpdateOperationsInput | string
  }

  export type Student2CreateWithoutCollegeInput = {
    mobile_number: string
    address: string
    emergency_number: string
    parent_contact: string
    student1: Student1CreateNestedOneWithoutStudent2Input
  }

  export type Student2UncheckedCreateWithoutCollegeInput = {
    student1_id: number
    mobile_number: string
    address: string
    emergency_number: string
    parent_contact: string
  }

  export type Student2CreateOrConnectWithoutCollegeInput = {
    where: Student2WhereUniqueInput
    create: XOR<Student2CreateWithoutCollegeInput, Student2UncheckedCreateWithoutCollegeInput>
  }

  export type Student2CreateManyCollegeInputEnvelope = {
    data: Student2CreateManyCollegeInput | Student2CreateManyCollegeInput[]
    skipDuplicates?: boolean
  }

  export type Student2UpsertWithWhereUniqueWithoutCollegeInput = {
    where: Student2WhereUniqueInput
    update: XOR<Student2UpdateWithoutCollegeInput, Student2UncheckedUpdateWithoutCollegeInput>
    create: XOR<Student2CreateWithoutCollegeInput, Student2UncheckedCreateWithoutCollegeInput>
  }

  export type Student2UpdateWithWhereUniqueWithoutCollegeInput = {
    where: Student2WhereUniqueInput
    data: XOR<Student2UpdateWithoutCollegeInput, Student2UncheckedUpdateWithoutCollegeInput>
  }

  export type Student2UpdateManyWithWhereWithoutCollegeInput = {
    where: Student2ScalarWhereInput
    data: XOR<Student2UpdateManyMutationInput, Student2UncheckedUpdateManyWithoutCollegeInput>
  }

  export type Student2ScalarWhereInput = {
    AND?: Student2ScalarWhereInput | Student2ScalarWhereInput[]
    OR?: Student2ScalarWhereInput[]
    NOT?: Student2ScalarWhereInput | Student2ScalarWhereInput[]
    student1_id?: IntFilter<"Student2"> | number
    mobile_number?: StringFilter<"Student2"> | string
    address?: StringFilter<"Student2"> | string
    emergency_number?: StringFilter<"Student2"> | string
    parent_contact?: StringFilter<"Student2"> | string
    roll_number?: IntFilter<"Student2"> | number
  }

  export type Student1CreateWithoutRoomInput = {
    name?: string | null
    email: string
    password: string
    gender?: $Enums.GenderEnum
    age?: number
    role?: string
    student2?: Student2CreateNestedOneWithoutStudent1Input
    feedbacks?: FeedbackCreateNestedManyWithoutStudentInput
    gatePasses?: GatePassCreateNestedManyWithoutStudentInput
    feePayments?: FeePaymentCreateNestedManyWithoutStudentInput
  }

  export type Student1UncheckedCreateWithoutRoomInput = {
    id?: number
    name?: string | null
    email: string
    password: string
    gender?: $Enums.GenderEnum
    age?: number
    role?: string
    student2?: Student2UncheckedCreateNestedOneWithoutStudent1Input
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutStudentInput
    gatePasses?: GatePassUncheckedCreateNestedManyWithoutStudentInput
    feePayments?: FeePaymentUncheckedCreateNestedManyWithoutStudentInput
  }

  export type Student1CreateOrConnectWithoutRoomInput = {
    where: Student1WhereUniqueInput
    create: XOR<Student1CreateWithoutRoomInput, Student1UncheckedCreateWithoutRoomInput>
  }

  export type Student1UpsertWithoutRoomInput = {
    update: XOR<Student1UpdateWithoutRoomInput, Student1UncheckedUpdateWithoutRoomInput>
    create: XOR<Student1CreateWithoutRoomInput, Student1UncheckedCreateWithoutRoomInput>
    where?: Student1WhereInput
  }

  export type Student1UpdateToOneWithWhereWithoutRoomInput = {
    where?: Student1WhereInput
    data: XOR<Student1UpdateWithoutRoomInput, Student1UncheckedUpdateWithoutRoomInput>
  }

  export type Student1UpdateWithoutRoomInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    gender?: EnumGenderEnumFieldUpdateOperationsInput | $Enums.GenderEnum
    age?: IntFieldUpdateOperationsInput | number
    role?: StringFieldUpdateOperationsInput | string
    student2?: Student2UpdateOneWithoutStudent1NestedInput
    feedbacks?: FeedbackUpdateManyWithoutStudentNestedInput
    gatePasses?: GatePassUpdateManyWithoutStudentNestedInput
    feePayments?: FeePaymentUpdateManyWithoutStudentNestedInput
  }

  export type Student1UncheckedUpdateWithoutRoomInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    gender?: EnumGenderEnumFieldUpdateOperationsInput | $Enums.GenderEnum
    age?: IntFieldUpdateOperationsInput | number
    role?: StringFieldUpdateOperationsInput | string
    student2?: Student2UncheckedUpdateOneWithoutStudent1NestedInput
    feedbacks?: FeedbackUncheckedUpdateManyWithoutStudentNestedInput
    gatePasses?: GatePassUncheckedUpdateManyWithoutStudentNestedInput
    feePayments?: FeePaymentUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type Student1CreateWithoutFeedbacksInput = {
    name?: string | null
    email: string
    password: string
    gender?: $Enums.GenderEnum
    age?: number
    role?: string
    student2?: Student2CreateNestedOneWithoutStudent1Input
    gatePasses?: GatePassCreateNestedManyWithoutStudentInput
    feePayments?: FeePaymentCreateNestedManyWithoutStudentInput
    room?: RoomCreateNestedOneWithoutStudentInput
  }

  export type Student1UncheckedCreateWithoutFeedbacksInput = {
    id?: number
    name?: string | null
    email: string
    password: string
    gender?: $Enums.GenderEnum
    age?: number
    role?: string
    student2?: Student2UncheckedCreateNestedOneWithoutStudent1Input
    gatePasses?: GatePassUncheckedCreateNestedManyWithoutStudentInput
    feePayments?: FeePaymentUncheckedCreateNestedManyWithoutStudentInput
    room?: RoomUncheckedCreateNestedOneWithoutStudentInput
  }

  export type Student1CreateOrConnectWithoutFeedbacksInput = {
    where: Student1WhereUniqueInput
    create: XOR<Student1CreateWithoutFeedbacksInput, Student1UncheckedCreateWithoutFeedbacksInput>
  }

  export type Student1UpsertWithoutFeedbacksInput = {
    update: XOR<Student1UpdateWithoutFeedbacksInput, Student1UncheckedUpdateWithoutFeedbacksInput>
    create: XOR<Student1CreateWithoutFeedbacksInput, Student1UncheckedCreateWithoutFeedbacksInput>
    where?: Student1WhereInput
  }

  export type Student1UpdateToOneWithWhereWithoutFeedbacksInput = {
    where?: Student1WhereInput
    data: XOR<Student1UpdateWithoutFeedbacksInput, Student1UncheckedUpdateWithoutFeedbacksInput>
  }

  export type Student1UpdateWithoutFeedbacksInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    gender?: EnumGenderEnumFieldUpdateOperationsInput | $Enums.GenderEnum
    age?: IntFieldUpdateOperationsInput | number
    role?: StringFieldUpdateOperationsInput | string
    student2?: Student2UpdateOneWithoutStudent1NestedInput
    gatePasses?: GatePassUpdateManyWithoutStudentNestedInput
    feePayments?: FeePaymentUpdateManyWithoutStudentNestedInput
    room?: RoomUpdateOneWithoutStudentNestedInput
  }

  export type Student1UncheckedUpdateWithoutFeedbacksInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    gender?: EnumGenderEnumFieldUpdateOperationsInput | $Enums.GenderEnum
    age?: IntFieldUpdateOperationsInput | number
    role?: StringFieldUpdateOperationsInput | string
    student2?: Student2UncheckedUpdateOneWithoutStudent1NestedInput
    gatePasses?: GatePassUncheckedUpdateManyWithoutStudentNestedInput
    feePayments?: FeePaymentUncheckedUpdateManyWithoutStudentNestedInput
    room?: RoomUncheckedUpdateOneWithoutStudentNestedInput
  }

  export type Student1CreateWithoutGatePassesInput = {
    name?: string | null
    email: string
    password: string
    gender?: $Enums.GenderEnum
    age?: number
    role?: string
    student2?: Student2CreateNestedOneWithoutStudent1Input
    feedbacks?: FeedbackCreateNestedManyWithoutStudentInput
    feePayments?: FeePaymentCreateNestedManyWithoutStudentInput
    room?: RoomCreateNestedOneWithoutStudentInput
  }

  export type Student1UncheckedCreateWithoutGatePassesInput = {
    id?: number
    name?: string | null
    email: string
    password: string
    gender?: $Enums.GenderEnum
    age?: number
    role?: string
    student2?: Student2UncheckedCreateNestedOneWithoutStudent1Input
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutStudentInput
    feePayments?: FeePaymentUncheckedCreateNestedManyWithoutStudentInput
    room?: RoomUncheckedCreateNestedOneWithoutStudentInput
  }

  export type Student1CreateOrConnectWithoutGatePassesInput = {
    where: Student1WhereUniqueInput
    create: XOR<Student1CreateWithoutGatePassesInput, Student1UncheckedCreateWithoutGatePassesInput>
  }

  export type Student1UpsertWithoutGatePassesInput = {
    update: XOR<Student1UpdateWithoutGatePassesInput, Student1UncheckedUpdateWithoutGatePassesInput>
    create: XOR<Student1CreateWithoutGatePassesInput, Student1UncheckedCreateWithoutGatePassesInput>
    where?: Student1WhereInput
  }

  export type Student1UpdateToOneWithWhereWithoutGatePassesInput = {
    where?: Student1WhereInput
    data: XOR<Student1UpdateWithoutGatePassesInput, Student1UncheckedUpdateWithoutGatePassesInput>
  }

  export type Student1UpdateWithoutGatePassesInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    gender?: EnumGenderEnumFieldUpdateOperationsInput | $Enums.GenderEnum
    age?: IntFieldUpdateOperationsInput | number
    role?: StringFieldUpdateOperationsInput | string
    student2?: Student2UpdateOneWithoutStudent1NestedInput
    feedbacks?: FeedbackUpdateManyWithoutStudentNestedInput
    feePayments?: FeePaymentUpdateManyWithoutStudentNestedInput
    room?: RoomUpdateOneWithoutStudentNestedInput
  }

  export type Student1UncheckedUpdateWithoutGatePassesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    gender?: EnumGenderEnumFieldUpdateOperationsInput | $Enums.GenderEnum
    age?: IntFieldUpdateOperationsInput | number
    role?: StringFieldUpdateOperationsInput | string
    student2?: Student2UncheckedUpdateOneWithoutStudent1NestedInput
    feedbacks?: FeedbackUncheckedUpdateManyWithoutStudentNestedInput
    feePayments?: FeePaymentUncheckedUpdateManyWithoutStudentNestedInput
    room?: RoomUncheckedUpdateOneWithoutStudentNestedInput
  }

  export type Student1CreateWithoutFeePaymentsInput = {
    name?: string | null
    email: string
    password: string
    gender?: $Enums.GenderEnum
    age?: number
    role?: string
    student2?: Student2CreateNestedOneWithoutStudent1Input
    feedbacks?: FeedbackCreateNestedManyWithoutStudentInput
    gatePasses?: GatePassCreateNestedManyWithoutStudentInput
    room?: RoomCreateNestedOneWithoutStudentInput
  }

  export type Student1UncheckedCreateWithoutFeePaymentsInput = {
    id?: number
    name?: string | null
    email: string
    password: string
    gender?: $Enums.GenderEnum
    age?: number
    role?: string
    student2?: Student2UncheckedCreateNestedOneWithoutStudent1Input
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutStudentInput
    gatePasses?: GatePassUncheckedCreateNestedManyWithoutStudentInput
    room?: RoomUncheckedCreateNestedOneWithoutStudentInput
  }

  export type Student1CreateOrConnectWithoutFeePaymentsInput = {
    where: Student1WhereUniqueInput
    create: XOR<Student1CreateWithoutFeePaymentsInput, Student1UncheckedCreateWithoutFeePaymentsInput>
  }

  export type Student1UpsertWithoutFeePaymentsInput = {
    update: XOR<Student1UpdateWithoutFeePaymentsInput, Student1UncheckedUpdateWithoutFeePaymentsInput>
    create: XOR<Student1CreateWithoutFeePaymentsInput, Student1UncheckedCreateWithoutFeePaymentsInput>
    where?: Student1WhereInput
  }

  export type Student1UpdateToOneWithWhereWithoutFeePaymentsInput = {
    where?: Student1WhereInput
    data: XOR<Student1UpdateWithoutFeePaymentsInput, Student1UncheckedUpdateWithoutFeePaymentsInput>
  }

  export type Student1UpdateWithoutFeePaymentsInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    gender?: EnumGenderEnumFieldUpdateOperationsInput | $Enums.GenderEnum
    age?: IntFieldUpdateOperationsInput | number
    role?: StringFieldUpdateOperationsInput | string
    student2?: Student2UpdateOneWithoutStudent1NestedInput
    feedbacks?: FeedbackUpdateManyWithoutStudentNestedInput
    gatePasses?: GatePassUpdateManyWithoutStudentNestedInput
    room?: RoomUpdateOneWithoutStudentNestedInput
  }

  export type Student1UncheckedUpdateWithoutFeePaymentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    gender?: EnumGenderEnumFieldUpdateOperationsInput | $Enums.GenderEnum
    age?: IntFieldUpdateOperationsInput | number
    role?: StringFieldUpdateOperationsInput | string
    student2?: Student2UncheckedUpdateOneWithoutStudent1NestedInput
    feedbacks?: FeedbackUncheckedUpdateManyWithoutStudentNestedInput
    gatePasses?: GatePassUncheckedUpdateManyWithoutStudentNestedInput
    room?: RoomUncheckedUpdateOneWithoutStudentNestedInput
  }

  export type StaffCreateManyRoleInput = {
    id?: number
    name: string
    contact_number: string
    date_of_join: Date | string
    salary: Decimal | DecimalJsLike | number | string
    gender: $Enums.GenderEnum
    age: number
  }

  export type StaffUpdateWithoutRoleInput = {
    name?: StringFieldUpdateOperationsInput | string
    contact_number?: StringFieldUpdateOperationsInput | string
    date_of_join?: DateTimeFieldUpdateOperationsInput | Date | string
    salary?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    gender?: EnumGenderEnumFieldUpdateOperationsInput | $Enums.GenderEnum
    age?: IntFieldUpdateOperationsInput | number
  }

  export type StaffUncheckedUpdateWithoutRoleInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    contact_number?: StringFieldUpdateOperationsInput | string
    date_of_join?: DateTimeFieldUpdateOperationsInput | Date | string
    salary?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    gender?: EnumGenderEnumFieldUpdateOperationsInput | $Enums.GenderEnum
    age?: IntFieldUpdateOperationsInput | number
  }

  export type StaffUncheckedUpdateManyWithoutRoleInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    contact_number?: StringFieldUpdateOperationsInput | string
    date_of_join?: DateTimeFieldUpdateOperationsInput | Date | string
    salary?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    gender?: EnumGenderEnumFieldUpdateOperationsInput | $Enums.GenderEnum
    age?: IntFieldUpdateOperationsInput | number
  }

  export type FeedbackCreateManyStudentInput = {
    id?: number
    issue: string
    room_number: string
    createdAt?: Date | string
  }

  export type GatePassCreateManyStudentInput = {
    id?: number
    reason: string
    leave_date: Date | string
    arrival_date: Date | string
    approval: $Enums.ApprovalEnum
    createdAt?: Date | string
  }

  export type FeePaymentCreateManyStudentInput = {
    id?: number
    semester: number
    date_of_payment: Date | string
    mode_of_payment: string
  }

  export type FeedbackUpdateWithoutStudentInput = {
    issue?: StringFieldUpdateOperationsInput | string
    room_number?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedbackUncheckedUpdateWithoutStudentInput = {
    id?: IntFieldUpdateOperationsInput | number
    issue?: StringFieldUpdateOperationsInput | string
    room_number?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedbackUncheckedUpdateManyWithoutStudentInput = {
    id?: IntFieldUpdateOperationsInput | number
    issue?: StringFieldUpdateOperationsInput | string
    room_number?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GatePassUpdateWithoutStudentInput = {
    reason?: StringFieldUpdateOperationsInput | string
    leave_date?: DateTimeFieldUpdateOperationsInput | Date | string
    arrival_date?: DateTimeFieldUpdateOperationsInput | Date | string
    approval?: EnumApprovalEnumFieldUpdateOperationsInput | $Enums.ApprovalEnum
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GatePassUncheckedUpdateWithoutStudentInput = {
    id?: IntFieldUpdateOperationsInput | number
    reason?: StringFieldUpdateOperationsInput | string
    leave_date?: DateTimeFieldUpdateOperationsInput | Date | string
    arrival_date?: DateTimeFieldUpdateOperationsInput | Date | string
    approval?: EnumApprovalEnumFieldUpdateOperationsInput | $Enums.ApprovalEnum
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GatePassUncheckedUpdateManyWithoutStudentInput = {
    id?: IntFieldUpdateOperationsInput | number
    reason?: StringFieldUpdateOperationsInput | string
    leave_date?: DateTimeFieldUpdateOperationsInput | Date | string
    arrival_date?: DateTimeFieldUpdateOperationsInput | Date | string
    approval?: EnumApprovalEnumFieldUpdateOperationsInput | $Enums.ApprovalEnum
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeePaymentUpdateWithoutStudentInput = {
    semester?: IntFieldUpdateOperationsInput | number
    date_of_payment?: DateTimeFieldUpdateOperationsInput | Date | string
    mode_of_payment?: StringFieldUpdateOperationsInput | string
  }

  export type FeePaymentUncheckedUpdateWithoutStudentInput = {
    id?: IntFieldUpdateOperationsInput | number
    semester?: IntFieldUpdateOperationsInput | number
    date_of_payment?: DateTimeFieldUpdateOperationsInput | Date | string
    mode_of_payment?: StringFieldUpdateOperationsInput | string
  }

  export type FeePaymentUncheckedUpdateManyWithoutStudentInput = {
    id?: IntFieldUpdateOperationsInput | number
    semester?: IntFieldUpdateOperationsInput | number
    date_of_payment?: DateTimeFieldUpdateOperationsInput | Date | string
    mode_of_payment?: StringFieldUpdateOperationsInput | string
  }

  export type Student2CreateManyCollegeInput = {
    student1_id: number
    mobile_number: string
    address: string
    emergency_number: string
    parent_contact: string
  }

  export type Student2UpdateWithoutCollegeInput = {
    mobile_number?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    emergency_number?: StringFieldUpdateOperationsInput | string
    parent_contact?: StringFieldUpdateOperationsInput | string
    student1?: Student1UpdateOneRequiredWithoutStudent2NestedInput
  }

  export type Student2UncheckedUpdateWithoutCollegeInput = {
    student1_id?: IntFieldUpdateOperationsInput | number
    mobile_number?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    emergency_number?: StringFieldUpdateOperationsInput | string
    parent_contact?: StringFieldUpdateOperationsInput | string
  }

  export type Student2UncheckedUpdateManyWithoutCollegeInput = {
    student1_id?: IntFieldUpdateOperationsInput | number
    mobile_number?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    emergency_number?: StringFieldUpdateOperationsInput | string
    parent_contact?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}